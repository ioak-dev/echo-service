/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./env.js":
/*!****************!*\
  !*** ./env.js ***!
  \****************/
/***/ ((module) => {

module.exports = {
    CHATGPT_API_KEY:
        process.env.CHATGPT_API_KEY ||
        "sk-proj-ypujYZvr1RDkmp3ZlUmtT3BlbkFJdRbWD9cvaKJiXbZ3OZ6Z",
    GEMINI_API_KEY:
        process.env.GEMINI_API_KEY || "AIzaSyAq1gQekrycyU0wp5n9IFIMKMZktO_rX68",
};

/***/ }),

/***/ "./src/handler.ts":
/*!************************!*\
  !*** ./src/handler.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asyncHandler = void 0;
var asyncHandler = function (fn) { return function (req, res, next) {
    return Promise.resolve(fn(req, res, next)).catch(next);
}; };
exports.asyncHandler = asyncHandler;


/***/ }),

/***/ "./src/lib/DateUtils.ts":
/*!******************************!*\
  !*** ./src/lib/DateUtils.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatDateText = exports.FORMAT_MONTH_AND_YEAR = exports.FORMAT_FULL_DATE = void 0;
var moment_1 = __importDefault(__webpack_require__(/*! moment */ "moment"));
exports.FORMAT_FULL_DATE = "Do MMM YYYY";
exports.FORMAT_MONTH_AND_YEAR = "MMMM YYYY";
var formatDateText = function (dateText, format) {
    if (dateText) {
        var date = (0, moment_1.default)(dateText, 'YYYY-MM-DDTHH:mm:ssZ');
        return date.format(format);
    }
    return "";
};
exports.formatDateText = formatDateText;


/***/ }),

/***/ "./src/lib/Utils.ts":
/*!**************************!*\
  !*** ./src/lib/Utils.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyOrSpaces = isEmptyOrSpaces;
exports.isEmptyAttributes = isEmptyAttributes;
exports.match = match;
exports.sort = sort;
exports.htmlToText = htmlToText;
function isEmptyOrSpaces(str) {
    return !str || str.match(/^ *$/) !== null;
}
function isEmptyAttributes(object) {
    if (!object) {
        return true;
    }
    return !Object.keys(object).find(function (key) {
        if (object[key]) {
            return true;
        }
        return false;
    });
}
function match(text, words) {
    var found = false;
    if (words) {
        words.split(' ').forEach(function (word) {
            if (text.toString().match(new RegExp("(\\w*".concat(word, "\\w*)"), 'gi'))) {
                found = true;
            }
        });
    }
    return found;
}
function sort(array, property, isReverseOrder) {
    var result = array.sort(function (o1, o2) {
        if (isReverseOrder) {
            return o1[property] > o2[property]
                ? -1
                : o1[property] < o2[property]
                    ? 1
                    : 0;
        }
        return o1[property] < o2[property]
            ? -1
            : o1[property] > o2[property]
                ? 1
                : 0;
    });
    return result;
}
function htmlToText(str) {
    if (!str)
        return false;
    str = str.toString();
    return str.replace(/(<([^>]+)>)/gi, '');
}


/***/ }),

/***/ "./src/lib/dbutils.ts":
/*!****************************!*\
  !*** ./src/lib/dbutils.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getGlobalCollection = exports.getCollection = void 0;
var mongoose_1 = __importDefault(__webpack_require__(/*! mongoose */ "mongoose"));
var getCollection = function (realm, collection, schema) {
    var db = mongoose_1.default.connection.useDb("echo_".concat(realm));
    return db.model(collection, schema);
};
exports.getCollection = getCollection;
var getGlobalCollection = function (collection, schema) {
    var db = mongoose_1.default.connection.useDb("echo");
    return db.model(collection, schema);
};
exports.getGlobalCollection = getGlobalCollection;


/***/ }),

/***/ "./src/lib/gptutils.ts":
/*!*****************************!*\
  !*** ./src/lib/gptutils.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPrompt = exports.replaceVariables = exports.predict = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var axios = __webpack_require__(/*! axios */ "axios");
var DODO_URL = process.env.DODO_URL || "https://api.ioak.io:8120";
var DODO_KEY = process.env.DODO_KEY || "a53dc337-a203-4980-bfc8-12f19acddd26";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var predict = function (payload) { return __awaiter(void 0, void 0, void 0, function () {
    var response, err_1;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _l.trys.push([0, 2, , 3]);
                return [4, axios.post("".concat(DODO_URL, "/api/chatgpt/v1/chat/completions"), payload, {
                        headers: {
                            authorization: DODO_KEY,
                        },
                    })];
            case 1:
                response = _l.sent();
                if (response.status === 200) {
                    console.log("GPT RESPONSE");
                    if (((_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.choices.length) > 0 &&
                        ((_f = (_e = (_d = (_c = response.data) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.choices[0]) === null || _e === void 0 ? void 0 : _e.message) === null || _f === void 0 ? void 0 : _f.content)) {
                        return [2, (_k = (_j = (_h = (_g = response.data) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.choices[0]) === null || _j === void 0 ? void 0 : _j.message) === null || _k === void 0 ? void 0 : _k.content.replace(/```json/g, "").replace(/```/g, "")];
                    }
                }
                return [3, 3];
            case 2:
                err_1 = _l.sent();
                console.log("*", err_1);
                return [2, {}];
            case 3: return [2, null];
        }
    });
}); };
exports.predict = predict;
var replaceVariables = function (content, context) {
    if (Array.isArray(content)) {
        return content.map(function (item) { return Handlebars.compile(item)(context); }).join("\n");
    }
    else if (typeof content === "string") {
        return Handlebars.compile(content)(context);
    }
    else {
        throw new Error("Unsupported content type");
    }
};
exports.replaceVariables = replaceVariables;
var getPrompt = function (_prompt, context) {
    var prompt = (0, lodash_1.cloneDeep)(_prompt);
    for (var i = 0; i < prompt.messages.length; i++) {
        prompt.messages[i].content = (0, exports.replaceVariables)(prompt.messages[i].content, __assign({ modelName: _MODEL_NAME }, context));
    }
    console.log(prompt);
    return prompt;
};
exports.getPrompt = getPrompt;


/***/ }),

/***/ "./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateMandatoryFields = void 0;
var validateMandatoryFields = function (res, data, mandatoryFields) {
    var missingFields = [];
    mandatoryFields.forEach(function (fieldName) {
        if (!data.hasOwnProperty(fieldName)) {
            missingFields.push(fieldName);
        }
    });
    if (missingFields.length === 0) {
        return true;
    }
    res.status(400);
    res.send({
        error: { missingFields: missingFields },
    });
    res.end();
    return false;
};
exports.validateMandatoryFields = validateMandatoryFields;


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
if (true) {
    module.hot.accept();
    module.hot.dispose(function () { return server.stop(); });
}
var ApolloServer = (__webpack_require__(/*! apollo-server-express */ "apollo-server-express").ApolloServer);
var middlewares_1 = __webpack_require__(/*! ./middlewares */ "./src/middlewares.ts");
var mongoose_1 = __importDefault(__webpack_require__(/*! mongoose */ "mongoose"));
var startup_1 = __webpack_require__(/*! ./startup */ "./src/startup.ts");
var express = __webpack_require__(/*! express */ "express");
var cors = __webpack_require__(/*! cors */ "cors");
var ApiRoute = __webpack_require__(/*! ./route */ "./src/route.ts");
var gqlScalarSchema = __webpack_require__(/*! ./modules/gql-scalar */ "./src/modules/gql-scalar/index.js");
var assetSchema = __webpack_require__(/*! ./modules/asset */ "./src/modules/asset/index.js");
var sessionSchema = __webpack_require__(/*! ./modules/session */ "./src/modules/session/index.ts");
var userSchema = __webpack_require__(/*! ./modules/user */ "./src/modules/user/index.ts");
var articleSchema = __webpack_require__(/*! ./modules/article */ "./src/modules/article/index.js");
var articleCommentSchema = __webpack_require__(/*! ./modules/article/comment */ "./src/modules/article/comment/index.js");
var articleCommentFeedbackSchema = __webpack_require__(/*! ./modules/article/comment/feedback */ "./src/modules/article/comment/feedback/index.js");
var articleFeedbackSchema = __webpack_require__(/*! ./modules/article/feedback */ "./src/modules/article/feedback/index.js");
var articleCategorySchema = __webpack_require__(/*! ./modules/article/category */ "./src/modules/article/category/index.js");
var articleTagSchema = __webpack_require__(/*! ./modules/article/tag */ "./src/modules/article/tag/index.js");
var postSchema = __webpack_require__(/*! ./modules/post */ "./src/modules/post/index.js");
var postCommentSchema = __webpack_require__(/*! ./modules/post/comment */ "./src/modules/post/comment/index.js");
var postCommentFeedbackSchema = __webpack_require__(/*! ./modules/post/comment/feedback */ "./src/modules/post/comment/feedback/index.js");
var postFeedbackSchema = __webpack_require__(/*! ./modules/post/feedback */ "./src/modules/post/feedback/index.js");
var postFollowerSchema = __webpack_require__(/*! ./modules/post/follower */ "./src/modules/post/follower/index.js");
var postTagSchema = __webpack_require__(/*! ./modules/post/tag */ "./src/modules/post/tag/index.js");
var databaseUri = process.env.MONGODB_URI || "mongodb://127.0.0.1:27017";
mongoose_1.default.connect(databaseUri, {});
mongoose_1.default.pluralize(undefined);
var app = express();
var server = new ApolloServer({
    typeDefs: [
        gqlScalarSchema.typeDefs,
        assetSchema.typeDefs,
        sessionSchema.typeDefs,
        userSchema.typeDefs,
        articleSchema.typeDefs,
        articleCommentSchema.typeDefs,
        articleCommentFeedbackSchema.typeDefs,
        articleCategorySchema.typeDefs,
        articleFeedbackSchema.typeDefs,
        articleTagSchema.typeDefs,
        postSchema.typeDefs,
        postCommentSchema.typeDefs,
        postCommentFeedbackSchema.typeDefs,
        postFeedbackSchema.typeDefs,
        postFollowerSchema.typeDefs,
        postTagSchema.typeDefs,
    ],
    resolvers: [
        gqlScalarSchema.resolvers,
        assetSchema.resolvers,
        sessionSchema.resolvers,
        userSchema.resolvers,
        articleSchema.resolvers,
        articleCommentSchema.resolvers,
        articleCommentFeedbackSchema.resolvers,
        articleCategorySchema.resolvers,
        articleFeedbackSchema.resolvers,
        articleTagSchema.resolvers,
        postSchema.resolvers,
        postCommentSchema.resolvers,
        postCommentFeedbackSchema.resolvers,
        postFeedbackSchema.resolvers,
        postFollowerSchema.resolvers,
        postTagSchema.resolvers,
    ],
    context: function (_a) {
        var req = _a.req, res = _a.res;
        var authString = req.headers.authorization || "";
        var authParts = authString.split(" ");
        var token = "";
        var user = null;
        var asset = "";
        if (authParts.length === 2) {
            token = authParts[1];
            asset = authParts[0];
            user = (0, middlewares_1.authorize)(token);
        }
        return { user: user, token: token, asset: asset };
    },
    introspection: true,
    playground: true,
});
server.start().then(function () { return server.applyMiddleware({ app: app }); });
app.use(cors());
app.get("/hello", function (_, res) {
    res.send("basic connection to server works. database connection is not validated");
    res.end();
});
app.use(express.json({ limit: 5000000 }));
app.use(express.urlencoded({
    extended: true,
}));
app.use("/api", ApiRoute);
app.use(function (_, res) {
    res.status(404);
    res.send("Not found");
    res.end();
});
app.use(function (err, req, res, next) {
    console.error('Error:', err);
    res.status(500).send(err.stack);
});
app.listen({ port: process.env.PORT || 4000 }, function () {
    return console.log("\uD83D\uDE80 Server ready at http://localhost:".concat(process.env.PORT || 4000).concat(server.graphqlPath));
});
(0, startup_1.initializeSequences)();


/***/ }),

/***/ "./src/middlewares.ts":
/*!****************************!*\
  !*** ./src/middlewares.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authorizeApi = exports.authorizeApiOneauth = exports.authorize = void 0;
var fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
var jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ "jsonwebtoken"));
var helper_1 = __webpack_require__(/*! ./modules/auth/helper */ "./src/modules/auth/helper.ts");
var authorize = function (token) {
    var appRoot = process.cwd();
    var publicKey = fs_1.default.readFileSync(appRoot + "/public.pem");
    try {
        if (token) {
            return jsonwebtoken_1.default.verify(token, publicKey);
        }
        return null;
    }
    catch (err) {
        return null;
    }
};
exports.authorize = authorize;
var authorizeApiOneauth = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var token, data, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                token = req.headers["authorization"];
                if (!token) {
                    return [2, res.sendStatus(401)];
                }
                return [4, (0, helper_1.decodeToken)(token)];
            case 1:
                data = _a.sent();
                if (!data.outcome) {
                    return [2, res.sendStatus(401)];
                }
                req.user = data.claims;
                next();
                return [3, 3];
            case 2:
                err_1 = _a.sent();
                console.log(err_1);
                return [2, res.sendStatus(401)];
            case 3: return [2];
        }
    });
}); };
exports.authorizeApiOneauth = authorizeApiOneauth;
var authorizeApi = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var token, data, err_2;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _d.trys.push([0, 2, , 3]);
                token = req.headers["authorization"];
                if (!token) {
                    return [2, res.sendStatus(401)];
                }
                return [4, (0, helper_1.decodeToken)(token)];
            case 1:
                data = _d.sent();
                if (!data.outcome ||
                    (req.params.space && (!((_a = data.claims) === null || _a === void 0 ? void 0 : _a.permissions) || !((_c = (_b = data.claims) === null || _b === void 0 ? void 0 : _b.permissions['COMPANY_ADMIN']) === null || _c === void 0 ? void 0 : _c.includes(req.params.space))))) {
                    return [2, res.sendStatus(401)];
                }
                req.user = data.claims;
                next();
                return [3, 3];
            case 2:
                err_2 = _d.sent();
                console.log(err_2);
                return [2, res.sendStatus(401)];
            case 3: return [2];
        }
    });
}); };
exports.authorizeApi = authorizeApi;


/***/ }),

/***/ "./src/modules/auth/helper.ts":
/*!************************************!*\
  !*** ./src/modules/auth/helper.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decodeAppToken = exports.encodeAppToken = exports.getHash = exports.decodeSession = exports.decodeToken = exports.deleteSessionByRefreshToken = exports.deleteSession = exports.validateSession = exports.getAccessToken = exports.createSession = void 0;
var bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ "bcrypt"));
var uuid_1 = __webpack_require__(/*! uuid */ "uuid");
var fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
var jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ "jsonwebtoken"));
var date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
var model_1 = __webpack_require__(/*! ../session/model */ "./src/modules/session/model.ts");
var dbutils_1 = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");
var selfRealm = 100;
var appUrl = process.env.APP_URL || "http://localhost:3010";
var createSession = function (realm, user) { return __awaiter(void 0, void 0, void 0, function () {
    var session_id, model, claims, appRoot, privateKey, refresh_token;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                session_id = (0, uuid_1.v4)();
                model = (0, dbutils_1.getCollection)(String(realm), model_1.sessionCollection, model_1.sessionSchema);
                claims = {
                    user_id: user.id,
                    given_name: user.given_name,
                    family_name: user.family_name,
                    name: user.name,
                    nickname: user.nickname,
                    email: user.email,
                    type: user.type,
                };
                appRoot = process.cwd();
                privateKey = fs_1.default.readFileSync(appRoot + "/private.pem");
                refresh_token = jsonwebtoken_1.default.sign({
                    realm: realm,
                    id: session_id,
                }, { key: privateKey, passphrase: "no1knowsme" }, {
                    algorithm: "RS256",
                    expiresIn: "8h",
                });
                return [4, model.create({
                        session_id: session_id,
                        refresh_token: refresh_token,
                        user_id: user.id,
                        claims: claims,
                        iat: new Date(),
                        eat: (0, date_fns_1.add)(new Date(), { hours: 8 }),
                    })];
            case 1:
                _a.sent();
                return [2, { session_id: session_id, refresh_token: refresh_token }];
        }
    });
}); };
exports.createSession = createSession;
var getAccessToken = function (refreshToken) { return __awaiter(void 0, void 0, void 0, function () {
    var decoded, claims, appRoot, privateKey, model, session, refreshTokenDuration, access_token;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, exports.decodeToken)(refreshToken)];
            case 1:
                decoded = _a.sent();
                if (!decoded.outcome ||
                    !decoded.claims ||
                    !decoded.claims.realm ||
                    !decoded.claims.id) {
                    return [2, null];
                }
                claims = decoded.claims;
                appRoot = process.cwd();
                privateKey = fs_1.default.readFileSync(appRoot + "/private.pem");
                model = (0, dbutils_1.getCollection)(claims.realm, model_1.sessionCollection, model_1.sessionSchema);
                return [4, model.findOne({ session_id: claims.id })];
            case 2:
                session = _a.sent();
                if ((0, date_fns_1.differenceInSeconds)(session.eat, new Date()) < 60) {
                    return [2, null];
                }
                refreshTokenDuration = (0, date_fns_1.differenceInSeconds)(session.eat, new Date()) > 60 * 60 * 2
                    ? 60 * 60 * 2
                    : (0, date_fns_1.differenceInSeconds)(session.eat, new Date());
                access_token = jsonwebtoken_1.default.sign(session.claims, { key: privateKey, passphrase: "no1knowsme" }, {
                    algorithm: "RS256",
                    expiresIn: "".concat(refreshTokenDuration, "s"),
                });
                return [2, access_token];
        }
    });
}); };
exports.getAccessToken = getAccessToken;
var validateSession = function (realm, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, session;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getCollection)(String(realm), model_1.sessionCollection, model_1.sessionSchema);
                return [4, model.findOne({ sessionId: sessionId })];
            case 1:
                session = _a.sent();
                return [2, session];
        }
    });
}); };
exports.validateSession = validateSession;
var deleteSession = function (realm, session_id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getCollection)(String(realm), model_1.sessionCollection, model_1.sessionSchema);
                return [4, model.deleteOne({ session_id: session_id })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteSession = deleteSession;
var deleteSessionByRefreshToken = function (realm, refresh_token) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getCollection)(String(realm), model_1.sessionCollection, model_1.sessionSchema);
                return [4, model.deleteOne({ refresh_token: refresh_token })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteSessionByRefreshToken = deleteSessionByRefreshToken;
var decodeToken = function (token) { return __awaiter(void 0, void 0, void 0, function () {
    var appRoot, publicKey, res, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                appRoot = process.cwd();
                publicKey = fs_1.default.readFileSync(appRoot + "/public.pem");
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, jsonwebtoken_1.default.verify(token, publicKey)];
            case 2:
                res = _a.sent();
                return [2, { outcome: true, token: token, claims: res }];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [2, { outcome: false, err: err_1 }];
            case 4: return [2];
        }
    });
}); };
exports.decodeToken = decodeToken;
var decodeSession = function (realmId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var session;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, exports.validateSession)(realmId, sessionId)];
            case 1:
                session = _a.sent();
                if (!session) {
                    return [2, session];
                }
                return [2, (0, exports.decodeToken)(session.token)];
        }
    });
}); };
exports.decodeSession = decodeSession;
var getHash = function (password) { return __awaiter(void 0, void 0, void 0, function () {
    var salt;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, bcrypt_1.default.genSalt(10)];
            case 1:
                salt = _a.sent();
                return [4, bcrypt_1.default.hash(password, salt)];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.getHash = getHash;
var encodeAppToken = function (claims) {
    var appRoot = process.cwd();
    var privateKey = fs_1.default.readFileSync(appRoot + "/local_private.pem");
    var token = jsonwebtoken_1.default.sign(claims, { key: privateKey, passphrase: "fevicryl" }, {
        algorithm: "RS256",
        expiresIn: "100h",
    });
    return token;
};
exports.encodeAppToken = encodeAppToken;
var decodeAppToken = function (token) { return __awaiter(void 0, void 0, void 0, function () {
    var appRoot, publicKey, res, err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                appRoot = process.cwd();
                publicKey = fs_1.default.readFileSync(appRoot + "/local_public.pem");
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, jsonwebtoken_1.default.verify(token, publicKey)];
            case 2:
                res = _a.sent();
                return [2, { outcome: true, token: token, claims: res }];
            case 3:
                err_2 = _a.sent();
                console.log(err_2);
                return [2, { outcome: false, err: err_2 }];
            case 4: return [2];
        }
    });
}); };
exports.decodeAppToken = decodeAppToken;


/***/ }),

/***/ "./src/modules/auth/route.ts":
/*!***********************************!*\
  !*** ./src/modules/auth/route.ts ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/auth/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.post("/auth/authorize", (0, handler_1.asyncHandler)(service_1.signin));
    router.post("/auth/token", (0, handler_1.asyncHandler)(service_1.issueToken));
    router.get("/auth/token/decode", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.decodeToken));
    router.post("/auth/logout", (0, handler_1.asyncHandler)(service_1.logout));
    router.get("/auth/oa/session/:id", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.validateSession)(selfRealm, req, res, next));
    });
    router.delete("/auth/oa/session/:id", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.deleteSession)(selfRealm, req, res, next));
    });
    router.get("/auth/oa/session/:id/decode", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.decodeSession)(selfRealm, req, res, next));
    });
    router.get("/auth/realm/:realm/session/:id", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.validateSession)(req.params.realm, req, res, next));
    });
    router.get("/auth/realm/:realm/session/:id/decode", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.decodeSession)(req.params.realm, req, res, next));
    });
    router.delete("/auth/realm/:realm/session/:id", function (req, res, next) {
        return (0, handler_1.asyncHandler)((0, service_1.deleteSession)(req.params.realm, req, res, next));
    });
};


/***/ }),

/***/ "./src/modules/auth/service.ts":
/*!*************************************!*\
  !*** ./src/modules/auth/service.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decodeSession = exports.decodeToken = exports.deleteSession = exports.validateSession = exports.logout = exports.issueToken = exports.signin = void 0;
var bcrypt_1 = __importDefault(__webpack_require__(/*! bcrypt */ "bcrypt"));
var validation_1 = __webpack_require__(/*! ../../lib/validation */ "./src/lib/validation.ts");
var model_1 = __webpack_require__(/*! ../user/model */ "./src/modules/user/model.ts");
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/auth/helper.ts"));
var dbutils_1 = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");
var selfRealm = 100;
var signin = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, model, user, outcome, _a, session_id, refresh_token, access_token;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                payload = req.body;
                if (!(0, validation_1.validateMandatoryFields)(res, payload, [
                    "email",
                    "password",
                    "realm",
                    "response_type",
                ])) {
                    return [2];
                }
                model = (0, dbutils_1.getCollection)(payload.realm, model_1.userCollection, model_1.userSchema);
                return [4, model.findOne({
                        email: payload.email,
                        type: "oneauth",
                    })];
            case 1:
                user = _b.sent();
                if (!user) {
                    res.status(404);
                    res.send({ error: { message: "User with this user name does not exist" } });
                    res.end();
                    return [2];
                }
                if (!user.email_verified) {
                    res.status(403);
                    res.send({ error: { message: "Email of user not verified" } });
                    res.end();
                    return [2];
                }
                return [4, bcrypt_1.default.compare(payload.password, user.hash)];
            case 2:
                outcome = _b.sent();
                if (!outcome) {
                    res.status(401);
                    res.send({ error: { message: "Incorrect password" } });
                    res.end();
                    return [2];
                }
                return [4, Helper.createSession(payload.realm, user)];
            case 3:
                _a = _b.sent(), session_id = _a.session_id, refresh_token = _a.refresh_token;
                if (payload.response_type === "code") {
                    res.status(200);
                    res.send({ session_id: session_id });
                    res.end();
                    return [2];
                }
                res.status(200);
                return [4, Helper.getAccessToken(refresh_token)];
            case 4:
                access_token = _b.sent();
                res.send({ token_type: "Bearer", access_token: access_token, refresh_token: refresh_token });
                res.end();
                return [2];
        }
    });
}); };
exports.signin = signin;
var issueToken = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, access_token, token, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = req.body;
                if (!(0, validation_1.validateMandatoryFields)(res, payload, [
                    "grant_type",
                    "realm",
                    "refresh_token",
                ])) {
                    return [2];
                }
                if (!(payload.grant_type === "refresh_token")) return [3, 2];
                return [4, Helper.getAccessToken(payload.refresh_token)];
            case 1:
                access_token = _a.sent();
                if (!access_token) {
                    res.status(400);
                    res.send({ error: { message: "Refresh token invalid or expired" } });
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send({ token_type: "Bearer", access_token: access_token });
                res.end();
                return [2];
            case 2:
                token = req.params.token;
                return [4, Helper.decodeToken(token)];
            case 3:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.issueToken = issueToken;
var logout = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = req.body;
                if (!(0, validation_1.validateMandatoryFields)(res, payload, ["realm", "refresh_token"])) {
                    return [2];
                }
                return [4, Helper.deleteSessionByRefreshToken(payload.realm, payload.refresh_token)];
            case 1:
                outcome = _a.sent();
                if (outcome.deletedCount === 0) {
                    res.status(404);
                    res.send({ error: { message: "Invalid session" } });
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send({ refresh_token: payload.refresh_token });
                res.end();
                return [2];
        }
    });
}); };
exports.logout = logout;
var validateSession = function (realmId, req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var session, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, Helper.validateSession(realmId, req.params.id)];
            case 1:
                session = _a.sent();
                if (!session) {
                    res.status(404);
                    res.send("Session not found");
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send({ sessionId: req.params.id, token: session.token });
                res.end();
                return [3, 3];
            case 2:
                err_1 = _a.sent();
                next(err_1);
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
exports.validateSession = validateSession;
var deleteSession = function (realmId, req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.deleteSession(selfRealm, req.params.id)];
            case 1:
                outcome = _a.sent();
                if (outcome.deletedCount === 0) {
                    res.status(404);
                    res.send("Session not found");
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send({ sessionId: req.params.id });
                res.end();
                return [2];
        }
    });
}); };
exports.deleteSession = deleteSession;
var decodeToken = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        res.status(200);
        res.send(__assign({}, req.user));
        res.end();
        return [2];
    });
}); };
exports.decodeToken = decodeToken;
var decodeSession = function (realmId, req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var outcome, err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, Helper.decodeSession(selfRealm, req.params.id)];
            case 1:
                outcome = _a.sent();
                if (!outcome) {
                    res.status(404);
                    res.send("Session not found");
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send(outcome);
                res.end();
                return [3, 3];
            case 2:
                err_2 = _a.sent();
                next(err_2);
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
exports.decodeSession = decodeSession;


/***/ }),

/***/ "./src/modules/book/chapter/helper.ts":
/*!********************************************!*\
  !*** ./src/modules/book/chapter/helper.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addChapters = exports.deleteBookChapterByReference = exports.deleteBookChapter = exports.getBookChapterById = exports.getBookChapterByBookReference = exports.getBookChaptersByBookReference = exports.getBookChapter = exports.updateBookChapter = exports.createBookChapter = exports.generateChapters = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/chapter/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var service_1 = __webpack_require__(/*! ../../sequence/service */ "./src/modules/sequence/service.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/chapter/prompt.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var generateChapters = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, gptResponseText, gptResponse, model, _payload, i, _a, _b;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _f.sent();
                console.log(book === null || book === void 0 ? void 0 : book.isbn);
                if (!book || !book.isManaged) {
                    return [2, null];
                }
                return [4, Gptutils.predict((0, prompt_1.getBookChaptersPrompt)(book.title, book.primaryAuthor))];
            case 2:
                gptResponseText = _f.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                console.log(gptResponse);
                if (!gptResponse) {
                    return [2, null];
                }
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                _payload = [];
                i = 0;
                _f.label = 3;
            case 3:
                if (!(i < gptResponse.length)) return [3, 6];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        name: gptResponse[i],
                    }
                };
                _e = {
                    name: gptResponse[i]
                };
                return [4, (0, service_1.nextval)("chapterId", bookref, space)];
            case 4:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 5;
            case 5:
                i++;
                return [3, 3];
            case 6: return [4, model.bulkWrite(_payload)];
            case 7: return [2, _f.sent()];
        }
    });
}); };
exports.generateChapters = generateChapters;
var createBookChapter = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var model, response;
    var bookChapter = _b.bookChapter, meta = _b.meta;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                response = null;
                return [4, model.create(__assign({}, bookChapter))];
            case 1:
                response = _c.sent();
                console.log(response.reference);
                return [2, response];
        }
    });
}); };
exports.createBookChapter = createBookChapter;
var updateBookChapter = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, bookChapterResponse, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign({}, data))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [4, model.find({
                    reference: response.reference,
                })];
            case 5:
                bookChapterResponse = _a.sent();
                bookChapter = null;
                if (bookChapterResponse.length > 0) {
                    bookChapter = bookChapterResponse[0];
                }
                return [2, {
                        bookChapter: bookChapter,
                    }];
        }
    });
}); };
exports.updateBookChapter = updateBookChapter;
var getBookChapter = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBookChapter = getBookChapter;
var getBookChaptersByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookChaptersByBookReference = getBookChaptersByBookReference;
var getBookChapterByBookReference = function (space, bookref, chapterref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.find({ bookref: bookref, reference: chapterref })];
            case 1:
                response = _a.sent();
                if (response.length > 0) {
                    return [2, response[0]];
                }
                return [2, null];
        }
    });
}); };
exports.getBookChapterByBookReference = getBookChapterByBookReference;
var getBookChapterById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookChapterById = getBookChapterById;
var deleteBookChapter = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { bookChapter: _id }];
        }
    });
}); };
exports.deleteBookChapter = deleteBookChapter;
var deleteBookChapterByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { bookChapter: reference }];
        }
    });
}); };
exports.deleteBookChapterByReference = deleteBookChapterByReference;
var addChapters = function (space, bookref, chapterTitles) { return __awaiter(void 0, void 0, void 0, function () {
    var model, _payload, i, _a, _b;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                model = getCollection(space, model_1.bookChapterCollection, model_1.bookChapterSchema);
                _payload = [];
                i = 0;
                _f.label = 1;
            case 1:
                if (!(i < chapterTitles.length)) return [3, 4];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        name: chapterTitles[i],
                    }
                };
                _e = {
                    name: chapterTitles[i]
                };
                return [4, (0, service_1.nextval)("chapterId", bookref, space)];
            case 2:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 3;
            case 3:
                i++;
                return [3, 1];
            case 4: return [4, model.bulkWrite(_payload)];
            case 5: return [2, _f.sent()];
        }
    });
}); };
exports.addChapters = addChapters;


/***/ }),

/***/ "./src/modules/book/chapter/model.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/chapter/model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookChapterCollection = exports.bookChapterSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookChapterSchema = new Schema({
    name: { type: String },
    reference: { type: String },
    bookref: { type: String },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookChapterSchema = bookChapterSchema;
var bookChapterCollection = "book.chapter";
exports.bookChapterCollection = bookChapterCollection;


/***/ }),

/***/ "./src/modules/book/chapter/prompt.ts":
/*!********************************************!*\
  !*** ./src/modules/book/chapter/prompt.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBookChaptersPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
;
var getBookChaptersPrompt = function (bookName, authorName) {
    var prompt = (0, lodash_1.cloneDeep)(_BOOK_CHAPTERS_PROMPT);
    prompt.messages[prompt.messages.length - 1].content = Handlebars.compile(prompt.messages[prompt.messages.length - 1].content)({
        bookName: bookName,
        authorName: authorName,
        modelName: _MODEL_NAME,
    });
    console.log(prompt);
    return prompt;
};
exports.getBookChaptersPrompt = getBookChaptersPrompt;
var _BOOK_CHAPTERS_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are a helpful assistant designed to retrieve and provide accurate book chapter titles. Your task is to process a given book name and author name to generate a JSON array of chapter titles in string format. Ensure that the titles are returned as accurately as possible. The input will include placeholders for bookName and authorName. Do not include any additional details outside of the chapter titles.",
        },
        {
            role: "user",
            content: "Please get the list of chapters for the book titled '{{bookName}}' by '{{authorName}}' and return them as a JSON array of strings.",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/chapter/route.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/chapter/route.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/chapter/service.ts");
module.exports = function (router) {
    router.put("/book/chapter/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBookChapter));
    router.post("/book/chapter/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBookChapter));
    router.post("/book/chapter/:space/:bookref/generate-chapters", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateChapters));
    router.get("/book/chapter/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookChapterById));
    router.get("/book/chapter/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookChaptersByBookReference));
    router.get("/book/chapter/:space/:bookref/:chapterref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookChapterByBookReference));
    router.delete("/book/chapter/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookChapter));
    router.delete("/book/chapter/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookChapterByReference));
};


/***/ }),

/***/ "./src/modules/book/chapter/service.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/chapter/service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookChapterByReference = exports.deleteBookChapter = exports.getBookChapterByBookReference = exports.getBookChaptersByBookReference = exports.getBookChapterById = exports.getBookChapter = exports.updateBookChapter = exports.createBookChapter = exports.generateChapters = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/chapter/helper.ts"));
var generateChapters = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.generateChapters(req.params.space, req.params.bookref)];
            case 1:
                response = _a.sent();
                if (!response) {
                    res.status(404);
                    res.send({
                        errorMessage: "ISBN not found",
                    });
                    res.end();
                }
                else {
                    res.status(200);
                    res.send(response);
                    res.end();
                }
                return [2];
        }
    });
}); };
exports.generateChapters = generateChapters;
var createBookChapter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBookChapter(req.params.space, req.body, userId)];
            case 1:
                bookChapter = _a.sent();
                res.status(200);
                res.send(bookChapter);
                res.end();
                return [2];
        }
    });
}); };
exports.createBookChapter = createBookChapter;
var updateBookChapter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBookChapter(req.params.space, req.body, userId)];
            case 1:
                bookChapter = _a.sent();
                res.status(200);
                res.send(bookChapter);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBookChapter = updateBookChapter;
var getBookChapter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapterList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookChapter(req.params.space)];
            case 1:
                bookChapterList = _a.sent();
                res.status(200);
                res.send(bookChapterList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookChapter = getBookChapter;
var getBookChapterById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookChapterById(req.params.space, req.params.id)];
            case 1:
                bookChapter = _a.sent();
                res.status(200);
                res.send(bookChapter);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookChapterById = getBookChapterById;
var getBookChaptersByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookChaptersByBookReference(req.params.space, req.params.bookref)];
            case 1:
                bookChapter = _a.sent();
                res.status(200);
                res.send(bookChapter);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookChaptersByBookReference = getBookChaptersByBookReference;
var getBookChapterByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookChapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookChapterByBookReference(req.params.space, req.params.bookref, req.params.chapterref)];
            case 1:
                bookChapter = _a.sent();
                res.status(200);
                res.send(bookChapter);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookChapterByBookReference = getBookChapterByBookReference;
var deleteBookChapter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookChapter(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookChapter = deleteBookChapter;
var deleteBookChapterByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookChapterByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookChapterByReference = deleteBookChapterByReference;


/***/ }),

/***/ "./src/modules/book/concept/helper.ts":
/*!********************************************!*\
  !*** ./src/modules/book/concept/helper.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addConcepts = exports.deleteBookConceptByReference = exports.deleteBookConcept = exports.getBookConceptById = exports.getBookConceptByBookReference = exports.getBookConceptsByBookReference = exports.getBookConcept = exports.updateBookConcept = exports.createBookConcept = exports.generateConcepts = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/concept/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var service_1 = __webpack_require__(/*! ../../sequence/service */ "./src/modules/sequence/service.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/concept/prompt.ts");
var helper_1 = __webpack_require__(/*! ../theme/helper */ "./src/modules/book/theme/helper.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var generateConcepts = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, prompt, gptResponseText, gptResponse, model, _payload, i, _a, _b, concepts, i;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _f.sent();
                if (!book || !book.isManaged) {
                    return [2, null];
                }
                prompt = (0, prompt_1.getBookConceptsPrompt)(book.title, book.primaryAuthor);
                console.log(typeof prompt.messages[0].content);
                return [4, Gptutils.predict((0, prompt_1.getBookConceptsPrompt)(book.title, book.primaryAuthor))];
            case 2:
                gptResponseText = _f.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                console.log(gptResponse);
                if (!gptResponse) {
                    return [2, null];
                }
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                _payload = [];
                i = 0;
                _f.label = 3;
            case 3:
                if (!(i < gptResponse.length)) return [3, 6];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        name: gptResponse[i].title,
                    }
                };
                _e = {
                    name: gptResponse[i].title,
                    description: gptResponse[i].description,
                    themes: gptResponse[i].themes
                };
                return [4, (0, service_1.nextval)("conceptId", bookref, space)];
            case 4:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 5;
            case 5:
                i++;
                return [3, 3];
            case 6: return [4, model.deleteMany({ bookref: bookref })];
            case 7:
                _f.sent();
                return [4, model.bulkWrite(_payload)];
            case 8:
                _f.sent();
                return [4, model.find({ bookref: bookref })];
            case 9:
                concepts = _f.sent();
                i = 0;
                _f.label = 10;
            case 10:
                if (!(i < concepts.length)) return [3, 13];
                return [4, (0, helper_1.addThemes)(space, bookref, concepts[i].reference, concepts[i].themes)];
            case 11:
                _f.sent();
                _f.label = 12;
            case 12:
                i++;
                return [3, 10];
            case 13: return [2, concepts];
        }
    });
}); };
exports.generateConcepts = generateConcepts;
var createBookConcept = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var model, response;
    var bookConcept = _b.bookConcept, meta = _b.meta;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                response = null;
                return [4, model.create(__assign({}, bookConcept))];
            case 1:
                response = _c.sent();
                console.log(response.reference);
                return [2, response];
        }
    });
}); };
exports.createBookConcept = createBookConcept;
var updateBookConcept = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, bookConceptResponse, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign({}, data))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [4, model.find({
                    reference: response.reference,
                })];
            case 5:
                bookConceptResponse = _a.sent();
                bookConcept = null;
                if (bookConceptResponse.length > 0) {
                    bookConcept = bookConceptResponse[0];
                }
                return [2, {
                        bookConcept: bookConcept,
                    }];
        }
    });
}); };
exports.updateBookConcept = updateBookConcept;
var _ai_populate_for_concept = function (space, bookref, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log(bookref, reference);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate-concept/").concat(bookref, "/").concat(reference), {})];
            case 2:
                _a.sent();
                console.log("populated keywords for " + bookref + ", " + reference);
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getBookConcept = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBookConcept = getBookConcept;
var getBookConceptsByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookConceptsByBookReference = getBookConceptsByBookReference;
var getBookConceptByBookReference = function (space, bookref, conceptref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.find({ bookref: bookref, reference: conceptref })];
            case 1:
                response = _a.sent();
                if (response.length > 0) {
                    return [2, response[0]];
                }
                return [2, null];
        }
    });
}); };
exports.getBookConceptByBookReference = getBookConceptByBookReference;
var getBookConceptById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookConceptById = getBookConceptById;
var deleteBookConcept = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { bookConcept: _id }];
        }
    });
}); };
exports.deleteBookConcept = deleteBookConcept;
var deleteBookConceptByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { bookConcept: reference }];
        }
    });
}); };
exports.deleteBookConceptByReference = deleteBookConceptByReference;
var addConcepts = function (space, bookref, conceptTitles) { return __awaiter(void 0, void 0, void 0, function () {
    var model, _payload, i, _a, _b;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                model = getCollection(space, model_1.bookConceptCollection, model_1.bookConceptSchema);
                _payload = [];
                i = 0;
                _f.label = 1;
            case 1:
                if (!(i < conceptTitles.length)) return [3, 4];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        name: conceptTitles[i],
                    }
                };
                _e = {
                    name: conceptTitles[i]
                };
                return [4, (0, service_1.nextval)("conceptId", bookref, space)];
            case 2:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 3;
            case 3:
                i++;
                return [3, 1];
            case 4: return [4, model.bulkWrite(_payload)];
            case 5: return [2, _f.sent()];
        }
    });
}); };
exports.addConcepts = addConcepts;


/***/ }),

/***/ "./src/modules/book/concept/model.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/concept/model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookConceptCollection = exports.bookConceptSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookConceptSchema = new Schema({
    name: { type: String },
    description: { type: String },
    reference: { type: String },
    bookref: { type: String },
    themes: { type: Array },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookConceptSchema = bookConceptSchema;
var bookConceptCollection = "book.concept";
exports.bookConceptCollection = bookConceptCollection;


/***/ }),

/***/ "./src/modules/book/concept/prompt.ts":
/*!********************************************!*\
  !*** ./src/modules/book/concept/prompt.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBookConceptsPrompt = void 0;
var gptutils_1 = __webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getBookConceptsPrompt = function (bookName, authorName) {
    return (0, gptutils_1.getPrompt)(_BOOK_CONCEPTS_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        modelName: _MODEL_NAME,
    });
};
exports.getBookConceptsPrompt = getBookConceptsPrompt;
var _BOOK_CONCEPTS_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            "role": "system",
            "content": [
                "You are an AI assistant tasked with generating lists of key concepts from books;",
                "Your goal is to extract a broad range of important concepts from the book and provide detailed yet concise descriptions for each;",
                "Each concept description should fit into a single paragraph;",
                "Identify and include key concepts from the book based on its content;",
                "For each key concept, provide a flexible number of themes related to that concept. Include as many themes as are applicable but do not enforce a strict number;",
                "Each theme should be represented as an object with 'title' and 'description' fields;",
                "The 'title' of each theme should be a unique name, and the 'description' should provide context about the theme;",
                "Each theme may have a flexible number of sub-themes. Include as many sub-themes as are applicable, but do not enforce a strict number;",
                "Each sub-theme should be represented as an object with 'title' and 'description' fields;",
                "Ensure that all themes and sub-themes across all key concepts are unique in their meaning and content to avoid redundancy;",
                "Provide the output as a JSON array, where each object represents a key concept and includes 'title', 'description', and a 'themes' field;",
                "The 'themes' field should be an array of objects, each containing 'title' and 'description', and optionally a 'subThemes' field, which is an array of objects with 'title' and 'description'.",
                "Ensure the JSON output is properly formatted with correct quotation and comma placement:",
                "1. Property names and string values must be enclosed in double quotes.",
                "2. No trailing commas are allowed.",
                "3. Each object and array should be correctly nested and closed.",
                "If 'bookName' and 'authorName' are provided, include them in the context, but do not quote them;",
                "Avoid HTML content in the output."
            ]
        },
        {
            "role": "user",
            "content": [
                "Generate a comprehensive list of key concepts covered in the book '{{bookName}}' by '{{authorName}}';",
                "Each key concept should be described in a detailed yet concise paragraph;",
                "For each key concept, provide a flexible number of themes related to that concept. Include as many themes as are applicable, but do not enforce a strict number;",
                "Each theme should be represented as an object with 'title' and 'description' fields;",
                "The 'title' of each theme should be a unique name, and the 'description' should provide context to assist GPT in understanding the theme better;",
                "Each theme may include a flexible number of sub-themes. Include as many sub-themes as are applicable, but do not enforce a strict number;",
                "Each sub-theme should be represented as an object with 'title' and 'description' fields;",
                "Ensure that all themes and sub-themes across all key concepts are unique in their meaning and content to avoid redundancy;",
                "Provide the output as a JSON array, where each object represents a key concept and includes 'title', 'description', and a 'themes' field;",
                "The 'themes' field should be an array of objects, each containing 'title' and 'description', and optionally a 'subThemes' field, which is an array of objects with 'title' and 'description'.",
                "Ensure the JSON output is correctly formatted, with proper use of double quotes and no trailing commas."
            ]
        }
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/concept/route.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/concept/route.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/concept/service.ts");
module.exports = function (router) {
    router.put("/book/concept/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBookConcept));
    router.post("/book/concept/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBookConcept));
    router.post("/book/concept/:space/:bookref/generate-concepts", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateConcepts));
    router.get("/book/concept/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookConceptById));
    router.get("/book/concept/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookConceptsByBookReference));
    router.get("/book/concept/:space/:bookref/:conceptref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookConceptByBookReference));
    router.delete("/book/concept/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookConcept));
    router.delete("/book/concept/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookConceptByReference));
};


/***/ }),

/***/ "./src/modules/book/concept/service.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/concept/service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookConceptByReference = exports.deleteBookConcept = exports.getBookConceptByBookReference = exports.getBookConceptsByBookReference = exports.getBookConceptById = exports.getBookConcept = exports.updateBookConcept = exports.createBookConcept = exports.generateConcepts = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/concept/helper.ts"));
var generateConcepts = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.generateConcepts(req.params.space, req.params.bookref)];
            case 1:
                response = _a.sent();
                if (!response) {
                    res.status(404);
                    res.send({
                        errorMessage: "ISBN not found",
                    });
                    res.end();
                }
                else {
                    res.status(200);
                    res.send(response);
                    res.end();
                }
                return [2];
        }
    });
}); };
exports.generateConcepts = generateConcepts;
var createBookConcept = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBookConcept(req.params.space, req.body, userId)];
            case 1:
                bookConcept = _a.sent();
                res.status(200);
                res.send(bookConcept);
                res.end();
                return [2];
        }
    });
}); };
exports.createBookConcept = createBookConcept;
var updateBookConcept = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBookConcept(req.params.space, req.body, userId)];
            case 1:
                bookConcept = _a.sent();
                res.status(200);
                res.send(bookConcept);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBookConcept = updateBookConcept;
var getBookConcept = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConceptList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookConcept(req.params.space)];
            case 1:
                bookConceptList = _a.sent();
                res.status(200);
                res.send(bookConceptList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookConcept = getBookConcept;
var getBookConceptById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookConceptById(req.params.space, req.params.id)];
            case 1:
                bookConcept = _a.sent();
                res.status(200);
                res.send(bookConcept);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookConceptById = getBookConceptById;
var getBookConceptsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookConceptsByBookReference(req.params.space, req.params.bookref)];
            case 1:
                bookConcept = _a.sent();
                res.status(200);
                res.send(bookConcept);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookConceptsByBookReference = getBookConceptsByBookReference;
var getBookConceptByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookConcept;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookConceptByBookReference(req.params.space, req.params.bookref, req.params.conceptref)];
            case 1:
                bookConcept = _a.sent();
                res.status(200);
                res.send(bookConcept);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookConceptByBookReference = getBookConceptByBookReference;
var deleteBookConcept = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookConcept(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookConcept = deleteBookConcept;
var deleteBookConceptByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookConceptByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookConceptByReference = deleteBookConceptByReference;


/***/ }),

/***/ "./src/modules/book/conceptdetail/helper.ts":
/*!**************************************************!*\
  !*** ./src/modules/book/conceptdetail/helper.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createShortform = exports.deleteConceptDetail = exports.getConceptDetailsByBookReferenceShortform = exports.getConceptDetailsByBookReference = exports.updateConceptDetail = exports.createConceptDetail = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/conceptdetail/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var ConceptHelper = __importStar(__webpack_require__(/*! ../concept/helper */ "./src/modules/book/concept/helper.ts"));
var ExtractHelper = __importStar(__webpack_require__(/*! ../extract/helper */ "./src/modules/book/extract/helper.ts"));
var ThemeHelper = __importStar(__webpack_require__(/*! ../theme/helper */ "./src/modules/book/theme/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../../note/helper */ "./src/modules/note/helper.ts"));
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/conceptdetail/prompt.ts");
var model_2 = __webpack_require__(/*! ../concept/model */ "./src/modules/book/concept/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var createConceptDetail = function (space, bookref, conceptref, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book, model, contextList, references, excludedBooks, gptResponseText, content, conceptDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(payload.type === "summary")) return [3, 2];
                return [4, _createSummary(space, bookref, conceptref)];
            case 1: return [2, _a.sent()];
            case 2: return [4, BookHelper.getBookByReference(space, bookref)];
            case 3:
                book = _a.sent();
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                return [4, model.find({
                        bookref: bookref,
                        conceptref: conceptref,
                        type: "context",
                    })];
            case 4:
                contextList = _a.sent();
                if (contextList.length === 0) {
                    return [2, {}];
                }
                return [4, model.find({
                        conceptref: { $ne: conceptref },
                        bookref: bookref,
                        type: "further_references",
                    })];
            case 5:
                references = _a.sent();
                excludedBooks = references
                    .flatMap(function (entry) {
                    return entry.content.map(function (item) {
                        return "".concat(item.book.replace(/,/g, " "), " by ").concat(item.author.replace(/,/g, " "));
                    });
                })
                    .join(", ");
                console.log(excludedBooks);
                return [4, Gptutils.predict((0, prompt_1.getSecondarySectionPrompt)(payload.type, book.title, book.primaryAuthor, contextList[0].content, excludedBooks))];
            case 6:
                gptResponseText = _a.sent();
                content = _processAiResponse(payload.type, gptResponseText);
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        type: payload.type,
                    }, {
                        $set: {
                            customTitle: payload.sectionTitle,
                            customDescription: payload.sectionDescription,
                            content: content,
                        },
                    }, { upsert: true })];
            case 7:
                conceptDetail = _a.sent();
                return [2, conceptDetail];
        }
    });
}); };
exports.createConceptDetail = createConceptDetail;
var _createSummary = function (space, bookref, conceptref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, concept, notes, notesList, extracts, themesList, themes, gptResponseText, content, model, conceptDetail, shorterSummary;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, ConceptHelper.getBookConceptByBookReference(space, bookref, conceptref)];
            case 2:
                concept = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 3:
                notes = _a.sent();
                notesList = [];
                _filterAndSortDomainByKeywordOverlap(concept.keywords, notes).forEach(function (item) { return notesList.push(item.content); });
                return [4, ExtractHelper.getExtractChunksByBookReference(space, bookref)];
            case 4:
                extracts = _a.sent();
                _filterAndSortDomainByKeywordOverlap(concept.keywords, extracts).forEach(function (item) { return notesList.push(item.summary); });
                return [4, ThemeHelper.getBookThemesByConceptReference(space, bookref, conceptref)];
            case 5:
                themesList = _a.sent();
                themes = _formatThemesForPrompt(themesList);
                console.log(notesList.length);
                console.log(concept.themes);
                return [4, Gptutils.predict((0, prompt_1.getSummarySectionPrompt)(book.title, book.primaryAuthor, concept.name, concept.description, themes, notesList))];
            case 6:
                gptResponseText = _a.sent();
                content = _processAiResponse("summary", gptResponseText);
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        type: "summary",
                    }, {
                        $set: {
                            content: content,
                        },
                    }, { upsert: true })];
            case 7:
                conceptDetail = _a.sent();
                return [4, _generateShorterSummaryForContext(book.title, book.primaryAuthor, gptResponseText)];
            case 8:
                shorterSummary = _a.sent();
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        type: "context",
                    }, {
                        $set: {
                            content: shorterSummary,
                        },
                    }, { upsert: true })];
            case 9:
                _a.sent();
                return [2, conceptDetail];
        }
    });
}); };
var _generateShorterSummaryForContext = function (bookName, authorName, content) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponseText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getShortenContentPrompt)(bookName, authorName, content))];
            case 1:
                gptResponseText = _a.sent();
                return [2, gptResponseText];
        }
    });
}); };
function _formatThemesForPrompt(themes) {
    return themes
        .map(function (theme) { return "<strong>".concat(theme.title, ":</strong> ").concat(theme.description); })
        .join("<br><br>");
}
var _filterAndSortDomainByKeywordOverlap = function (inputKeywords, data) {
    return data
        .filter(function (item) { var _a; return (_a = item.keywords) === null || _a === void 0 ? void 0 : _a.some(function (keyword) { return inputKeywords === null || inputKeywords === void 0 ? void 0 : inputKeywords.includes(keyword); }); })
        .sort(function (a, b) {
        var _a, _b;
        var overlapA = (_a = a.keywords) === null || _a === void 0 ? void 0 : _a.filter(function (keyword) {
            return inputKeywords.includes(keyword);
        }).length;
        var overlapB = (_b = b.keywords) === null || _b === void 0 ? void 0 : _b.filter(function (keyword) {
            return inputKeywords.includes(keyword);
        }).length;
        return overlapB - overlapA;
    });
};
var _processAiResponse = function (type, text) {
    console.log(text);
    var htmlString = "";
    var data = text;
    switch (type) {
        case "further_references":
            data = JSON.parse(text);
            break;
        default:
            break;
    }
    switch (type) {
        case "further_references2":
            data.forEach(function (item) {
                htmlString += "\n          <li>\n            <strong><em>".concat(item.book, "</em></strong> by ").concat(item.author, " explores key themes such as ").concat(item.centralIdeas.join(", "), ". \n            ").concat(item.summary, "\n          </li>\n        ");
            });
            break;
        default:
            htmlString = data;
            break;
    }
    return htmlString;
};
var updateConceptDetail = function (space, id, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                response = null;
                return [4, model.findByIdAndUpdate(id, data, {})];
            case 1:
                response = _a.sent();
                return [2, response];
        }
    });
}); };
exports.updateConceptDetail = updateConceptDetail;
var getConceptDetailsByBookReference = function (space, bookref, conceptref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                return [4, model.find({ bookref: bookref, conceptref: conceptref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getConceptDetailsByBookReference = getConceptDetailsByBookReference;
var getConceptDetailsByBookReferenceShortform = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                return [4, model.find({ bookref: bookref, type: "summary" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getConceptDetailsByBookReferenceShortform = getConceptDetailsByBookReferenceShortform;
var deleteConceptDetail = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { conceptDetail: _id }];
        }
    });
}); };
exports.deleteConceptDetail = deleteConceptDetail;
var createShortform = function (space, bookref, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book, notes, notesList, concepts, keyInsightsList, conceptMap, gptResponseText, gptResponse, model, conceptModel, keyInsightsDataMap, keyInsightsSummaryMap, bulkOperationsConcept, bulkOperationsConceptDetail;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _b.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 2:
                notes = _b.sent();
                notesList = [];
                notes.forEach(function (item) { return notesList.push(item.content); });
                return [4, ConceptHelper.getBookConceptsByBookReference(space, bookref)];
            case 3:
                concepts = _b.sent();
                keyInsightsList = [];
                conceptMap = {};
                concepts.forEach(function (item) {
                    keyInsightsList.push(item.name);
                    conceptMap[item.name] = item.reference;
                });
                return [4, Gptutils.predict((0, prompt_1.getBookShortFormPrompt)(book.title, book.primaryAuthor, notesList, keyInsightsList))];
            case 4:
                gptResponseText = _b.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                model = getCollection(space, model_1.conceptDetailCollection, model_1.conceptDetailSchema);
                conceptModel = getCollection(space, model_2.bookConceptCollection, model_2.bookConceptSchema);
                keyInsightsDataMap = {};
                keyInsightsSummaryMap = {};
                (_a = gptResponse.keyInsights) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {
                    if (conceptMap[item.title])
                        keyInsightsDataMap[conceptMap[item.title]] = item.description;
                    keyInsightsSummaryMap[conceptMap[item.title]] = item.summary;
                });
                return [4, BookHelper.updateBook(space, book._id, { _id: book._id, overview: gptResponse.bookOverview.overview }, userId)];
            case 5:
                _b.sent();
                bulkOperationsConcept = Object.keys(keyInsightsDataMap).map(function (item) { return ({
                    updateOne: {
                        filter: {
                            bookref: book.reference,
                            reference: item,
                        },
                        update: {
                            $set: {
                                description: keyInsightsSummaryMap[item],
                            },
                        },
                        upsert: true,
                    },
                }); });
                bulkOperationsConceptDetail = Object.keys(keyInsightsDataMap).map(function (item) { return ({
                    updateOne: {
                        filter: {
                            bookref: book.reference,
                            conceptref: item,
                            type: "_shortform",
                        },
                        update: {
                            $set: {
                                type: "_shortform",
                                content: keyInsightsDataMap[item],
                            },
                        },
                        upsert: true,
                    },
                }); });
                return [4, model.bulkWrite(bulkOperationsConceptDetail)];
            case 6:
                _b.sent();
                return [2];
        }
    });
}); };
exports.createShortform = createShortform;


/***/ }),

/***/ "./src/modules/book/conceptdetail/model.ts":
/*!*************************************************!*\
  !*** ./src/modules/book/conceptdetail/model.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.conceptDetailCollection = exports.conceptDetailSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var conceptDetailSchema = new Schema({
    customTitle: { type: String },
    customDescription: { type: String },
    type: { type: String },
    conceptref: { type: String },
    bookref: { type: String },
    content: { type: JSON },
}, { timestamps: true, strict: false, strictQuery: false });
exports.conceptDetailSchema = conceptDetailSchema;
var conceptDetailCollection = "book.conceptdetail";
exports.conceptDetailCollection = conceptDetailCollection;


/***/ }),

/***/ "./src/modules/book/conceptdetail/prompt.ts":
/*!**************************************************!*\
  !*** ./src/modules/book/conceptdetail/prompt.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getShortenContentPrompt = exports.getBookShortFormPrompt = exports.getSummarySectionPrompt = exports.getSecondarySectionPrompt = void 0;
var gptutils_1 = __webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getSecondarySectionPrompt = function (type, bookName, authorName, content, excludedBooks) {
    switch (type) {
        case "context":
            return (0, gptutils_1.getPrompt)(_SHORTEN_CONTENT_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
            });
        case "further_references":
            return (0, gptutils_1.getPrompt)(_FURTHER_REFERENCES_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
                excludedBooks: excludedBooks,
            });
        default:
            break;
    }
};
exports.getSecondarySectionPrompt = getSecondarySectionPrompt;
var getSummarySectionPrompt = function (bookName, authorName, keyConceptTitle, keyConceptDescription, themes, noteList) {
    var notes = noteList.join("/n");
    return (0, gptutils_1.getPrompt)(_SUMMARY_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        keyConceptTitle: keyConceptTitle,
        keyConceptDescription: keyConceptDescription,
        notes: notes,
        themes: themes,
    });
};
exports.getSummarySectionPrompt = getSummarySectionPrompt;
var getBookShortFormPrompt = function (bookName, authorName, notesList, keyInsightsList) {
    var keyInsights = keyInsightsList.join(", ");
    var notes = notesList.join("\n");
    return (0, gptutils_1.getPrompt)(_SHORTFORM_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        notes: notes,
        keyInsights: keyInsights,
    });
};
exports.getBookShortFormPrompt = getBookShortFormPrompt;
var _SHORTFORM_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: 'You are an AI assistant tasked with creating a comprehensive analysis of a book in JSON format. The output should contain only valid JSON without any extra text, comments, or explanations. Follow the structure below:\n\n{\n  "bookOverview": {\n    "overview": "string",\n    "authorInfo": "string"\n  },\n  "keyInsights": [\n    {"title": "string", "description": "html", "summary": "string"},\n    {"title": "string", "description": "html", "summary": "string"},\n    ...\n  ]\n}.\n\nInstructions:\n\n1. For the "bookOverview":\n- Provide a detailed summary of the book\'s main premise and significance (4-5 sentences).\n- Mention the author\'s background and expertise relevant to the book\'s topic (2-3 sentences).\n\n2. For "keyInsights":\n- Each key insight should have a title and a detailed description.\n- The description must be in HTML format, with each paragraph enclosed within <p> tags. Only <p>, <b>, and <i> tags are allowed.\n- The description should include an in-depth explanation of the insight (4-5 paragraphs), practical examples or applications (2-3 paragraphs), and any relevant statistics or research mentioned in the book.\n\nGuidelines:\n- Ensure that the total word count of the output is between 2500 and 3000 words.\n- Provide only the JSON output with no additional text.',
        },
        {
            role: "assistant",
            content: "Ensure that each key insight is elaborated with multiple paragraphs and detailed explanations, with each paragraph enclosed in <p> tags. For each key insight in {{keyInsights}}, provide a comprehensive analysis that includes examples, applications, and supporting evidence to meet the 2500-3000 word range. Output only valid JSON.",
        },
        {
            role: "user",
            content: "The book is '{{bookName}}' by {{authorName}}. The key insights are: {{keyInsights}}.",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var getShortenContentPrompt = function (bookName, authorName, content) {
    return (0, gptutils_1.getPrompt)(_SHORTEN_CONTENT_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        content: content,
    });
};
exports.getShortenContentPrompt = getShortenContentPrompt;
var _SHORTEN_CONTENT_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a concise summary of the detailed exploration of a theme from a specific book.",
                "Your summary should capture the essence of the central theme and its sub-themes, while being brief and clear.",
                "Include references to the book name and author name to provide context for later prompts.",
                "Avoid unnecessary details and focus on the key points.",
                "When in doubt, it is safer to retain content rather than remove it. Ensure that important aspects of the theme and sub-themes are preserved.",
            ],
        },
        {
            role: "user",
            content: [
                "Summarize the following content into a shorter, concise version suitable for further analysis or interpretation. Include references to the book name {{bookName}} and author {{authorName}} in the summary:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _SUMMARY_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a detailed, logically structured, and informative explanation of a key concept explored in the book {{bookName}} by {{authorName}}.",
                "Ensure that your explanation directly describes the key concept without framing it as third-person commentary or narrative.",
                "Use clear, concise language to convey the information, maintaining a logical flow and coherence with smooth transitions between paragraphs.",
                "The notes provided are strictly for contextual understanding and should only be used where they are relevant to the book and the key concept being explored.",
                "However, they should not be treated as a source of information.",
                "You should rely on your own knowledge base to explain the concept and not use the notes as a foundation for building your logic.",
                "Format the output using HTML with paragraphs, lists, bold, and italic elements.",
                "Avoid including any extraneous tags or text.",
                "Ensure that the output always follows this structure:",
                "  - A few introductory paragraphs explaining the key concept.",
                "  - A bulleted list of key points, with the titles of each point bolded.",
                "  - A final few paragraphs to conclude the explanation.",
            ],
        },
        {
            role: "user",
            content: [
                "Explain the main ideas and arguments about {{keyConceptTitle}} from {{bookName}} by {{authorName}}, formatted in HTML with paragraphs, lists, bold, and italic elements.",
                "{{keyConceptDescription}}",
            ],
        },
        {
            role: "user",
            content: [
                "Use the following notes for contextual understanding only, and only where relevant to {{bookName}} by {{authorName}} and the key concept.",
                "Do not directly use these notes as a source for building your explanation:",
                "{{notes}}",
            ],
        },
        {
            role: "user",
            content: [
                "Here are the relevant themes for context in {{bookName}} by {{authorName}}:",
                "{{themes}}",
            ],
        },
        {
            role: "assistant",
            content: [
                "<p>{{keyConceptDescription}}</p>",
                "<p><strong>Key Ideas of {{keyConceptTitle}}:</strong></p>",
                "<ul>",
                "    <li><strong>{{KeyPointTitle1}}:</strong> {{KeyPointDescription1}}</li>",
                "    <li><strong>{{KeyPointTitle2}}:</strong> {{KeyPointDescription2}}</li>",
                "    <li><strong>{{KeyPointTitle3}}:</strong> {{KeyPointDescription3}}</li>",
                "</ul>",
                "<p>{{ConclusionParagraph1}}</p>",
                "<p>{{ConclusionParagraph2}}</p>",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _MINI_ESSAY_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "Provide a comprehensive explanation of {{keyConceptTitle}} from {{bookName}} by {{authorName}};",
                "Present the concept directly as it would be articulated in the book;",
                "The notes provided are strictly for contextual understanding and should only be used where they are relevant to the book and the key concept being explored;",
                "However, they should not be treated as a source of information;",
                "You should rely on your own knowledge base to explain the concept and not use the notes as a foundation for building your logic;",
                "Avoid commentary or third-person narrative, and instead, deliver the information in a clear, descriptive manner;",
                "Ensure that each paragraph is enclosed within <p> tags and that the explanation integrates related themes naturally and flows continuously;",
                "Exclude unnecessary tags, self-references, or apologies.",
            ],
        },
        {
            role: "user",
            content: [
                "Describe {{keyConceptTitle}} based on {{keyConceptDescription}};",
                "Illustrate its connections with other themes in the book directly and clearly.",
            ],
        },
        {
            role: "user",
            content: [
                "Use the following notes for contextual understanding only, and only where relevant to the book and key concept;",
                "Do not directly use these notes as a source for building your explanation: {{notes}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _EXPLAIN_TO_CHILD_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "Explain {{keyConceptTitle}} from {{bookName}} by {{authorName}} in a way that's easy for a small child to understand.",
                "Use simple words, short sentences, and relatable examples.",
                "The notes provided are strictly for contextual understanding and should only be used where they are relevant to the book and the key concept being explored.",
                "They should not be treated as a source of information.",
                "You should rely on your own knowledge base to explain the concept and not use the notes as a foundation for building your logic.",
                "Make sure to format the response in HTML paragraphs, without extra tags or text, and avoid self-references and apologies.",
            ],
        },
        {
            role: "user",
            content: [
                "Describe {{keyConceptTitle}} in a fun and easy way, connecting it to simple ideas and stories that a child would understand.",
            ],
        },
        {
            role: "user",
            content: [
                "Use the following notes for contextual understanding only, and only where relevant to the book and key concept.",
                "Do not directly use these notes as a source for building your explanation:",
                "{{notes}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _FURTHER_REFERENCES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a list of references for further learning based on the provided content.",
                "Your task is to generate a list of references to other books or research papers that could deepen understanding or provide additional perspectives.",
                "The output must be strictly in JSON format, without any preceding or additional text.",
                "Each reference should be a JSON object with four fields: 'book', 'author', 'centralIdeas', and 'summary'.",
                "'book' should contain the book name or the research paper title.",
                "'author' should contain the author name.",
                "'centralIdeas' should be an array list of 2-5 central ideas from the book or research paper, highlighting the core concepts discussed.",
                "'summary' should be a 2-5 line explanation of the key concepts in this reference book. The summary may or may not be related to the main content, but it should independently highlight the key concepts from the reference book.",
            ],
        },
        {
            role: "user",
            content: [
                "Provide a list of references to other books or research papers for further learning based on the main content from the book {{bookName}} by {{authorName}}. For each reference, include the following details:",
                "1. 'book' field for the book name or research paper title.",
                "2. 'author' field for the author name.",
                "3. 'centralIdeas' field as an array list of 2-5 central ideas from the reference book or research paper.",
                "4. 'summary' field as a 2-5 line explanation of the key concepts in this reference book or paper.",
                "The summary can be related or unrelated to the main content, but should highlight the concepts independently.",
                "Ensure that none of the following books are included in the recommendations (leave blank if no exclusions):",
                "{{excludedBooks}}",
                "Here is the content for reference:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/conceptdetail/route.ts":
/*!*************************************************!*\
  !*** ./src/modules/book/conceptdetail/route.ts ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/conceptdetail/service.ts");
module.exports = function (router) {
    router.put("/book/concept-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateConceptDetail));
    router.post("/book/concept-detail/:space/:bookref/:conceptref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createConceptDetail));
    router.get("/book/concept-detail/:space/:bookref/:conceptref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getConceptDetailsByBookReference));
    router.get("/book/concept-detail-shortform/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getConceptDetailsByBookReferenceShortform));
    router.delete("/book/concept-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteConceptDetail));
};


/***/ }),

/***/ "./src/modules/book/conceptdetail/service.ts":
/*!***************************************************!*\
  !*** ./src/modules/book/conceptdetail/service.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteConceptDetail = exports.getConceptDetailsByBookReferenceShortform = exports.getConceptDetailsByBookReference = exports.updateConceptDetail = exports.createConceptDetail = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/conceptdetail/helper.ts"));
var createConceptDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, conceptDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createConceptDetail(req.params.space, req.params.bookref, req.params.conceptref, req.body, userId)];
            case 1:
                conceptDetail = _a.sent();
                res.status(200);
                res.send(conceptDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.createConceptDetail = createConceptDetail;
var updateConceptDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, conceptDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateConceptDetail(req.params.space, req.params.id, req.body, userId)];
            case 1:
                conceptDetail = _a.sent();
                res.status(200);
                res.send(conceptDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.updateConceptDetail = updateConceptDetail;
var getConceptDetailsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, conceptDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getConceptDetailsByBookReference(req.params.space, req.params.bookref, req.params.conceptref)];
            case 1:
                conceptDetail = _a.sent();
                res.status(200);
                res.send(conceptDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.getConceptDetailsByBookReference = getConceptDetailsByBookReference;
var getConceptDetailsByBookReferenceShortform = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, conceptDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getConceptDetailsByBookReferenceShortform(req.params.space, req.params.bookref)];
            case 1:
                conceptDetail = _a.sent();
                res.status(200);
                res.send(conceptDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.getConceptDetailsByBookReferenceShortform = getConceptDetailsByBookReferenceShortform;
var deleteConceptDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteConceptDetail(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteConceptDetail = deleteConceptDetail;


/***/ }),

/***/ "./src/modules/book/extract/helper.ts":
/*!********************************************!*\
  !*** ./src/modules/book/extract/helper.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExtractChunksByBookReference = exports.deleteExtract = exports.getExtractsByBookReference = exports.updateExtract = exports.createExtract = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/extract/model.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/extract/prompt.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var createExtract = function (space, bookref, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, extract;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.extractCollection, model_1.extractSchema);
                return [4, model.create(__assign(__assign({}, payload), { bookref: bookref }))];
            case 1:
                extract = _a.sent();
                return [2, extract];
        }
    });
}); };
exports.createExtract = createExtract;
var updateExtract = function (space, bookref, id, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponseText, gptResponse, model, _id, rest, extractChunkModel, _payload, i, extractChunks, i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getAtomicChunksPrompt)(data.text))];
            case 1:
                gptResponseText = _a.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                console.log(gptResponse);
                model = getCollection(space, model_1.extractCollection, model_1.extractSchema);
                _id = data._id, rest = __rest(data, ["_id"]);
                extractChunkModel = getCollection(space, model_1.extractChunkCollection, model_1.extractChunkSchema);
                _payload = [];
                for (i = 0; i < gptResponse.length; i++) {
                    _payload.push({
                        insertOne: {
                            document: {
                                bookref: bookref,
                                conceptref: [],
                                extractId: id,
                                summary: gptResponse[i].summary,
                                text: gptResponse[i].content,
                            },
                        },
                    });
                }
                return [4, extractChunkModel.deleteMany({ extractId: id })];
            case 2:
                _a.sent();
                return [4, extractChunkModel.bulkWrite(_payload)];
            case 3:
                _a.sent();
                return [4, model.findByIdAndUpdate(id, __assign(__assign({}, rest), { chunks: _payload.length }), {
                        new: true,
                        upsert: true,
                    })];
            case 4:
                _a.sent();
                return [4, extractChunkModel.find({
                        bookref: bookref,
                        extractId: id,
                    })];
            case 5:
                extractChunks = _a.sent();
                console.log(extractChunks.length);
                i = 0;
                _a.label = 6;
            case 6:
                if (!(i < extractChunks.length)) return [3, 9];
                return [4, _ai_populate_for_extract(space, bookref, id, extractChunks[i]._id)];
            case 7:
                _a.sent();
                _a.label = 8;
            case 8:
                i++;
                return [3, 6];
            case 9: return [2];
        }
    });
}); };
exports.updateExtract = updateExtract;
var _ai_populate_for_extract = function (space, bookref, extractId, extractChunkId) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate-extractchunk/").concat(bookref, "/").concat(extractId, "/").concat(extractChunkId), {})];
            case 1:
                _a.sent();
                console.log("populated keywords for " + bookref + ", " + extractChunkId);
                return [3, 3];
            case 2:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
var getExtractsByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.extractCollection, model_1.extractSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getExtractsByBookReference = getExtractsByBookReference;
var deleteExtract = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.extractCollection, model_1.extractSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { extract: _id }];
        }
    });
}); };
exports.deleteExtract = deleteExtract;
var getExtractChunksByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.extractChunkCollection, model_1.extractChunkSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getExtractChunksByBookReference = getExtractChunksByBookReference;


/***/ }),

/***/ "./src/modules/book/extract/model.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/extract/model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractChunkCollection = exports.extractChunkSchema = exports.extractCollection = exports.extractSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var extractSchema = new Schema({
    text: { type: String },
    bookref: { type: String },
    chunks: { type: Number },
}, { timestamps: true, strict: false, strictQuery: false });
exports.extractSchema = extractSchema;
var extractCollection = "book.extract";
exports.extractCollection = extractCollection;
var extractChunkSchema = new Schema({
    summary: { type: String },
    text: { type: String },
    bookref: { type: String },
    conceptref: { type: Array },
    extractId: { type: String },
}, { timestamps: true, strict: false, strictQuery: false });
exports.extractChunkSchema = extractChunkSchema;
var extractChunkCollection = "book.extractchunk";
exports.extractChunkCollection = extractChunkCollection;


/***/ }),

/***/ "./src/modules/book/extract/prompt.ts":
/*!********************************************!*\
  !*** ./src/modules/book/extract/prompt.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAtomicChunksPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
;
var getAtomicChunksPrompt = function (text) {
    return _getPrompt(_ATOMIC_CHUNKS_PROMPT, text);
};
exports.getAtomicChunksPrompt = getAtomicChunksPrompt;
var _getPrompt = function (_prompt, text) {
    var prompt = (0, lodash_1.cloneDeep)(_prompt);
    for (var i = 0; i < prompt.messages.length; i++) {
        prompt.messages[i].content = Handlebars.compile(prompt.messages[i].content)({ text: text });
    }
    console.log(prompt);
    return prompt;
};
var _ATOMIC_CHUNKS_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are an assistant that processes a series of sentences from a whole text and breaks them into atomic groups based on meaning and context. For each group, create a JSON array of objects where each object has two fields: 'summary' (a single sentence that condenses the group's meaning) and 'content' (a concise form made by merging related sentences). Ensure that all key points and concepts in the input text are accurately represented in the output and that no important information is missing. The groups should be formed by your understanding of the entire text, not by dividing the text into passages.",
        },
        {
            role: "user",
            content: "{{text}}",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/extract/route.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/extract/route.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/extract/service.ts");
module.exports = function (router) {
    router.put("/book/extract/:space/:bookref/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateExtract));
    router.post("/book/extract/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createExtract));
    router.get("/book/extract/:space/bookref/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getExtractsByBookReference));
    router.delete("/book/extract/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteExtract));
};


/***/ }),

/***/ "./src/modules/book/extract/service.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/extract/service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteExtract = exports.getExtractsByBookReference = exports.updateExtract = exports.createExtract = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/extract/helper.ts"));
var createExtract = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, extract;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createExtract(req.params.space, req.params.bookref, req.body, userId)];
            case 1:
                extract = _a.sent();
                res.status(200);
                res.send(extract);
                res.end();
                return [2];
        }
    });
}); };
exports.createExtract = createExtract;
var updateExtract = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, extract;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateExtract(req.params.space, req.params.bookref, req.params.id, req.body, userId)];
            case 1:
                extract = _a.sent();
                res.status(200);
                res.send(extract);
                res.end();
                return [2];
        }
    });
}); };
exports.updateExtract = updateExtract;
var getExtractsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, extract;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getExtractsByBookReference(req.params.space, req.params.bookref)];
            case 1:
                extract = _a.sent();
                res.status(200);
                res.send(extract);
                res.end();
                return [2];
        }
    });
}); };
exports.getExtractsByBookReference = getExtractsByBookReference;
var deleteExtract = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteExtract(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteExtract = deleteExtract;


/***/ }),

/***/ "./src/modules/book/google_book_helper.ts":
/*!************************************************!*\
  !*** ./src/modules/book/google_book_helper.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBookMetadata = exports.getAllBooksByBookNameAndAuthor = exports.getBookMetadataByBookNameAndAuthor = exports.getBookMetadataByIsbn = exports.getMostRelevantBookMetadata = void 0;
var axios_1 = __importDefault(__webpack_require__(/*! axios */ "axios"));
var GOOGLE_BOOKS_API_KEY = "AIzaSyCUM3NDW_5h9faRaAliTVJ1IOnCQsDIyzs";
var WIKIPEDIA_API_URL = "https://en.wikipedia.org/w/api.php";
var getMostRelevantBookMetadata = function (bookName, authorName) { return __awaiter(void 0, void 0, void 0, function () {
    var query, url, response, items, books, relevantBook, allCategories_1, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                query = "intitle:".concat(bookName, "+inauthor:").concat(authorName);
                url = "https://www.googleapis.com/books/v1/volumes?q=".concat(query, "&key=").concat(GOOGLE_BOOKS_API_KEY);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios_1.default.get(url)];
            case 2:
                response = _a.sent();
                items = response.data.items || [];
                if (items.length === 0) {
                    return [2, null];
                }
                books = items.map(function (item) {
                    var _a, _b, _c, _d, _e, _f, _g;
                    return ({
                        title: item.volumeInfo.title,
                        description: item.volumeInfo.description,
                        shortDescription: item.volumeInfo.shortDescription || "",
                        isbn: ((_b = (_a = item.volumeInfo.industryIdentifiers) === null || _a === void 0 ? void 0 : _a.find(function (id) { return id.type === "ISBN_13"; })) === null || _b === void 0 ? void 0 : _b.identifier) ||
                            ((_d = (_c = item.volumeInfo.industryIdentifiers) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id.type === "ISBN_10"; })) === null || _d === void 0 ? void 0 : _d.identifier),
                        pageCount: item.volumeInfo.pageCount,
                        categories: item.volumeInfo.categories || [],
                        publisher: item.volumeInfo.publisher,
                        publishedDate: item.volumeInfo.publishedDate,
                        thumbnail: (_e = item.volumeInfo.imageLinks) === null || _e === void 0 ? void 0 : _e.thumbnail,
                        authors: item.volumeInfo.authors,
                        primaryAuthor: (_f = item.volumeInfo.authors) === null || _f === void 0 ? void 0 : _f[0],
                        chapterCount: ((_g = item.volumeInfo.tableOfContents) === null || _g === void 0 ? void 0 : _g.length) || 0,
                    });
                });
                relevantBook = books
                    .filter(function (book) {
                    var _a;
                    return book.title.toLowerCase() === bookName.toLowerCase() &&
                        ((_a = book.primaryAuthor) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === authorName.toLowerCase();
                })
                    .sort(function (a, b) {
                    return new Date(b.publishedDate).getTime() -
                        new Date(a.publishedDate).getTime();
                })[0];
                if (!relevantBook) {
                    relevantBook = books
                        .filter(function (book) { var _a; return ((_a = book.primaryAuthor) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === authorName.toLowerCase(); })
                        .sort(function (a, b) {
                        return new Date(b.publishedDate).getTime() -
                            new Date(a.publishedDate).getTime();
                    })[0];
                }
                if (!relevantBook) {
                    relevantBook = books
                        .filter(function (book) {
                        return book.title.toLowerCase().includes(bookName.toLowerCase());
                    })
                        .sort(function (a, b) {
                        return new Date(b.publishedDate).getTime() -
                            new Date(a.publishedDate).getTime();
                    })[0];
                }
                if (!relevantBook) {
                    relevantBook = books.sort(function (a, b) {
                        return new Date(b.publishedDate).getTime() -
                            new Date(a.publishedDate).getTime();
                    })[0];
                }
                allCategories_1 = new Set();
                books.forEach(function (book) {
                    return book.categories.forEach(function (category) { return allCategories_1.add(category); });
                });
                return [2, __assign(__assign({}, relevantBook), { categories: Array.from(allCategories_1) })];
            case 3:
                error_1 = _a.sent();
                console.error("Error retrieving book metadata:", error_1);
                return [2, null];
            case 4: return [2];
        }
    });
}); };
exports.getMostRelevantBookMetadata = getMostRelevantBookMetadata;
var getBookMetadataByIsbn = function (isbn) { return __awaiter(void 0, void 0, void 0, function () {
    var query, url, response, items, item, metadata, error_2;
    var _a, _b, _c, _d, _e, _f, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                query = "isbn:".concat(isbn);
                url = "https://www.googleapis.com/books/v1/volumes?q=".concat(query, "&key=").concat(GOOGLE_BOOKS_API_KEY);
                _h.label = 1;
            case 1:
                _h.trys.push([1, 3, , 4]);
                return [4, axios_1.default.get(url)];
            case 2:
                response = _h.sent();
                items = response.data.items || [];
                if (items.length === 0) {
                    return [2, null];
                }
                item = items[0];
                console.log(item.volumeInfo.imageLinks);
                metadata = {
                    title: item.volumeInfo.title,
                    description: item.volumeInfo.description,
                    shortDescription: item.volumeInfo.shortDescription || "",
                    isbn: ((_b = (_a = item.volumeInfo.industryIdentifiers) === null || _a === void 0 ? void 0 : _a.find(function (id) { return id.type === "ISBN_13"; })) === null || _b === void 0 ? void 0 : _b.identifier) ||
                        ((_d = (_c = item.volumeInfo.industryIdentifiers) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id.type === "ISBN_10"; })) === null || _d === void 0 ? void 0 : _d.identifier),
                    pageCount: item.volumeInfo.pageCount,
                    categories: item.volumeInfo.categories || [],
                    publisher: item.volumeInfo.publisher,
                    publishedDate: item.volumeInfo.publishedDate,
                    thumbnail: (_e = item.volumeInfo.imageLinks) === null || _e === void 0 ? void 0 : _e.thumbnail,
                    authors: item.volumeInfo.authors,
                    primaryAuthor: (_f = item.volumeInfo.authors) === null || _f === void 0 ? void 0 : _f[0],
                    chapterCount: ((_g = item.volumeInfo.tableOfContents) === null || _g === void 0 ? void 0 : _g.length) || 0,
                };
                return [2, metadata];
            case 3:
                error_2 = _h.sent();
                console.error("Error retrieving book metadata:", error_2);
                return [2, null];
            case 4: return [2];
        }
    });
}); };
exports.getBookMetadataByIsbn = getBookMetadataByIsbn;
var getBookMetadataByBookNameAndAuthor = function (bookName, authorName) { return __awaiter(void 0, void 0, void 0, function () {
    var query, url, response, items, bestMatch, metadata, error_3;
    var _a, _b, _c, _d, _e, _f, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                query = "intitle:".concat(bookName, "+inauthor:").concat(authorName);
                url = "https://www.googleapis.com/books/v1/volumes?q=".concat(query, "&key=").concat(GOOGLE_BOOKS_API_KEY);
                _h.label = 1;
            case 1:
                _h.trys.push([1, 3, , 4]);
                return [4, axios_1.default.get(url)];
            case 2:
                response = _h.sent();
                items = response.data.items || [];
                if (items.length === 0) {
                    return [2, null];
                }
                bestMatch = items.find(function (item) {
                    var _a, _b;
                    var volumeInfo = item.volumeInfo;
                    return (((_a = volumeInfo.title) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === bookName.toLowerCase() &&
                        ((_b = volumeInfo.authors) === null || _b === void 0 ? void 0 : _b.some(function (author) {
                            return author.toLowerCase() === authorName.toLowerCase();
                        })));
                }) || items[0];
                console.log(bestMatch.volumeInfo.imageLinks);
                metadata = {
                    title: bestMatch.volumeInfo.title,
                    description: bestMatch.volumeInfo.description,
                    shortDescription: bestMatch.volumeInfo.shortDescription || "",
                    isbn: ((_b = (_a = bestMatch.volumeInfo.industryIdentifiers) === null || _a === void 0 ? void 0 : _a.find(function (id) { return id.type === "ISBN_13"; })) === null || _b === void 0 ? void 0 : _b.identifier) ||
                        ((_d = (_c = bestMatch.volumeInfo.industryIdentifiers) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id.type === "ISBN_10"; })) === null || _d === void 0 ? void 0 : _d.identifier),
                    pageCount: bestMatch.volumeInfo.pageCount,
                    categories: bestMatch.volumeInfo.categories || [],
                    publisher: bestMatch.volumeInfo.publisher,
                    publishedDate: bestMatch.volumeInfo.publishedDate,
                    thumbnail: (_e = bestMatch.volumeInfo.imageLinks) === null || _e === void 0 ? void 0 : _e.thumbnail,
                    authors: bestMatch.volumeInfo.authors,
                    primaryAuthor: (_f = bestMatch.volumeInfo.authors) === null || _f === void 0 ? void 0 : _f[0],
                    chapterCount: ((_g = bestMatch.volumeInfo.tableOfContents) === null || _g === void 0 ? void 0 : _g.length) || 0,
                };
                return [2, metadata];
            case 3:
                error_3 = _h.sent();
                console.error("Error retrieving book metadata:", error_3);
                return [2, null];
            case 4: return [2];
        }
    });
}); };
exports.getBookMetadataByBookNameAndAuthor = getBookMetadataByBookNameAndAuthor;
var getAllBooksByBookNameAndAuthor = function (bookName, authorName) { return __awaiter(void 0, void 0, void 0, function () {
    var query, url, response, items, error_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                query = "intitle:".concat(bookName, "+inauthor:").concat(authorName);
                url = "https://www.googleapis.com/books/v1/volumes?q=".concat(query, "&key=").concat(GOOGLE_BOOKS_API_KEY);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios_1.default.get(url)];
            case 2:
                response = _a.sent();
                items = response.data.items || [];
                if (items.length === 0) {
                    return [2, []];
                }
                return [2, items.map(function (bestMatch) {
                        var _a, _b, _c, _d, _e;
                        return ({
                            title: bestMatch.volumeInfo.title,
                            shortDescription: bestMatch.volumeInfo.shortDescription || "",
                            isbn: ((_b = (_a = bestMatch.volumeInfo.industryIdentifiers) === null || _a === void 0 ? void 0 : _a.find(function (id) { return id.type === "ISBN_13"; })) === null || _b === void 0 ? void 0 : _b.identifier) ||
                                ((_d = (_c = bestMatch.volumeInfo.industryIdentifiers) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id.type === "ISBN_10"; })) === null || _d === void 0 ? void 0 : _d.identifier),
                            pageCount: bestMatch.volumeInfo.pageCount,
                            thumbnail: (_e = bestMatch.volumeInfo.imageLinks) === null || _e === void 0 ? void 0 : _e.thumbnail,
                        });
                    })];
            case 3:
                error_4 = _a.sent();
                console.error("Error retrieving book metadata:", error_4);
                return [2, []];
            case 4: return [2];
        }
    });
}); };
exports.getAllBooksByBookNameAndAuthor = getAllBooksByBookNameAndAuthor;
var getBookMetadata = function (isbn, bookName, authorName) { return __awaiter(void 0, void 0, void 0, function () {
    var fetchBookMetadata, items, query, item, metadata;
    var _a, _b, _c, _d, _e, _f, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                fetchBookMetadata = function (query) { return __awaiter(void 0, void 0, void 0, function () {
                    var url, response, error_5;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                url = "https://www.googleapis.com/books/v1/volumes?q=".concat(query, "&key=").concat(GOOGLE_BOOKS_API_KEY);
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4, axios_1.default.get(url)];
                            case 2:
                                response = _a.sent();
                                return [2, response.data.items || []];
                            case 3:
                                error_5 = _a.sent();
                                console.error("Error retrieving book metadata:", error_5);
                                return [2, []];
                            case 4: return [2];
                        }
                    });
                }); };
                return [4, fetchBookMetadata("isbn:".concat(isbn))];
            case 1:
                items = _h.sent();
                if (!(items.length === 0)) return [3, 3];
                query = "intitle:".concat(encodeURIComponent(bookName), "+inauthor:").concat(encodeURIComponent(authorName));
                return [4, fetchBookMetadata(query)];
            case 2:
                items = _h.sent();
                _h.label = 3;
            case 3:
                if (items.length === 0) {
                    return [2, null];
                }
                item = items[0];
                console.log(item.volumeInfo.imageLinks);
                metadata = {
                    title: item.volumeInfo.title,
                    description: item.volumeInfo.description,
                    shortDescription: item.volumeInfo.shortDescription || "",
                    isbn: ((_b = (_a = item.volumeInfo.industryIdentifiers) === null || _a === void 0 ? void 0 : _a.find(function (id) { return id.type === "ISBN_13"; })) === null || _b === void 0 ? void 0 : _b.identifier) ||
                        ((_d = (_c = item.volumeInfo.industryIdentifiers) === null || _c === void 0 ? void 0 : _c.find(function (id) { return id.type === "ISBN_10"; })) === null || _d === void 0 ? void 0 : _d.identifier),
                    pageCount: item.volumeInfo.pageCount,
                    categories: item.volumeInfo.categories || [],
                    publisher: item.volumeInfo.publisher,
                    publishedDate: item.volumeInfo.publishedDate,
                    thumbnail: (_e = item.volumeInfo.imageLinks) === null || _e === void 0 ? void 0 : _e.thumbnail,
                    authors: item.volumeInfo.authors,
                    primaryAuthor: (_f = item.volumeInfo.authors) === null || _f === void 0 ? void 0 : _f[0],
                    chapterCount: ((_g = item.volumeInfo.tableOfContents) === null || _g === void 0 ? void 0 : _g.length) || 0,
                };
                return [2, metadata];
        }
    });
}); };
exports.getBookMetadata = getBookMetadata;
var getAuthorInfo = function (authorName) { return __awaiter(void 0, void 0, void 0, function () {
    var response, pages, page, error_6;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, axios_1.default.get(WIKIPEDIA_API_URL, {
                        params: {
                            action: "query",
                            format: "json",
                            titles: authorName,
                            prop: "extracts",
                            exintro: true,
                            explaintext: true,
                            redirects: 1,
                        },
                    })];
            case 1:
                response = _a.sent();
                pages = response.data.query.pages;
                page = Object.values(pages)[0];
                if (page === null || page === void 0 ? void 0 : page.extract) {
                    return [2, page.extract];
                }
                return [2, null];
            case 2:
                error_6 = _a.sent();
                console.error("Error retrieving author information:", error_6);
                return [2, null];
            case 3: return [2];
        }
    });
}); };


/***/ }),

/***/ "./src/modules/book/helper.ts":
/*!************************************!*\
  !*** ./src/modules/book/helper.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.searchBook = exports.searchBookByText = exports.deleteBookByReference = exports.deleteBook = exports.getLibrariesByReferenceList = exports.getLibrariesByFolderIdList = exports.deleteBooksByFolderIdList = exports.getBookById = exports.getBookByReference = exports.getLibraries = exports.getBook = exports.getCoverImages = exports.updateChapterCount = exports.updateBook = exports.createBook = exports.validateBookUsingGoogleBookApi = exports.validateBook = void 0;
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var service_1 = __webpack_require__(/*! ../sequence/service */ "./src/modules/sequence/service.ts");
var GoogleBookHelper = __importStar(__webpack_require__(/*! ./google_book_helper */ "./src/modules/book/google_book_helper.ts"));
var Utils_1 = __webpack_require__(/*! ../../lib/Utils */ "./src/lib/Utils.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/prompt.ts");
var aihub_1 = __webpack_require__(/*! aihub */ "aihub");
var config = __webpack_require__(/*! ../../../env */ "./env.js");
var validateBook = function (book, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, aihub_1.ChatGpt.process(config.CHATGPT_API_KEY, "/v1/chat/completions", (0, prompt_1.getBookDetailPrompt)(book.title, book.primaryAuthor), "object")];
            case 1:
                gptResponse = _a.sent();
                return [2, {
                        data: gptResponse.isSuccessful
                            ? __assign({ title: gptResponse.responseObject.title, fullTitle: gptResponse.responseObject.fullBookName }, gptResponse.responseObject) : null,
                        outcome: {
                            status: gptResponse.isSuccessful && !gptResponse.responseObject.errorDescription
                                ? "success"
                                : "failure",
                            errorCode: gptResponse.errorCode,
                            errorDetails: gptResponse.errorDetails,
                            errorMessage: gptResponse.responseObject.errorDescription,
                        },
                    }];
        }
    });
}); };
exports.validateBook = validateBook;
var validateBookUsingGoogleBookApi = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var gptResponseText, response;
    var book = _b.book;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getBookDetailPrompt)(book.title, book.primaryAuthor))];
            case 1:
                gptResponseText = _c.sent();
                return [4, GoogleBookHelper.getMostRelevantBookMetadata(book.title, book.primaryAuthor)];
            case 2:
                response = _c.sent();
                console.log(response);
                if (!response) {
                    return [2, {
                            outcome: {
                                status: "failure",
                                message: "No book could be found with the details specified. Please provide more accurate details to do the search.",
                            },
                        }];
                }
                return [2, {
                        outcome: {
                            status: "success",
                        },
                        book: __assign({}, response),
                    }];
        }
    });
}); };
exports.validateBookUsingGoogleBookApi = validateBookUsingGoogleBookApi;
var createBook = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var bookMetadata, model, response, _c, _d, _e;
    var _f;
    var book = _b.book, meta = _b.meta;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                if (!book.isManaged) return [3, 2];
                return [4, GoogleBookHelper.getBookMetadataByBookNameAndAuthor(book.title, book.primaryAuthor)];
            case 1:
                bookMetadata = _g.sent();
                if (bookMetadata) {
                    book.thumbnail = bookMetadata.thumbnail;
                    book.publisher = bookMetadata.publisher;
                    book.publishedDate = bookMetadata.publishedDate;
                }
                _g.label = 2;
            case 2:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                response = null;
                _d = (_c = model).create;
                _e = [__assign({}, book)];
                _f = {};
                return [4, (0, service_1.nextval)("bookId", undefined, space)];
            case 3: return [4, _d.apply(_c, [__assign.apply(void 0, _e.concat([(_f.reference = _g.sent(), _f)]))])];
            case 4:
                response = _g.sent();
                return [2, response];
        }
    });
}); };
exports.createBook = createBook;
var updateBook = function (space, bookId, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                response = null;
                return [4, model.findByIdAndUpdate(bookId, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [2, response];
        }
    });
}); };
exports.updateBook = updateBook;
var updateChapterCount = function (space, bookref, chapterCount) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.findOneAndUpdate({ reference: bookref }, { chapterCount: chapterCount }, {
                        upsert: true,
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.updateChapterCount = updateChapterCount;
var getCoverImages = function (space, reference, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, exports.getBookByReference)(space, reference)];
            case 1:
                book = _a.sent();
                return [4, GoogleBookHelper.getAllBooksByBookNameAndAuthor(book.title, book.primaryAuthor)];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.getCoverImages = getCoverImages;
var getBook = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBook = getBook;
var getLibraries = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find()];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getLibraries = getLibraries;
var getBookByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find({ reference: reference })];
            case 1:
                res = _a.sent();
                if (res.length === 0) {
                    return [2, null];
                }
                return [2, res[0]];
        }
    });
}); };
exports.getBookByReference = getBookByReference;
var getBookById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookById = getBookById;
var deleteBooksByFolderIdList = function (space, folderIdList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.deleteMany({ folderId: { $in: folderIdList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteBooksByFolderIdList = deleteBooksByFolderIdList;
var getLibrariesByFolderIdList = function (space, folderIdList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find({ folderId: { $in: folderIdList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getLibrariesByFolderIdList = getLibrariesByFolderIdList;
var getLibrariesByReferenceList = function (space, refList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find({ reference: { $in: refList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getLibrariesByReferenceList = getLibrariesByReferenceList;
var deleteBook = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { book: _id }];
        }
    });
}); };
exports.deleteBook = deleteBook;
var deleteBookByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { book: reference }];
        }
    });
}); };
exports.deleteBookByReference = deleteBookByReference;
var searchBookByText = function (space, text) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, model.find({
                        $text: { $search: "\"".concat(text, "\""), $caseSensitive: false },
                    })];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.searchBookByText = searchBookByText;
var searchBook = function (space, text, textList, searchPref) { return __awaiter(void 0, void 0, void 0, function () {
    var _text, model, condition, res;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _text = (_a = text === null || text === void 0 ? void 0 : text.toLowerCase()) === null || _a === void 0 ? void 0 : _a.replace(/ +/g, " ");
                model = getCollection(space, model_1.bookCollection, model_1.bookSchema);
                return [4, _getSearchCondition(space, _text, textList, searchPref)];
            case 1:
                condition = _b.sent();
                return [4, model.find({ $or: condition }).sort({ createdAt: -1 })];
            case 2:
                res = _b.sent();
                return [2, res.map(function (item) {
                        return __assign(__assign({}, item._doc), { summary: (0, Utils_1.isEmptyOrSpaces)(item.summary)
                                ? item.autoGeneratedSummary
                                : item.summary });
                    })];
        }
    });
}); };
exports.searchBook = searchBook;
var _getSearchCondition = function (space, text, textList, searchPref) { return __awaiter(void 0, void 0, void 0, function () {
    var searchFields, condition, isValidText;
    return __generator(this, function (_a) {
        searchFields = [];
        if (searchPref) {
            Object.keys(searchPref).forEach(function (fieldName) {
                if (searchPref[fieldName]) {
                    searchFields.push(fieldName);
                }
            });
        }
        condition = [];
        isValidText = !(0, Utils_1.isEmptyOrSpaces)(text);
        if (isValidText &&
            (searchFields.length === 0 || searchFields.includes("content"))) {
            condition.push({
                content: new RegExp(text, "i"),
            });
        }
        if (isValidText && searchFields.includes("name")) {
            condition.push({
                name: new RegExp(text, "i"),
            });
        }
        if (isValidText && searchFields.includes("labels")) {
            condition.push({
                labels: {
                    $in: text.split(" "),
                },
            });
        }
        if (searchFields.length === 1 &&
            searchFields.includes("labels") &&
            textList.length > 0) {
            condition.push({
                labels: {
                    $in: textList,
                },
            });
        }
        if (condition.length === 0) {
            return [2, [{}]];
        }
        return [2, condition];
    });
}); };


/***/ }),

/***/ "./src/modules/book/log/helper.ts":
/*!****************************************!*\
  !*** ./src/modules/book/log/helper.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLog = exports.finishGenerating = exports.startGenerating = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/log/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var startGenerating = function (space, bookref, sectionref, sectiontype) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookLogCollection, model_1.bookLogSchema);
                return [4, model.deleteMany({ bookref: bookref, sectionref: sectionref, sectiontype: sectiontype })];
            case 1:
                _a.sent();
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        sectiontype: sectiontype,
                    }, {
                        $set: {
                            isRunning: true,
                        },
                    }, { upsert: true })];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.startGenerating = startGenerating;
var finishGenerating = function (space, bookref, sectionref, sectiontype) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookLogCollection, model_1.bookLogSchema);
                return [4, model.deleteMany({ bookref: bookref, sectionref: sectionref, sectiontype: sectiontype })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.finishGenerating = finishGenerating;
var getLog = function (space, bookref, sectionref, sectiontype) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookLogCollection, model_1.bookLogSchema);
                return [4, removeStaleLogs(space)];
            case 1:
                _a.sent();
                if (!!sectionref) return [3, 3];
                return [4, model.find({ bookref: bookref, sectionref: null })];
            case 2: return [2, _a.sent()];
            case 3:
                if (!!sectiontype) return [3, 5];
                return [4, model.find({ bookref: bookref, sectionref: sectionref })];
            case 4: return [2, _a.sent()];
            case 5: return [4, model.find({ bookref: bookref, sectionref: sectionref, sectiontype: sectiontype })];
            case 6: return [2, _a.sent()];
        }
    });
}); };
exports.getLog = getLog;
var removeStaleLogs = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookLogCollection, model_1.bookLogSchema);
                return [4, model.deleteMany({
                        createdAt: { $lt: new Date(Date.now() - 2 * 60 * 1000) },
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };


/***/ }),

/***/ "./src/modules/book/log/model.ts":
/*!***************************************!*\
  !*** ./src/modules/book/log/model.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookLogCollection = exports.bookLogSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookLogSchema = new Schema({
    sectiontype: { type: String },
    sectionref: { type: String },
    bookref: { type: String },
    isRunning: { type: Boolean },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookLogSchema = bookLogSchema;
var bookLogCollection = "book.log";
exports.bookLogCollection = bookLogCollection;


/***/ }),

/***/ "./src/modules/book/log/route.ts":
/*!***************************************!*\
  !*** ./src/modules/book/log/route.ts ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/log/service.ts");
module.exports = function (router) {
    router.get("/book/log/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getLog));
    router.get("/book/log/:space/:bookref/:sectionref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getLog));
    router.get("/book/log/:space/:bookref/:sectionref/:sectiontype", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getLog));
};


/***/ }),

/***/ "./src/modules/book/log/service.ts":
/*!*****************************************!*\
  !*** ./src/modules/book/log/service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLog = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/log/helper.ts"));
var getLog = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getLog(req.params.space, req.params.bookref, req.params.sectionref, req.params.sectiontype)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.getLog = getLog;


/***/ }),

/***/ "./src/modules/book/model.ts":
/*!***********************************!*\
  !*** ./src/modules/book/model.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookCollection = exports.bookSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookSchema = new Schema({
    title: { type: String },
    fullTitle: { type: String },
    reference: { type: String },
    description: { type: String },
    shortDescription: { type: String },
    overview: { type: String },
    authors: { type: Array },
    primaryAuthor: { type: String },
    authorInfo: { type: String },
    categories: { type: Array },
    isManaged: { type: Boolean },
    isbn: { type: String },
    pageCount: { type: Number },
    chapterCount: { type: Number },
    publishedDate: { type: String },
    publisher: { type: String },
    thumbnail: { type: String },
    readingProgress: { type: String },
    startedReadingOn: { type: Date }
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookSchema = bookSchema;
var bookCollection = "book";
exports.bookCollection = bookCollection;


/***/ }),

/***/ "./src/modules/book/prompt.ts":
/*!************************************!*\
  !*** ./src/modules/book/prompt.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBookDetailPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getBookDetailPrompt = function (bookName, authorName) {
    var prompt = (0, lodash_1.cloneDeep)(_BOOK_DETAIL_PROMPT);
    prompt.messages[prompt.messages.length - 1].content = Handlebars.compile(prompt.messages[prompt.messages.length - 1].content)({
        bookName: bookName,
        authorName: authorName,
        modelName: _MODEL_NAME,
    });
    return prompt;
};
exports.getBookDetailPrompt = getBookDetailPrompt;
var _BOOK_DETAIL_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are a highly intelligent assistant that processes book details.",
        },
        {
            role: "system",
            content: "When given a book name and author name, verify the book's existence.",
        },
        {
            role: "system",
            content: "If the book is valid, return only a JSON object with 'categories' (as an array), 'description' (a detailed description of 2 to 5 paragraphs), 'shortDescription' (a single paragraph summary), 'fullBookName', 'title', 'pageCount', 'authors' (as an array), 'primaryAuthor', 'publishedDate', 'isbn', 'authorInfo' (a paragraph of information about the author's major works and achievements), and 'chapterCount' (the total number of chapters in the book). If the book is part of a multi-volume series, combine the number of chapters from all volumes in 'chapterCount'. The 'authors' field should be an array ordered by the popularity of the authors. If the book cannot be found, return only a JSON object with 'errorDescription'. The response must be in JSON format only, without any additional text.",
        },
        {
            role: "user",
            content: "Please find the details for the book '{{bookName}}' authored by '{{authorName}}'.",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/route.ts":
/*!***********************************!*\
  !*** ./src/modules/book/route.ts ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var multer = __webpack_require__(/*! multer */ "multer");
var storage = multer.memoryStorage();
var upload = multer({ storage: storage });
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/service.ts");
module.exports = function (router) {
    router.put("/book/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBook));
    router.post("/book/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBook));
    router.post("/book/:space/validate-book", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.validateBook));
    router.post("/book/:space/search", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.searchBook));
    router.get("/book/:space/reference/:reference/cover-images", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getCoverImages));
    router.get("/book/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getLibraries));
    router.get("/book/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookById));
    router.get("/book/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookByReference));
    router.delete("/book/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBook));
    router.delete("/book/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookByReference));
};


/***/ }),

/***/ "./src/modules/book/section/helper.ts":
/*!********************************************!*\
  !*** ./src/modules/book/section/helper.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addSections = exports.deleteBookSectionByReference = exports.deleteBookSection = exports.getBookSectionById = exports.getBookSectionByBookReference = exports.getBookSectionsByBookReference = exports.getBookSection = exports.updateBookSection = exports.createBookSection = exports.generateSections = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/section/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var ExtractHelper = __importStar(__webpack_require__(/*! ../extract/helper */ "./src/modules/book/extract/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../../note/helper */ "./src/modules/note/helper.ts"));
var service_1 = __webpack_require__(/*! ../../sequence/service */ "./src/modules/sequence/service.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/section/prompt.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var SEQUENCE_ID = "bookSectionReference";
var generateSections = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, chaptersList, chapters, sections, model, _payload, i, _a, _b;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _f.sent();
                if (!book || !book.isManaged) {
                    return [2, null];
                }
                return [4, _getChaptersList(space, bookref)];
            case 2:
                chaptersList = _f.sent();
                chapters = chaptersList
                    .map(function (chapter) { return "".concat(chapter.title, ": ").concat(chapter.subtitle); })
                    .join("\n");
                return [4, _createSummary(space, bookref, chapters)];
            case 3:
                sections = _f.sent();
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                _payload = [];
                i = 0;
                _f.label = 4;
            case 4:
                if (!(i < sections.length)) return [3, 7];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        title: sections[i].title,
                    }
                };
                _e = {
                    title: sections[i].title,
                    description: sections[i].summary
                };
                return [4, (0, service_1.nextval)(SEQUENCE_ID, bookref, space)];
            case 5:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 6;
            case 6:
                i++;
                return [3, 4];
            case 7: return [4, model.deleteMany({ bookref: bookref })];
            case 8:
                _f.sent();
                return [4, model.bulkWrite(_payload)];
            case 9:
                _f.sent();
                return [4, BookHelper.updateChapterCount(space, bookref, _payload.length)];
            case 10:
                _f.sent();
                return [2, sections];
        }
    });
}); };
exports.generateSections = generateSections;
var _createSummary = function (space, bookref, chapters) { return __awaiter(void 0, void 0, void 0, function () {
    var book, notes, notesList, extracts, gptResponseText, gptResponse, _data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 2:
                notes = _a.sent();
                notesList = [];
                notes.forEach(function (item) { return notesList.push(item.content); });
                return [4, ExtractHelper.getExtractChunksByBookReference(space, bookref)];
            case 3:
                extracts = _a.sent();
                extracts.forEach(function (item) { return notesList.push(item.summary); });
                return [4, Gptutils.predict((0, prompt_1.getSummarySectionPrompt)(book.title, book.primaryAuthor, chapters, notesList))];
            case 4:
                gptResponseText = _a.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                _data = [];
                gptResponse.forEach(function (section) {
                    var _a;
                    var tempText = "".concat(section.content);
                    (_a = section.subsections) === null || _a === void 0 ? void 0 : _a.forEach(function (subsection) {
                        tempText += "<b>".concat(subsection.title, "</b>").concat(subsection.content);
                    });
                    _data.push({ title: section.title, summary: tempText });
                });
                return [2, _data];
        }
    });
}); };
var _getChaptersList = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, notes, notesList, extracts, gptResponseText, gptResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 2:
                notes = _a.sent();
                notesList = [];
                notes.forEach(function (item) { return notesList.push(item.content); });
                return [4, ExtractHelper.getExtractChunksByBookReference(space, bookref)];
            case 3:
                extracts = _a.sent();
                extracts.forEach(function (item) { return notesList.push(item.summary); });
                return [4, Gptutils.predict((0, prompt_1.getChaptersListPrompt)(book.title, book.primaryAuthor, book.chapterCount, notesList))];
            case 4:
                gptResponseText = _a.sent();
                gptResponse = JSON.parse(gptResponseText);
                return [2, gptResponse];
        }
    });
}); };
var _processAiResponse = function (type, text) {
    var htmlString = "";
    var data = text;
    console.log("****", data);
    switch (type) {
        case "summary":
        case "presummary":
            data = JSON.parse(text);
            break;
        default:
            break;
    }
    switch (type) {
        case "presummary":
            var _data_1 = [];
            data.forEach(function (section) {
                var _a;
                var tempText = "".concat(section.content);
                (_a = section.subsections) === null || _a === void 0 ? void 0 : _a.forEach(function (subsection) {
                    tempText += "<b>".concat(subsection.title, "</b>").concat(subsection.content);
                });
                _data_1.push({ title: section.title, summary: tempText });
            });
            htmlString = _data_1;
            break;
        case "summary":
            console.log("--", data);
            data.forEach(function (section) {
                htmlString += "<h4>".concat(section.title, "</h4>");
                htmlString += section.content;
            });
            break;
        default:
            htmlString = data;
            break;
    }
    return htmlString;
};
var createBookSection = function (space, bookref, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, _a, _b, _c;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                response = null;
                _b = (_a = model).create;
                _c = [__assign({}, data)];
                _d = { bookref: bookref };
                return [4, (0, service_1.nextval)(SEQUENCE_ID, bookref, space)];
            case 1: return [4, _b.apply(_a, [__assign.apply(void 0, _c.concat([(_d.reference = _e.sent(), _d)]))])];
            case 2:
                response = _e.sent();
                return [2, response];
        }
    });
}); };
exports.createBookSection = createBookSection;
var updateBookSection = function (space, bookref, sectionref, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, _a, title, description;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                response = null;
                _a = __assign({}, data), title = _a.title, description = _a.description;
                return [4, model.findOneAndUpdate({ bookref: bookref, reference: sectionref }, { title: title, description: description }, {
                        upsert: true,
                    })];
            case 1:
                response = _b.sent();
                return [2, response];
        }
    });
}); };
exports.updateBookSection = updateBookSection;
var _ai_populate_for_section = function (space, bookref, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log(bookref, reference);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate-section/").concat(bookref, "/").concat(reference), {})];
            case 2:
                _a.sent();
                console.log("populated keywords for " + bookref + ", " + reference);
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getBookSection = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBookSection = getBookSection;
var getBookSectionsByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookSectionsByBookReference = getBookSectionsByBookReference;
var getBookSectionByBookReference = function (space, bookref, sectionref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.find({ bookref: bookref, reference: sectionref })];
            case 1:
                response = _a.sent();
                if (response.length > 0) {
                    return [2, response[0]];
                }
                return [2, null];
        }
    });
}); };
exports.getBookSectionByBookReference = getBookSectionByBookReference;
var getBookSectionById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookSectionById = getBookSectionById;
var deleteBookSection = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { bookSection: _id }];
        }
    });
}); };
exports.deleteBookSection = deleteBookSection;
var deleteBookSectionByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { bookSection: reference }];
        }
    });
}); };
exports.deleteBookSectionByReference = deleteBookSectionByReference;
var addSections = function (space, bookref, sectionTitles) { return __awaiter(void 0, void 0, void 0, function () {
    var model, _payload, i, _a, _b;
    var _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                model = getCollection(space, model_1.bookSectionCollection, model_1.bookSectionSchema);
                _payload = [];
                i = 0;
                _f.label = 1;
            case 1:
                if (!(i < sectionTitles.length)) return [3, 4];
                _b = (_a = _payload).push;
                _c = {};
                _d = {
                    filter: {
                        bookref: bookref,
                        name: sectionTitles[i],
                    }
                };
                _e = {
                    name: sectionTitles[i]
                };
                return [4, (0, service_1.nextval)("sectionId", bookref, space)];
            case 2:
                _b.apply(_a, [(_c.updateOne = (_d.update = (_e.reference = _f.sent(),
                        _e),
                        _d.upsert = true,
                        _d),
                        _c)]);
                _f.label = 3;
            case 3:
                i++;
                return [3, 1];
            case 4: return [4, model.bulkWrite(_payload)];
            case 5: return [2, _f.sent()];
        }
    });
}); };
exports.addSections = addSections;


/***/ }),

/***/ "./src/modules/book/section/model.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/section/model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookSectionCollection = exports.bookSectionSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookSectionSchema = new Schema({
    title: { type: String },
    description: { type: String },
    reference: { type: String },
    bookref: { type: String },
    themes: { type: Array },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookSectionSchema = bookSectionSchema;
var bookSectionCollection = "book.section";
exports.bookSectionCollection = bookSectionCollection;


/***/ }),

/***/ "./src/modules/book/section/prompt.ts":
/*!********************************************!*\
  !*** ./src/modules/book/section/prompt.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getChaptersListPrompt = exports.getSummarySectionPrompt = void 0;
var gptutils_1 = __webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getSummarySectionPrompt = function (bookName, authorName, chapters, noteList) {
    var notes = noteList.join("/n");
    return (0, gptutils_1.getPrompt)(_SUMMARY_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        chapters: chapters,
        notes: notes,
    });
};
exports.getSummarySectionPrompt = getSummarySectionPrompt;
var getChaptersListPrompt = function (bookName, authorName, chapterCount, noteList) {
    var notes = noteList.join("/n");
    return (0, gptutils_1.getPrompt)(_CHAPTERS_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        chapterCount: chapterCount,
        notes: notes,
    });
};
exports.getChaptersListPrompt = getChaptersListPrompt;
var _SUMMARY_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI assistant and expert book reader.",
                "Provide comprehensive chapter-by-chapter summaries, ensuring all major plot points, character developments, and themes are included.",
                "Follow the chapters as given by the user, ensuring logical flow and organization of the book's content.",
                "Ensure the content is distributed naturally across the chapters, fitting all key events and elements of the book appropriately.",
                "Each section should capture the essence of the chapter with a detailed summary of at least one paragraph, covering all important aspects without oversimplifying.",
                "Format using <p>, <i>, and <b> tags only when necessary.",
                'Do not include any explanations, only provide a  RFC8259 compliant JSON response following this format without deviation. [{"title": "section title", "content": "section summary", "subsections": [{"title": "sub-section title", "content": "sub-section summary"}]}].',
            ],
        },
        {
            role: "user",
            content: [
                "Provide a detailed summary of {{bookName}} by {{authorName}}.",
                "Use the list of chapter titles provided in {{chapters}} to organize the book's content logically.",
                "Ensure all key details and content of the book are covered within the chapter summaries, flowing correctly from one chapter to the next as per the book's structure.",
                "Each section must cover key details comprehensively without oversimplification and maintain conciseness, providing at least a paragraph for each chapter.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 8192,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _CHAPTERS_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "Use the provided book name {{bookName}}.",
                "Use the author name {{authorName}}.",
                "Use the chapter count {{chapterCount}}.",
                "Generate a list of chapter titles that closely follow the actual structure and flow of the book, wherever possible.",
                "If the original book does not have enough distinct chapters to meet the chapterCount, distribute additional chapters evenly throughout the book’s content, while maintaining logical divisions.",
                "Ensure the number of chapters generated is exactly equal to the chapterCount specified.",
                "If chapters are numbered without titles, create suitable titles based on their content.",
                "Do not include any chapter number prefix in the chapter titles. Do not repeat chapter title in chapter subtitle.",
                'Do not include any explanations, only provide a  RFC8259 compliant JSON response following this format without deviation. [{"title": "chapter title", "subtitle": "a short one line text to give a context of wht the chapter is about"}].',
            ],
        },
        {
            role: "user",
            content: [
                "Book name is {{bookName}}.",
                "Author name is {{authorName}}.",
                "Number of chapters is {{chapterCount}}.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/section/route.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/section/route.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/section/service.ts");
module.exports = function (router) {
    router.put("/book/section/:space/:bookref/:sectionref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBookSection));
    router.post("/book/section/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBookSection));
    router.post("/book/section/:space/:bookref/generate-sections", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateSections));
    router.get("/book/section/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSectionById));
    router.get("/book/section/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSectionsByBookReference));
    router.get("/book/section/:space/:bookref/:sectionref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSectionByBookReference));
    router.delete("/book/section/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookSection));
    router.delete("/book/section/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookSectionByReference));
};


/***/ }),

/***/ "./src/modules/book/section/service.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/section/service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookSectionByReference = exports.deleteBookSection = exports.getBookSectionByBookReference = exports.getBookSectionsByBookReference = exports.getBookSectionById = exports.getBookSection = exports.updateBookSection = exports.createBookSection = exports.generateSections = void 0;
var helper_1 = __webpack_require__(/*! ../log/helper */ "./src/modules/book/log/helper.ts");
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/section/helper.ts"));
var generateSections = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, (0, helper_1.startGenerating)(req.params.space, req.params.bookref)];
            case 1:
                _a.sent();
                res.status(202).send({
                    message: "Section generation started. You will be notified upon completion.",
                });
                return [4, Helper.generateSections(req.params.space, req.params.bookref)];
            case 2:
                _a.sent();
                return [4, (0, helper_1.finishGenerating)(req.params.space, req.params.bookref)];
            case 3:
                _a.sent();
                return [2];
        }
    });
}); };
exports.generateSections = generateSections;
var createBookSection = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSection;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBookSection(req.params.space, req.params.bookref, req.body, userId)];
            case 1:
                bookSection = _a.sent();
                res.status(200);
                res.send(bookSection);
                res.end();
                return [2];
        }
    });
}); };
exports.createBookSection = createBookSection;
var updateBookSection = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSection;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBookSection(req.params.space, req.params.bookref, req.params.sectionref, req.body, userId)];
            case 1:
                bookSection = _a.sent();
                res.status(200);
                res.send(bookSection);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBookSection = updateBookSection;
var getBookSection = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSectionList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSection(req.params.space)];
            case 1:
                bookSectionList = _a.sent();
                res.status(200);
                res.send(bookSectionList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSection = getBookSection;
var getBookSectionById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSection;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSectionById(req.params.space, req.params.id)];
            case 1:
                bookSection = _a.sent();
                res.status(200);
                res.send(bookSection);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSectionById = getBookSectionById;
var getBookSectionsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSection;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSectionsByBookReference(req.params.space, req.params.bookref)];
            case 1:
                bookSection = _a.sent();
                res.status(200);
                res.send(bookSection);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSectionsByBookReference = getBookSectionsByBookReference;
var getBookSectionByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSection;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSectionByBookReference(req.params.space, req.params.bookref, req.params.sectionref)];
            case 1:
                bookSection = _a.sent();
                res.status(200);
                res.send(bookSection);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSectionByBookReference = getBookSectionByBookReference;
var deleteBookSection = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookSection(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookSection = deleteBookSection;
var deleteBookSectionByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookSectionByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookSectionByReference = deleteBookSectionByReference;


/***/ }),

/***/ "./src/modules/book/sectiondetail/helper.ts":
/*!**************************************************!*\
  !*** ./src/modules/book/sectiondetail/helper.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateAllSectionSummaries = exports.addSectionDetailPlaceholder = exports.deleteDetail = exports.getDetailsByBookReferenceShortform = exports.getDetailsByBookReference = exports.updateDetail = exports.createDetail = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/sectiondetail/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var ExtractHelper = __importStar(__webpack_require__(/*! ../extract/helper */ "./src/modules/book/extract/helper.ts"));
var SectionHelper = __importStar(__webpack_require__(/*! ../section/helper */ "./src/modules/book/section/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../../note/helper */ "./src/modules/note/helper.ts"));
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/sectiondetail/prompt.ts");
var helper_1 = __webpack_require__(/*! ../log/helper */ "./src/modules/book/log/helper.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var createDetail = function (space, bookref, sectionref, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book, model, contextList, themesContextList, gptResponseText, content, sectiondetail, shorterSummary;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(payload.type === "summary")) return [3, 2];
                return [4, _createSummary(space, bookref, sectionref)];
            case 1: return [2, _a.sent()];
            case 2: return [4, BookHelper.getBookByReference(space, bookref)];
            case 3:
                book = _a.sent();
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.find({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: "context",
                    })];
            case 4:
                contextList = _a.sent();
                return [4, model.find({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: "themes_context",
                    })];
            case 5:
                themesContextList = _a.sent();
                if (contextList.length === 0) {
                    return [2, {}];
                }
                return [4, Gptutils.predict((0, prompt_1.getSecondarySectionPrompt)(payload.type, book.title, book.primaryAuthor, contextList[0].content, themesContextList.length > 0 ? themesContextList[0].content : undefined))];
            case 6:
                gptResponseText = _a.sent();
                content = _processAiResponse(payload.type, gptResponseText);
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: payload.type,
                    }, {
                        $set: {
                            customTitle: payload.sectionTitle,
                            customDescription: payload.sectionDescription,
                            content: content,
                        },
                    }, { upsert: true })];
            case 7:
                sectiondetail = _a.sent();
                if (!(payload.type === "themes")) return [3, 10];
                return [4, _generateShorterThemesSummaryForContext(book.title, book.primaryAuthor, gptResponseText)];
            case 8:
                shorterSummary = _a.sent();
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: "themes_context",
                    }, {
                        $set: {
                            content: shorterSummary,
                        },
                    }, { upsert: true })];
            case 9:
                _a.sent();
                _a.label = 10;
            case 10: return [2, sectiondetail];
        }
    });
}); };
exports.createDetail = createDetail;
var _createSummary = function (space, bookref, sectionref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, notes, notesList, extracts, section, gptResponseText, content, model, sectiondetail, shorterSummary;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 2:
                notes = _a.sent();
                notesList = [];
                notes.forEach(function (item) { return notesList.push(item.content); });
                return [4, ExtractHelper.getExtractChunksByBookReference(space, bookref)];
            case 3:
                extracts = _a.sent();
                extracts.forEach(function (item) { return notesList.push(item.summary); });
                return [4, SectionHelper.getBookSectionByBookReference(space, bookref, sectionref)];
            case 4:
                section = _a.sent();
                if (!section) {
                    return [2, null];
                }
                return [4, Gptutils.predict((0, prompt_1.getSummarySectionPrompt)(book.title, book.primaryAuthor, section.title, section.description))];
            case 5:
                gptResponseText = _a.sent();
                content = _processAiResponse("summary", gptResponseText);
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: "summary",
                    }, {
                        $set: {
                            content: content,
                        },
                    }, { upsert: true })];
            case 6:
                sectiondetail = _a.sent();
                return [4, _generateShorterSummaryForContext(book.title, book.primaryAuthor, gptResponseText)];
            case 7:
                shorterSummary = _a.sent();
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: "context",
                    }, {
                        $set: {
                            content: shorterSummary,
                        },
                    }, { upsert: true })];
            case 8:
                _a.sent();
                return [2, sectiondetail];
        }
    });
}); };
var _generateShorterSummaryForContext = function (bookName, authorName, content) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponseText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getShortenContentPrompt)(bookName, authorName, content))];
            case 1:
                gptResponseText = _a.sent();
                return [2, gptResponseText];
        }
    });
}); };
var _generateShorterThemesSummaryForContext = function (bookName, authorName, content) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponseText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getShortenThemesPrompt)(bookName, authorName, content))];
            case 1:
                gptResponseText = _a.sent();
                return [2, gptResponseText];
        }
    });
}); };
var _processAiResponse = function (type, text) {
    var htmlString = "";
    var data = text;
    console.log("****", data);
    switch (type) {
        case "summary":
        case "themes":
        case "alternate_takes":
        case "purpose":
            data = JSON.parse(text);
            break;
        default:
            break;
    }
    switch (type) {
        case "summary":
            data.forEach(function (section) {
                htmlString += "<b>".concat(section.title, "</b>");
                htmlString += section.content;
            });
            break;
        case "themes":
            data.forEach(function (section) {
                htmlString += "<b>".concat(section.themeTitle, "</b>");
                htmlString += section.content;
            });
            break;
        case "alternate_takes":
            data.forEach(function (section) {
                htmlString += "<b>".concat(section.author, "</b> in <i>").concat(section.book, "</i>");
                htmlString += section.content;
            });
            break;
        case "purpose":
            data.forEach(function (section) {
                htmlString += "(<i>".concat(section.section, "</i>) <b>").concat(section.purpose, "</b>");
                htmlString += section.analysis;
            });
            break;
        default:
            htmlString = data;
            break;
    }
    return htmlString;
};
var updateDetail = function (space, id, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                response = null;
                return [4, model.findByIdAndUpdate(id, data, {})];
            case 1:
                response = _a.sent();
                return [2, response];
        }
    });
}); };
exports.updateDetail = updateDetail;
var getDetailsByBookReference = function (space, bookref, sectionref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.find({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: { $nin: ["context", "themes_context"] },
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getDetailsByBookReference = getDetailsByBookReference;
var getDetailsByBookReferenceShortform = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.find({ bookref: bookref, type: "summary" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getDetailsByBookReferenceShortform = getDetailsByBookReferenceShortform;
var deleteDetail = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { sectiondetail: _id }];
        }
    });
}); };
exports.deleteDetail = deleteDetail;
var addSectionDetailPlaceholder = function (space, bookref, sectionref, sectiontype) { return __awaiter(void 0, void 0, void 0, function () {
    var model, sectiondetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sectionDetailCollection, model_1.sectionDetailSchema);
                return [4, model.updateOne({
                        bookref: bookref,
                        sectionref: sectionref,
                        type: sectiontype,
                    }, {
                        $set: {
                            content: "",
                        },
                    }, { upsert: true })];
            case 1:
                sectiondetail = _a.sent();
                return [2];
        }
    });
}); };
exports.addSectionDetailPlaceholder = addSectionDetailPlaceholder;
var generateAllSectionSummaries = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var sections, i, i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, SectionHelper.getBookSectionsByBookReference(space, bookref)];
            case 1:
                sections = _a.sent();
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < sections.length)) return [3, 6];
                return [4, (0, helper_1.startGenerating)(space, bookref, sections[i].reference, "summary")];
            case 3:
                _a.sent();
                return [4, (0, exports.addSectionDetailPlaceholder)(space, bookref, sections[i].reference, "summary")];
            case 4:
                _a.sent();
                _a.label = 5;
            case 5:
                i++;
                return [3, 2];
            case 6:
                i = 0;
                _a.label = 7;
            case 7:
                if (!(i < sections.length)) return [3, 11];
                return [4, _createSummary(space, bookref, sections[i].reference)];
            case 8:
                _a.sent();
                return [4, (0, helper_1.finishGenerating)(space, bookref, sections[i].reference, "summary")];
            case 9:
                _a.sent();
                _a.label = 10;
            case 10:
                i++;
                return [3, 7];
            case 11: return [2];
        }
    });
}); };
exports.generateAllSectionSummaries = generateAllSectionSummaries;


/***/ }),

/***/ "./src/modules/book/sectiondetail/model.ts":
/*!*************************************************!*\
  !*** ./src/modules/book/sectiondetail/model.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sectionDetailCollection = exports.sectionDetailSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var sectionDetailSchema = new Schema({
    customTitle: { type: String },
    customDescription: { type: String },
    type: { type: String },
    conceptref: { type: String },
    bookref: { type: String },
    content: { type: JSON },
}, { timestamps: true, strict: false, strictQuery: false });
exports.sectionDetailSchema = sectionDetailSchema;
var sectionDetailCollection = "book.sectiondetail";
exports.sectionDetailCollection = sectionDetailCollection;


/***/ }),

/***/ "./src/modules/book/sectiondetail/prompt.ts":
/*!**************************************************!*\
  !*** ./src/modules/book/sectiondetail/prompt.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getShortenThemesPrompt = exports.getShortenContentPrompt = exports.getSummarySectionPrompt = exports.getSecondarySectionPrompt = void 0;
var gptutils_1 = __webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getSecondarySectionPrompt = function (type, bookName, authorName, content, themesContext) {
    switch (type) {
        case "context":
            return (0, gptutils_1.getPrompt)(_SHORTEN_CONTENT_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
            });
        case "themes":
            return (0, gptutils_1.getPrompt)(_THEMES_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
            });
        case "alternate_takes":
            return (0, gptutils_1.getPrompt)(_ALTERNATE_TAKES_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: themesContext || content,
            });
        case "purpose":
            return (0, gptutils_1.getPrompt)(_PURPOSE_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: themesContext || content,
            });
        default:
            break;
    }
};
exports.getSecondarySectionPrompt = getSecondarySectionPrompt;
var getSummarySectionPrompt = function (bookName, authorName, sectionName, sectionSummary) {
    return (0, gptutils_1.getPrompt)(_SUMMARY_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        sectionName: sectionName,
        sectionSummary: sectionSummary,
    });
};
exports.getSummarySectionPrompt = getSummarySectionPrompt;
var getShortenContentPrompt = function (bookName, authorName, content) {
    return (0, gptutils_1.getPrompt)(_SHORTEN_CONTENT_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        content: content,
    });
};
exports.getShortenContentPrompt = getShortenContentPrompt;
var getShortenThemesPrompt = function (bookName, authorName, content) {
    return (0, gptutils_1.getPrompt)(_SHORTEN_THEMES_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        content: content,
    });
};
exports.getShortenThemesPrompt = getShortenThemesPrompt;
var _SHORTEN_CONTENT_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a concise summary of a particular section or chapter from a specific book.",
                "Your summary should focus on the key events, explanations, or discussions presented in that section or chapter.",
                "Include references to the book name and author name to provide context for later prompts.",
                "Avoid unnecessary details and focus on the most important content relevant to the section being summarized.",
                "When in doubt, it is safer to retain content rather than remove it. Ensure that the key points from the section or chapter are preserved.",
            ],
        },
        {
            role: "user",
            content: [
                "Summarize the following section or chapter into a shorter, concise version suitable for further analysis or interpretation. Include references to the book name {{bookName}} and author {{authorName}} in the summary:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _SHORTEN_THEMES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a concise summary of the detailed exploration of a theme from a specific book.",
                "Your summary should capture the essence of the central theme and its sub-themes, while being brief and clear.",
                "Include references to the book name and author name to provide context for later prompts.",
                "Avoid unnecessary details and focus on the key points.",
                "When in doubt, it is safer to retain content rather than remove it. Ensure that important aspects of the theme and sub-themes are preserved.",
            ],
        },
        {
            role: "user",
            content: [
                "Summarize the following content into a shorter, concise version suitable for further analysis or interpretation. Include references to the book name {{bookName}} and author {{authorName}} in the summary:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _SUMMARY_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI assistant and an expert book reader.",
                "Your task is to expand the provided section summary into a highly detailed explanation, ensuring that no details are omitted.",
                "Stick strictly to explaining the content of the book without providing any analysis or interpretation.",
                "Focus entirely on providing a more in-depth explanation of the section, ensuring that every event, plot development, and character action is covered comprehensively.",
                "Do not add any extra information outside of what is already in the book.",
                "Ensure that the expanded explanation closely follows the events as they unfold in the book and mirrors the original section, but in a much more detailed manner.",
                "Do not present the explanation in a commentary style or provide any opinions. The content should read as a detailed and factual recounting of the events, actions, and details without subjective language or meta-commentary.",
                "Use <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate. Do not use <b> (bold) in the content field, as the title is already provided in the title field.",
                'Do not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation. [{"title": "Subtitle for the first subsection", "content": "Set of paragraphs in HTML with <p> and <i> tags"}, {"title": "Subtitle for the next subsection", "content": "Set of paragraphs in HTML with <p> and <i> tags"}, {...}]',
                "Make sure to create logical subsections based on the content, and do not merge all the details into a single section.",
                "Avoid using any commentary tone or explanatory text that goes beyond the factual content of the book.",
                "Ensure that all JSON keys and strings are enclosed in double quotes to comply with RFC8259 JSON formatting.",
            ],
        },
        {
            role: "user",
            content: [
                "Expand the section summary for {{sectionName}} from the book {{bookName}} by {{authorName}}.",
                "Here is the summary: {{sectionSummary}}.",
                "Provide a detailed explanation of this section using <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate.",
                "Break the expanded content into logical subsections, using appropriate titles for each.",
                "Do not include any explanations, only provide a RFC8259 compliant JSON response, ensuring all keys and strings are enclosed in double quotes.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _THEMES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI assistant and an expert book reader.",
                "Your task is to analyze the key themes and ideas in the provided section summary from the book {{bookName}} by {{authorName}}.",
                "Ensure the output includes a list of themes or ideas extracted from the section, with each theme accompanied by an explanation.",
                "The explanation for each theme or idea must be highly detailed and written in paragraph form, describing the theme's significance and how it appears in the section.",
                "For each theme, use <p> for paragraphs, <i> for specific words or phrases that require emphasis, and <b> only when necessary within the explanation.",
                "Use <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate.",
                "Do not provide any extra commentary or subjective analysis beyond the book's content.",
                "The output must be a valid JSON structure with all strings, property names, and values properly enclosed in double quotes.",
                "Structure the output as follows: [{'themeTitle': 'Title of the theme or idea', 'content': 'Set of paragraphs in HTML with <p>, <i>, <b>, and bullet points as necessary.'}, {'themeTitle': 'Next theme or idea', 'content': 'Set of paragraphs in HTML with <p>, <i>, <b>, and bullet points.'}, {...}]",
                "Each theme should be logically titled based on the content and avoid redundant information.",
                "Ensure that the JSON structure is correctly formatted with no extra spaces or errors in the syntax.",
            ],
        },
        {
            role: "user",
            content: [
                "Analyze the key themes and ideas from the book {{bookName}} by {{authorName}} for the below section summary {{content}}.",
                "Ensure that the output is structured in a JSON format with a list of themes.",
                "For each theme, provide a title in the 'themeTitle' field and a detailed explanation in the 'content' field, formatted with <p>, <i>, <b>, and bullet points where appropriate.",
                "Ensure all property names and values are double-quoted, and the output is fully JSON compliant with correct formatting.",
                "Use <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate. Do not add unnecessary commentary or explanations.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _ALTERNATE_TAKES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI assistant with expertise in literary analysis.",
                "Your task is to provide alternate perspectives on the key themes and ideas presented in the book {{bookName}} by {{authorName}} based on the summary of key themes provided.",
                "The output should be a JSON array containing objects for each alternate perspective from different authors.",
                "Each object should include the following fields: 'author', 'book', and 'content'.",
                "The 'author' field should contain the name of the author providing the perspective.",
                "The 'book' field should contain the title of the book where the perspective is found.",
                "The 'content' field should contain a set of paragraphs in HTML format, describing the alternate perspectives on the themes. Use <p> for paragraphs, <i> for emphasis, <b> only when necessary, and bullet points if applicable.",
                "Ensure the content is detailed and provides a thorough examination of the themes from the perspective of each cited author.",
                "The JSON structure should be correctly formatted, with all strings, property names, and values enclosed in double quotes.",
                "Avoid including any unnecessary commentary or subjective opinions beyond what is provided in the alternate perspectives.",
                "The output should be a valid JSON structure with no extra spaces or syntax errors.",
            ],
        },
        {
            role: "user",
            content: [
                "Analyze the key themes and ideas from the book {{bookName}} by {{authorName}} based on the following summary of themes: {{content}}.",
                "Provide alternate perspectives on these themes by referencing other authors and their works.",
                "Structure the output in a JSON format with an array of objects. Each object should include:",
                "1. 'author': The name of the author offering the alternate perspective.",
                "2. 'book': The title of the book where the perspective is discussed.",
                "3. 'content': A set of detailed paragraphs in HTML format, discussing the alternate perspectives. Use <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate.",
                "Ensure that all HTML formatting is limited to <b>, <i>, and bullet points to maintain readability.",
                "Make sure the JSON output is correctly formatted with double-quoted strings, proper property names, and valid syntax.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _PURPOSE_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI assistant with expertise in literary analysis.",
                "Your task is to provide a deeper analysis of the purpose of the themes and ideas presented in the book {{bookName}} by {{authorName}} based on the summary of key themes provided.",
                "Consider how the themes fit into the larger narrative of the book, including their role in revealing critical information and their contribution to the overall structure of the book.",
                "The output should be a JSON array containing objects that offer detailed analysis of how the themes function within the book's narrative.",
                "Each object should include the following fields: 'section', 'purpose', and 'analysis'.",
                "The 'section' field should specify the section or chapter being analyzed.",
                "The 'purpose' field should describe the thematic purpose and its relevance to the book's larger narrative.",
                "The 'analysis' field should contain a set of paragraphs in HTML format, offering a thorough examination of the themes' roles and their impact on the book's structure. Use <p> for paragraphs, <i> for emphasis, <b> only when necessary, and bullet points if applicable.",
                "Ensure the content is detailed and explores how the themes contribute to the narrative's development.",
                "The JSON structure should be correctly formatted, with all strings, property names, and values enclosed in double quotes.",
                "Avoid including any unnecessary commentary or subjective opinions beyond what is provided in the thematic analysis.",
                "The output should be a valid JSON structure with no extra spaces or syntax errors.",
            ],
        },
        {
            role: "user",
            content: [
                "Analyze the purpose of the key themes and ideas from the book {{bookName}} by {{authorName}} based on the following summary of themes: {{content}}.",
                "Consider how these themes fit into the larger narrative of the book. Evaluate whether they reveal critical information or contribute to the overall structure of the book.",
                "Structure the output in a JSON format with an array of objects. Each object should include:",
                "1. 'section': The specific section or chapter being analyzed.",
                "2. 'purpose': A description of the thematic purpose and its relevance to the book's larger narrative.",
                "3. 'analysis': A set of detailed paragraphs in HTML format, discussing the role of the themes and their impact on the narrative. Use <p> for paragraphs, <i> for emphasis, <b> when necessary, and bullet points where appropriate.",
                "Ensure that all HTML formatting is limited to <b>, <i>, and bullet points to maintain readability.",
                "Make sure the JSON output is correctly formatted with double-quoted strings, proper property names, and valid syntax.",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/sectiondetail/route.ts":
/*!*************************************************!*\
  !*** ./src/modules/book/sectiondetail/route.ts ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/sectiondetail/service.ts");
module.exports = function (router) {
    router.put("/book/section-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateDetail));
    router.post("/book/section-detail/:space/:bookref/:sectionref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createDetail));
    router.get("/book/section-detail/:space/:bookref/:sectionref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getDetailsByBookReference));
    router.delete("/book/section-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteDetail));
};


/***/ }),

/***/ "./src/modules/book/sectiondetail/service.ts":
/*!***************************************************!*\
  !*** ./src/modules/book/sectiondetail/service.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteDetail = exports.getDetailsByBookReference = exports.updateDetail = exports.createDetail = void 0;
var helper_1 = __webpack_require__(/*! ../log/helper */ "./src/modules/book/log/helper.ts");
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/sectiondetail/helper.ts"));
var createDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, (0, helper_1.startGenerating)(req.params.space, req.params.bookref, req.params.sectionref, req.body.type)];
            case 1:
                _a.sent();
                return [4, Helper.addSectionDetailPlaceholder(req.params.space, req.params.bookref, req.params.sectionref, req.body.type)];
            case 2:
                _a.sent();
                res.status(202).send({
                    message: "Section generation started. You will be notified upon completion.",
                });
                return [4, Helper.createDetail(req.params.space, req.params.bookref, req.params.sectionref, req.body, userId)];
            case 3:
                _a.sent();
                return [4, (0, helper_1.finishGenerating)(req.params.space, req.params.bookref, req.params.sectionref, req.body.type)];
            case 4:
                _a.sent();
                return [2];
        }
    });
}); };
exports.createDetail = createDetail;
var updateDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, sectiondetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateDetail(req.params.space, req.params.id, req.body, userId)];
            case 1:
                sectiondetail = _a.sent();
                res.status(200);
                res.send(sectiondetail);
                res.end();
                return [2];
        }
    });
}); };
exports.updateDetail = updateDetail;
var getDetailsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, sectiondetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getDetailsByBookReference(req.params.space, req.params.bookref, req.params.sectionref)];
            case 1:
                sectiondetail = _a.sent();
                res.status(200);
                res.send(sectiondetail);
                res.end();
                return [2];
        }
    });
}); };
exports.getDetailsByBookReference = getDetailsByBookReference;
var deleteDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteDetail(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteDetail = deleteDetail;


/***/ }),

/***/ "./src/modules/book/service.ts":
/*!*************************************!*\
  !*** ./src/modules/book/service.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookByReference = exports.deleteBook = exports.searchBook = exports.getBookByReference = exports.getBookById = exports.getLibraries = exports.getBook = exports.getCoverImages = exports.updateBook = exports.createBook = exports.validateBook = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/helper.ts"));
var validateBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.validateBook(req.body, userId)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.validateBook = validateBook;
var createBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBook(req.params.space, req.body, userId)];
            case 1:
                book = _a.sent();
                res.status(200).send(book);
                return [2];
        }
    });
}); };
exports.createBook = createBook;
var updateBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBook(req.params.space, req.params.id, req.body, userId)];
            case 1:
                book = _a.sent();
                res.status(200);
                res.send(book);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBook = updateBook;
var getCoverImages = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("**");
                userId = req.user.user_id;
                return [4, Helper.getCoverImages(req.params.space, req.params.reference, userId)];
            case 1:
                data = _a.sent();
                res.status(200).send(data);
                return [2];
        }
    });
}); };
exports.getCoverImages = getCoverImages;
var getBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBook(req.params.space)];
            case 1:
                bookList = _a.sent();
                res.status(200);
                res.send(bookList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBook = getBook;
var getLibraries = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getLibraries(req.params.space)];
            case 1:
                bookList = _a.sent();
                res.status(200);
                res.send(bookList);
                res.end();
                return [2];
        }
    });
}); };
exports.getLibraries = getLibraries;
var getBookById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookById(req.params.space, req.params.id)];
            case 1:
                book = _a.sent();
                res.status(200);
                res.send(book);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookById = getBookById;
var getBookByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookByReference(req.params.space, req.params.reference)];
            case 1:
                book = _a.sent();
                res.status(200);
                res.send(book);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookByReference = getBookByReference;
var searchBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, book;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.searchBook(req.params.space, req.body.text, req.body.textList, req.body.searchPref)];
            case 1:
                book = _a.sent();
                res.status(200);
                res.send(book);
                res.end();
                return [2];
        }
    });
}); };
exports.searchBook = searchBook;
var deleteBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBook(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBook = deleteBook;
var deleteBookByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookByReference = deleteBookByReference;


/***/ }),

/***/ "./src/modules/book/shortform/helper.ts":
/*!**********************************************!*\
  !*** ./src/modules/book/shortform/helper.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteShortform = exports.getShortformsByBookReference = exports.updateShortform = exports.createShortform = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/shortform/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var ConceptHelper = __importStar(__webpack_require__(/*! ../concept/helper */ "./src/modules/book/concept/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../../note/helper */ "./src/modules/note/helper.ts"));
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/shortform/prompt.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var createShortform = function (space, bookref, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book, notes, notesList, concepts, keyInsightsList, gptResponseText, gptResponse, model, shortform;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 2:
                notes = _a.sent();
                notesList = [];
                notes.forEach(function (item) { return notesList.push(item.content); });
                return [4, ConceptHelper.getBookConceptsByBookReference(space, bookref)];
            case 3:
                concepts = _a.sent();
                keyInsightsList = [];
                concepts.forEach(function (item) {
                    keyInsightsList.push(item.name);
                });
                return [4, Gptutils.predict((0, prompt_1.getBookShortFormPrompt)(payload === null || payload === void 0 ? void 0 : payload.type, book.title, book.primaryAuthor, notesList, keyInsightsList))];
            case 4:
                gptResponseText = _a.sent();
                console.log(gptResponseText);
                gptResponse = JSON.parse(gptResponseText);
                model = getCollection(space, model_1.shortformCollection, model_1.shortformSchema);
                return [4, model.create({
                        type: payload.type,
                        customTitle: payload.sectionTitle,
                        customDescription: payload.sectionDescription,
                        bookref: bookref,
                        content: gptResponse,
                    })];
            case 5:
                shortform = _a.sent();
                return [2, shortform];
        }
    });
}); };
exports.createShortform = createShortform;
var updateShortform = function (space, reload, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, shortformResponse, shortform;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.shortformCollection, model_1.shortformSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign({}, data))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [4, model.find({
                    reference: response.reference,
                })];
            case 5:
                shortformResponse = _a.sent();
                shortform = null;
                if (shortformResponse.length > 0) {
                    shortform = shortformResponse[0];
                }
                return [2, {
                        shortform: shortform,
                    }];
        }
    });
}); };
exports.updateShortform = updateShortform;
var getShortformsByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.shortformCollection, model_1.shortformSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getShortformsByBookReference = getShortformsByBookReference;
var deleteShortform = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.shortformCollection, model_1.shortformSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { shortform: _id }];
        }
    });
}); };
exports.deleteShortform = deleteShortform;


/***/ }),

/***/ "./src/modules/book/shortform/model.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/shortform/model.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shortformCollection = exports.shortformSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var shortformSchema = new Schema({
    customTitle: { type: String },
    customDescription: { type: String },
    type: { type: String },
    bookref: { type: String },
    content: { type: JSON },
}, { timestamps: true, strict: false, strictQuery: false });
exports.shortformSchema = shortformSchema;
var shortformCollection = "book.shortform";
exports.shortformCollection = shortformCollection;


/***/ }),

/***/ "./src/modules/book/shortform/prompt.ts":
/*!**********************************************!*\
  !*** ./src/modules/book/shortform/prompt.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBookShortFormPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getBookShortFormPrompt = function (type, bookName, authorName, notesList, keyInsightsList) {
    var keyInsights = keyInsightsList.join(", ");
    var notes = notesList.join(", ");
    var prompt = (0, lodash_1.cloneDeep)(_SHORTFORM_PROMPT);
    for (var i = 0; i < prompt.messages.length; i++) {
        prompt.messages[i].content = Handlebars.compile(prompt.messages[i].content)({
            bookName: bookName,
            authorName: authorName,
            notes: notes,
            keyInsights: keyInsights,
        });
    }
    console.log(prompt);
    return prompt;
};
exports.getBookShortFormPrompt = getBookShortFormPrompt;
var _SHORTFORM_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: 'You are an AI assistant tasked with creating a comprehensive analysis of a book in JSON format. The output should be detailed, covering a word count of 2500-3000 words. The structure of the JSON should be as follows: \n\n{\n  "bookOverview": {\n    "overview": "string",\n    "authorInfo": "string"\n  },\n  "keyInsights": [\n    {"title": "string", "description": "html"},\n    {"title": "string", "description": "html"},\n    ...\n  ]\n}.\n\nInstructions:\n\n1. For the "bookOverview":\n- Provide a detailed summary of the book\'s main premise and significance (4-5 sentences).\n- Mention the author\'s background and expertise relevant to the book\'s topic (2-3 sentences).\n\n2. For "keyInsights":\n- Each key insight should have a title and a detailed description.\n- The description must be in HTML format, with each paragraph enclosed within <p> tags. Only <p>, <b>, and <i> tags are allowed.\n- The description should include an in-depth explanation of the insight (4-5 paragraphs), practical examples or applications (2-3 paragraphs), and any relevant statistics or research mentioned in the book.\n\nGuidelines:\n- Ensure that the total word count of the output is between 2500 and 3000 words.\n- Ensure that text is paraphrased to avoid direct quotes from the book.\n- Focus on presenting content in a structured and detailed manner with thorough explanations and examples.',
        },
        {
            role: "assistant",
            content: "Ensure that each key insight is elaborated with multiple paragraphs and detailed explanations, with each paragraph enclosed in <p> tags. For each key insight in {{keyInsights}}, provide a comprehensive analysis that includes examples, applications, and supporting evidence to meet the 2500-3000 word range.",
        },
        {
            role: "user",
            content: "The book is '{{bookName}}' by {{authorName}}. The key insights are: {{keyInsights}}.",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/shortform/route.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/shortform/route.ts ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/shortform/service.ts");
module.exports = function (router) {
    router.put("/book/shortform/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateShortform));
    router.post("/book/shortform/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createShortform));
    router.get("/book/shortform/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getShortformsByBookReference));
    router.delete("/book/shortform/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteShortform));
};


/***/ }),

/***/ "./src/modules/book/shortform/service.ts":
/*!***********************************************!*\
  !*** ./src/modules/book/shortform/service.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteShortform = exports.getShortformsByBookReference = exports.updateShortform = exports.createShortform = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/shortform/helper.ts"));
var createShortform = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, shortform;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createShortform(req.params.space, req.params.bookref, req.body, userId)];
            case 1:
                shortform = _a.sent();
                res.status(200);
                res.send(shortform);
                res.end();
                return [2];
        }
    });
}); };
exports.createShortform = createShortform;
var updateShortform = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, shortform;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateShortform(req.params.space, req.query.reload, req.body, userId)];
            case 1:
                shortform = _a.sent();
                res.status(200);
                res.send(shortform);
                res.end();
                return [2];
        }
    });
}); };
exports.updateShortform = updateShortform;
var getShortformsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, shortform;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getShortformsByBookReference(req.params.space, req.params.bookref)];
            case 1:
                shortform = _a.sent();
                res.status(200);
                res.send(shortform);
                res.end();
                return [2];
        }
    });
}); };
exports.getShortformsByBookReference = getShortformsByBookReference;
var deleteShortform = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteShortform(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteShortform = deleteShortform;


/***/ }),

/***/ "./src/modules/book/subtheme/helper.ts":
/*!*********************************************!*\
  !*** ./src/modules/book/subtheme/helper.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addSubthemes = exports.deleteBookSubthemeByReference = exports.deleteBookSubtheme = exports.getBookSubthemeById = exports.getBookSubthemeByBookReference = exports.getBookSubthemesByThemeReference = exports.getBookSubthemesByBookReference = exports.getBookSubtheme = exports.updateBookSubtheme = exports.createBookSubtheme = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/subtheme/model.ts");
var service_1 = __webpack_require__(/*! ../../sequence/service */ "./src/modules/sequence/service.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var createBookSubtheme = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var model, response;
    var bookSubtheme = _b.bookSubtheme, meta = _b.meta;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                response = null;
                return [4, model.create(__assign({}, bookSubtheme))];
            case 1:
                response = _c.sent();
                return [2, response];
        }
    });
}); };
exports.createBookSubtheme = createBookSubtheme;
var updateBookSubtheme = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, bookSubthemeResponse, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign({}, data))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [4, model.find({
                    reference: response.reference,
                })];
            case 5:
                bookSubthemeResponse = _a.sent();
                bookSubtheme = null;
                if (bookSubthemeResponse.length > 0) {
                    bookSubtheme = bookSubthemeResponse[0];
                }
                return [2, {
                        bookSubtheme: bookSubtheme,
                    }];
        }
    });
}); };
exports.updateBookSubtheme = updateBookSubtheme;
var _ai_populate_for_subtheme = function (space, bookref, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log(bookref, reference);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate-subtheme/").concat(bookref, "/").concat(reference), {})];
            case 2:
                _a.sent();
                console.log("populated keywords for " + bookref + ", " + reference);
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getBookSubtheme = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBookSubtheme = getBookSubtheme;
var getBookSubthemesByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookSubthemesByBookReference = getBookSubthemesByBookReference;
var getBookSubthemesByThemeReference = function (space, bookref, conceptref, themeref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                console.log(bookref, conceptref, themeref);
                return [4, model.find({ bookref: bookref, conceptref: conceptref, themeref: themeref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookSubthemesByThemeReference = getBookSubthemesByThemeReference;
var getBookSubthemeByBookReference = function (space, bookref, conceptref, subthemeref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.find({
                        bookref: bookref,
                        conceptref: conceptref,
                        reference: subthemeref,
                    })];
            case 1:
                response = _a.sent();
                if (response.length > 0) {
                    return [2, response[0]];
                }
                return [2, null];
        }
    });
}); };
exports.getBookSubthemeByBookReference = getBookSubthemeByBookReference;
var getBookSubthemeById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookSubthemeById = getBookSubthemeById;
var deleteBookSubtheme = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { bookSubtheme: _id }];
        }
    });
}); };
exports.deleteBookSubtheme = deleteBookSubtheme;
var deleteBookSubthemeByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { bookSubtheme: reference }];
        }
    });
}); };
exports.deleteBookSubthemeByReference = deleteBookSubthemeByReference;
var addSubthemes = function (space, bookref, conceptref, subthemes) { return __awaiter(void 0, void 0, void 0, function () {
    var model, _payload, i, _a, _b, _c;
    var _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                model = getCollection(space, model_1.bookSubthemeCollection, model_1.bookSubthemeSchema);
                _payload = [];
                i = 0;
                _g.label = 1;
            case 1:
                if (!(i < subthemes.length)) return [3, 4];
                _b = (_a = _payload).push;
                _d = {};
                _e = {
                    filter: {
                        bookref: bookref,
                        conceptref: conceptref,
                        title: subthemes[i].title,
                    }
                };
                _c = [__assign({}, subthemes[i])];
                _f = {};
                return [4, (0, service_1.nextval)("subthemeId", conceptref, space)];
            case 2:
                _b.apply(_a, [(_d.updateOne = (_e.update = __assign.apply(void 0, _c.concat([(_f.reference = _g.sent(), _f)])),
                        _e.upsert = true,
                        _e),
                        _d)]);
                _g.label = 3;
            case 3:
                i++;
                return [3, 1];
            case 4: return [4, model.bulkWrite(_payload)];
            case 5: return [2, _g.sent()];
        }
    });
}); };
exports.addSubthemes = addSubthemes;


/***/ }),

/***/ "./src/modules/book/subtheme/model.ts":
/*!********************************************!*\
  !*** ./src/modules/book/subtheme/model.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookSubthemeCollection = exports.bookSubthemeSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookSubthemeSchema = new Schema({
    name: { type: String },
    description: { type: String },
    reference: { type: String },
    bookref: { type: String },
    conceptref: { type: String },
    themeref: { type: String },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookSubthemeSchema = bookSubthemeSchema;
var bookSubthemeCollection = "book.subtheme";
exports.bookSubthemeCollection = bookSubthemeCollection;


/***/ }),

/***/ "./src/modules/book/subtheme/route.ts":
/*!********************************************!*\
  !*** ./src/modules/book/subtheme/route.ts ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/subtheme/service.ts");
module.exports = function (router) {
    router.put("/book/subtheme/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBookSubtheme));
    router.post("/book/subtheme/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBookSubtheme));
    router.get("/book/subtheme/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSubthemeById));
    router.get("/book/subtheme/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSubthemesByBookReference));
    router.get("/book/subtheme/:space/:bookref/:conceptref/:subthemeref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookSubthemeByBookReference));
    router.delete("/book/subtheme/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookSubtheme));
    router.delete("/book/subtheme/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookSubthemeByReference));
};


/***/ }),

/***/ "./src/modules/book/subtheme/service.ts":
/*!**********************************************!*\
  !*** ./src/modules/book/subtheme/service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookSubthemeByReference = exports.deleteBookSubtheme = exports.getBookSubthemeByBookReference = exports.getBookSubthemesByBookReference = exports.getBookSubthemeById = exports.getBookSubtheme = exports.updateBookSubtheme = exports.createBookSubtheme = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/subtheme/helper.ts"));
var createBookSubtheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBookSubtheme(req.params.space, req.body, userId)];
            case 1:
                bookSubtheme = _a.sent();
                res.status(200);
                res.send(bookSubtheme);
                res.end();
                return [2];
        }
    });
}); };
exports.createBookSubtheme = createBookSubtheme;
var updateBookSubtheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBookSubtheme(req.params.space, req.body, userId)];
            case 1:
                bookSubtheme = _a.sent();
                res.status(200);
                res.send(bookSubtheme);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBookSubtheme = updateBookSubtheme;
var getBookSubtheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubthemeList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSubtheme(req.params.space)];
            case 1:
                bookSubthemeList = _a.sent();
                res.status(200);
                res.send(bookSubthemeList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSubtheme = getBookSubtheme;
var getBookSubthemeById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSubthemeById(req.params.space, req.params.id)];
            case 1:
                bookSubtheme = _a.sent();
                res.status(200);
                res.send(bookSubtheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSubthemeById = getBookSubthemeById;
var getBookSubthemesByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSubthemesByBookReference(req.params.space, req.params.bookref)];
            case 1:
                bookSubtheme = _a.sent();
                res.status(200);
                res.send(bookSubtheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSubthemesByBookReference = getBookSubthemesByBookReference;
var getBookSubthemeByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookSubtheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookSubthemeByBookReference(req.params.space, req.params.bookref, req.params.conceptref, req.params.subthemeref)];
            case 1:
                bookSubtheme = _a.sent();
                res.status(200);
                res.send(bookSubtheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookSubthemeByBookReference = getBookSubthemeByBookReference;
var deleteBookSubtheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookSubtheme(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookSubtheme = deleteBookSubtheme;
var deleteBookSubthemeByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookSubthemeByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookSubthemeByReference = deleteBookSubthemeByReference;


/***/ }),

/***/ "./src/modules/book/theme/helper.ts":
/*!******************************************!*\
  !*** ./src/modules/book/theme/helper.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addThemes = exports.deleteBookThemeByReference = exports.deleteBookTheme = exports.getBookThemeById = exports.getBookThemeByBookReference = exports.getBookThemesByConceptReference = exports.getBookThemesByBookReference = exports.getBookTheme = exports.updateBookTheme = exports.createBookTheme = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/theme/model.ts");
var service_1 = __webpack_require__(/*! ../../sequence/service */ "./src/modules/sequence/service.ts");
var model_2 = __webpack_require__(/*! ../subtheme/model */ "./src/modules/book/subtheme/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var createBookTheme = function (space_1, _a, userId_1) { return __awaiter(void 0, [space_1, _a, userId_1], void 0, function (space, _b, userId) {
    var model, response;
    var bookTheme = _b.bookTheme, meta = _b.meta;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                response = null;
                return [4, model.create(__assign({}, bookTheme))];
            case 1:
                response = _c.sent();
                return [2, response];
        }
    });
}); };
exports.createBookTheme = createBookTheme;
var updateBookTheme = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, bookThemeResponse, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, {
                        new: true,
                        upsert: true,
                    })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign({}, data))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [4, model.find({
                    reference: response.reference,
                })];
            case 5:
                bookThemeResponse = _a.sent();
                bookTheme = null;
                if (bookThemeResponse.length > 0) {
                    bookTheme = bookThemeResponse[0];
                }
                return [2, {
                        bookTheme: bookTheme,
                    }];
        }
    });
}); };
exports.updateBookTheme = updateBookTheme;
var _ai_populate_for_theme = function (space, bookref, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log(bookref, reference);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate-theme/").concat(bookref, "/").concat(reference), {})];
            case 2:
                _a.sent();
                console.log("populated keywords for " + bookref + ", " + reference);
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getBookTheme = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getBookTheme = getBookTheme;
var getBookThemesByBookReference = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.find({ bookref: bookref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookThemesByBookReference = getBookThemesByBookReference;
var getBookThemesByConceptReference = function (space, bookref, conceptref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.find({ bookref: bookref, conceptref: conceptref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getBookThemesByConceptReference = getBookThemesByConceptReference;
var getBookThemeByBookReference = function (space, bookref, conceptref, themeref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.find({
                        bookref: bookref,
                        conceptref: conceptref,
                        reference: themeref,
                    })];
            case 1:
                response = _a.sent();
                if (response.length > 0) {
                    return [2, response[0]];
                }
                return [2, null];
        }
    });
}); };
exports.getBookThemeByBookReference = getBookThemeByBookReference;
var getBookThemeById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getBookThemeById = getBookThemeById;
var deleteBookTheme = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { bookTheme: _id }];
        }
    });
}); };
exports.deleteBookTheme = deleteBookTheme;
var deleteBookThemeByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [2, { bookTheme: reference }];
        }
    });
}); };
exports.deleteBookThemeByReference = deleteBookThemeByReference;
var addThemes = function (space, bookref, conceptref, themes) { return __awaiter(void 0, void 0, void 0, function () {
    var model, subThemeModel, _payload, _payloadSubThemes, i, reference, j, _a, _b, _c;
    var _d, _e, _f;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                model = getCollection(space, model_1.bookThemeCollection, model_1.bookThemeSchema);
                subThemeModel = getCollection(space, model_2.bookSubthemeCollection, model_2.bookSubthemeSchema);
                _payload = [];
                _payloadSubThemes = [];
                i = 0;
                _h.label = 1;
            case 1:
                if (!(i < themes.length)) return [3, 7];
                return [4, (0, service_1.nextval)("themeId", conceptref, space)];
            case 2:
                reference = _h.sent();
                _payload.push({
                    updateOne: {
                        filter: {
                            bookref: bookref,
                            conceptref: conceptref,
                            title: themes[i].title,
                        },
                        update: __assign(__assign({}, themes[i]), { reference: reference }),
                        upsert: true,
                    },
                });
                j = 0;
                _h.label = 3;
            case 3:
                if (!(j < ((_g = themes[i].subThemes) === null || _g === void 0 ? void 0 : _g.length))) return [3, 6];
                _b = (_a = _payloadSubThemes).push;
                _d = {};
                _e = {
                    filter: {
                        bookref: bookref,
                        conceptref: conceptref,
                        themeref: reference,
                        title: themes[i].title,
                    }
                };
                _c = [__assign({}, themes[i].subThemes[j])];
                _f = {};
                return [4, (0, service_1.nextval)("subThemeId", "".concat(bookref, "_").concat(conceptref, "_").concat(reference), space)];
            case 4:
                _b.apply(_a, [(_d.updateOne = (_e.update = __assign.apply(void 0, _c.concat([(_f.reference = _h.sent(), _f)])),
                        _e.upsert = true,
                        _e),
                        _d)]);
                _h.label = 5;
            case 5:
                j++;
                return [3, 3];
            case 6:
                i++;
                return [3, 1];
            case 7: return [4, subThemeModel.bulkWrite(_payloadSubThemes)];
            case 8:
                _h.sent();
                return [4, model.bulkWrite(_payload)];
            case 9: return [2, _h.sent()];
        }
    });
}); };
exports.addThemes = addThemes;


/***/ }),

/***/ "./src/modules/book/theme/model.ts":
/*!*****************************************!*\
  !*** ./src/modules/book/theme/model.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bookThemeCollection = exports.bookThemeSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var bookThemeSchema = new Schema({
    name: { type: String },
    description: { type: String },
    reference: { type: String },
    bookref: { type: String },
    conceptref: { type: String },
    subThemes: { type: Array },
}, { timestamps: true, strict: false, strictQuery: false });
exports.bookThemeSchema = bookThemeSchema;
var bookThemeCollection = "book.theme";
exports.bookThemeCollection = bookThemeCollection;


/***/ }),

/***/ "./src/modules/book/theme/route.ts":
/*!*****************************************!*\
  !*** ./src/modules/book/theme/route.ts ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/theme/service.ts");
module.exports = function (router) {
    router.put("/book/theme/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateBookTheme));
    router.post("/book/theme/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createBookTheme));
    router.get("/book/theme/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookThemeById));
    router.get("/book/theme/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookThemesByBookReference));
    router.get("/book/theme/:space/:bookref/:conceptref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookThemesByConceptReference));
    router.get("/book/theme/:space/:bookref/:conceptref/:themeref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getBookThemeByBookReference));
    router.delete("/book/theme/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookTheme));
    router.delete("/book/theme/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteBookThemeByReference));
};


/***/ }),

/***/ "./src/modules/book/theme/service.ts":
/*!*******************************************!*\
  !*** ./src/modules/book/theme/service.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteBookThemeByReference = exports.deleteBookTheme = exports.getBookThemeByBookReference = exports.getBookThemesByConceptReference = exports.getBookThemesByBookReference = exports.getBookThemeById = exports.getBookTheme = exports.updateBookTheme = exports.createBookTheme = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/theme/helper.ts"));
var createBookTheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createBookTheme(req.params.space, req.body, userId)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.createBookTheme = createBookTheme;
var updateBookTheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateBookTheme(req.params.space, req.body, userId)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.updateBookTheme = updateBookTheme;
var getBookTheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookThemeList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookTheme(req.params.space)];
            case 1:
                bookThemeList = _a.sent();
                res.status(200);
                res.send(bookThemeList);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookTheme = getBookTheme;
var getBookThemeById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookThemeById(req.params.space, req.params.id)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookThemeById = getBookThemeById;
var getBookThemesByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookThemesByBookReference(req.params.space, req.params.bookref)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookThemesByBookReference = getBookThemesByBookReference;
var getBookThemesByConceptReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookThemesByConceptReference(req.params.space, req.params.bookref, req.params.conceptref)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookThemesByConceptReference = getBookThemesByConceptReference;
var getBookThemeByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, bookTheme;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getBookThemeByBookReference(req.params.space, req.params.bookref, req.params.conceptref, req.params.themeref)];
            case 1:
                bookTheme = _a.sent();
                res.status(200);
                res.send(bookTheme);
                res.end();
                return [2];
        }
    });
}); };
exports.getBookThemeByBookReference = getBookThemeByBookReference;
var deleteBookTheme = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookTheme(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookTheme = deleteBookTheme;
var deleteBookThemeByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteBookThemeByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteBookThemeByReference = deleteBookThemeByReference;


/***/ }),

/***/ "./src/modules/book/themedetail/helper.ts":
/*!************************************************!*\
  !*** ./src/modules/book/themedetail/helper.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteThemeDetail = exports.getThemeDetailsByBookReferenceShortform = exports.getThemeDetailsByBookReference = exports.updateThemeDetail = exports.createThemeDetail = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/book/themedetail/model.ts");
var BookHelper = __importStar(__webpack_require__(/*! ../helper */ "./src/modules/book/helper.ts"));
var ThemeHelper = __importStar(__webpack_require__(/*! ../theme/helper */ "./src/modules/book/theme/helper.ts"));
var SubThemeHelper = __importStar(__webpack_require__(/*! ../subtheme/helper */ "./src/modules/book/subtheme/helper.ts"));
var ExtractHelper = __importStar(__webpack_require__(/*! ../extract/helper */ "./src/modules/book/extract/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../../note/helper */ "./src/modules/note/helper.ts"));
var Gptutils = __importStar(__webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/book/themedetail/prompt.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var createThemeDetail = function (space, bookref, conceptref, themeref, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var book, model, contextList, gptResponseText, content, themeDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(payload.type === "summary")) return [3, 2];
                return [4, _createSummary(space, bookref, conceptref, themeref)];
            case 1: return [2, _a.sent()];
            case 2: return [4, BookHelper.getBookByReference(space, bookref)];
            case 3:
                book = _a.sent();
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                return [4, model.find({
                        bookref: bookref,
                        conceptref: conceptref,
                        themeref: themeref,
                        type: "context",
                    })];
            case 4:
                contextList = _a.sent();
                if (contextList.length === 0) {
                    return [2, {}];
                }
                return [4, Gptutils.predict((0, prompt_1.getSecondarySectionPrompt)(payload.type, book.title, book.primaryAuthor, contextList[0].content))];
            case 5:
                gptResponseText = _a.sent();
                content = _processAiResponse(payload.type, gptResponseText);
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        themeref: themeref,
                        type: payload.type,
                    }, {
                        $set: {
                            customTitle: payload.sectionTitle,
                            customDescription: payload.sectionDescription,
                            content: content,
                        },
                    }, { upsert: true })];
            case 6:
                themeDetail = _a.sent();
                return [2, themeDetail];
        }
    });
}); };
exports.createThemeDetail = createThemeDetail;
var _createSummary = function (space, bookref, conceptref, themeref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, theme, notes, notesList, extracts, subThemesList, subThemes, gptResponseText, content, model, themeDetail, shorterSummary;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                return [4, ThemeHelper.getBookThemeByBookReference(space, bookref, conceptref, themeref)];
            case 2:
                theme = _a.sent();
                return [4, NoteHelper.getNoteByBookref(space, bookref)];
            case 3:
                notes = _a.sent();
                notesList = [];
                _filterAndSortDomainByKeywordOverlap(theme.keywords, notes).forEach(function (item) { return notesList.push(item.content); });
                return [4, ExtractHelper.getExtractChunksByBookReference(space, bookref)];
            case 4:
                extracts = _a.sent();
                _filterAndSortDomainByKeywordOverlap(theme.keywords, extracts).forEach(function (item) { return notesList.push(item.summary); });
                return [4, SubThemeHelper.getBookSubthemesByThemeReference(space, bookref, conceptref, themeref)];
            case 5:
                subThemesList = _a.sent();
                subThemes = _formatThemesForPrompt(subThemesList);
                return [4, Gptutils.predict((0, prompt_1.getSummarySectionPrompt)(book.title, book.primaryAuthor, theme.title, theme.description, subThemes, notesList))];
            case 6:
                gptResponseText = _a.sent();
                content = _processAiResponse("summary", gptResponseText);
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        themeref: themeref,
                        type: "summary",
                    }, {
                        $set: {
                            content: content,
                        },
                    }, { upsert: true })];
            case 7:
                themeDetail = _a.sent();
                return [4, _generateShorterSummaryForContext(book.title, book.primaryAuthor, content)];
            case 8:
                shorterSummary = _a.sent();
                return [4, model.updateOne({
                        bookref: bookref,
                        conceptref: conceptref,
                        themeref: themeref,
                        type: "context",
                    }, {
                        $set: {
                            content: shorterSummary,
                        },
                    }, { upsert: true })];
            case 9:
                _a.sent();
                return [2, themeDetail];
        }
    });
}); };
var _generateShorterSummaryForContext = function (bookName, authorName, content) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponseText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getSecondarySectionPrompt)("context", bookName, authorName, content))];
            case 1:
                gptResponseText = _a.sent();
                return [2, gptResponseText];
        }
    });
}); };
var _processAiResponse = function (type, text) {
    var _a;
    console.log(text);
    var htmlString = "";
    var data = text;
    switch (type) {
        case "summary":
        case "alternate_takes":
            data = JSON.parse(text);
            break;
        default:
            break;
    }
    switch (type) {
        case "summary":
            htmlString = data.themeExploration;
            (_a = data.subThemes) === null || _a === void 0 ? void 0 : _a.forEach(function (subTheme) {
                htmlString += "<h4>".concat(subTheme.title, "</h4>").concat(subTheme.exploration);
            });
            break;
        case "alternate_takes":
            data.forEach(function (item) {
                htmlString += "<p><b>".concat(item.reference.author, "</b> in <i>").concat(item.reference.book, "</i></p>").concat(item.content);
            });
            break;
        default:
            htmlString = data;
            break;
    }
    return htmlString;
};
function _formatThemesForPrompt(themes) {
    return themes
        .map(function (theme) { return "<strong>".concat(theme.title, ":</strong> ").concat(theme.description); })
        .join(",");
}
var _filterAndSortDomainByKeywordOverlap = function (inputKeywords, data) {
    return data
        .filter(function (item) { var _a; return (_a = item.keywords) === null || _a === void 0 ? void 0 : _a.some(function (keyword) { return inputKeywords === null || inputKeywords === void 0 ? void 0 : inputKeywords.includes(keyword); }); })
        .sort(function (a, b) {
        var _a, _b;
        var overlapA = (_a = a.keywords) === null || _a === void 0 ? void 0 : _a.filter(function (keyword) {
            return inputKeywords.includes(keyword);
        }).length;
        var overlapB = (_b = b.keywords) === null || _b === void 0 ? void 0 : _b.filter(function (keyword) {
            return inputKeywords.includes(keyword);
        }).length;
        return overlapB - overlapA;
    });
};
var updateThemeDetail = function (space, id, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                response = null;
                return [4, model.findByIdAndUpdate(id, data, {})];
            case 1:
                response = _a.sent();
                return [2, response];
        }
    });
}); };
exports.updateThemeDetail = updateThemeDetail;
var getThemeDetailsByBookReference = function (space, bookref, conceptref, themeref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                return [4, model.find({ bookref: bookref, conceptref: conceptref, themeref: themeref })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getThemeDetailsByBookReference = getThemeDetailsByBookReference;
var getThemeDetailsByBookReferenceShortform = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                return [4, model.find({ bookref: bookref, type: "_shortform" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getThemeDetailsByBookReferenceShortform = getThemeDetailsByBookReferenceShortform;
var deleteThemeDetail = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.themeDetailCollection, model_1.themeDetailSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { themeDetail: _id }];
        }
    });
}); };
exports.deleteThemeDetail = deleteThemeDetail;


/***/ }),

/***/ "./src/modules/book/themedetail/model.ts":
/*!***********************************************!*\
  !*** ./src/modules/book/themedetail/model.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.themeDetailCollection = exports.themeDetailSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var themeDetailSchema = new Schema({
    customTitle: { type: String },
    customDescription: { type: String },
    type: { type: String },
    themeref: { type: String },
    bookref: { type: String },
    content: { type: String },
    contentObject: { type: JSON },
}, { timestamps: true, strict: false, strictQuery: false });
exports.themeDetailSchema = themeDetailSchema;
var themeDetailCollection = "book.themedetail";
exports.themeDetailCollection = themeDetailCollection;


/***/ }),

/***/ "./src/modules/book/themedetail/prompt.ts":
/*!************************************************!*\
  !*** ./src/modules/book/themedetail/prompt.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSummarySectionPrompt = exports.getSecondarySectionPrompt = void 0;
var gptutils_1 = __webpack_require__(/*! ../../../lib/gptutils */ "./src/lib/gptutils.ts");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME_GPT4_MINI = "gpt-4o-mini";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
var getSecondarySectionPrompt = function (type, bookName, authorName, content) {
    switch (type) {
        case "alternate_takes":
            return (0, gptutils_1.getPrompt)(_ALTERNATE_TAKES_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
            });
        case "context":
            return (0, gptutils_1.getPrompt)(_SHORTEN_CONTENT_PROMPT, {
                bookName: bookName,
                authorName: authorName,
                content: content,
            });
        default:
            break;
    }
};
exports.getSecondarySectionPrompt = getSecondarySectionPrompt;
var getSummarySectionPrompt = function (bookName, authorName, themeTitle, themeDescription, subThemes, noteList) {
    var notes = noteList.join("/n");
    return (0, gptutils_1.getPrompt)(_SUMMARY_PROMPT, {
        bookName: bookName,
        authorName: authorName,
        themeTitle: themeTitle,
        themeDescription: themeDescription,
        notes: notes,
        subThemes: subThemes,
    });
};
exports.getSummarySectionPrompt = getSummarySectionPrompt;
var _SUMMARY_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a detailed, logically structured, and informative exploration of a theme from a book.",
                "Ensure that your explanation directly describes the theme without framing it as third-person commentary or narrative.",
                "Format the output as a JSON object with two fields: 'themeExploration' and 'subThemes'.",
                "'themeExploration' is a detailed study of the theme, and 'subThemes' is an array of objects with 'title' and 'exploration'.",
                "When exploring sub-themes, avoid quoting or paraphrasing their titles or descriptions again within the 'exploration'. Ensure that there are no self-references or phrases that explicitly point to the sub-theme or its title.",
                "Analyze how the sub-themes support, challenge, or interact with the main theme.",
                "If no sub-themes are provided by the user, return an empty array for 'subThemes'.",
                "Do not create or infer sub-themes unless they are explicitly provided in the input.",
                "Content should be in HTML format with paragraphs, bold, and italic tags.",
            ],
        },
        {
            role: "user",
            content: [
                "Explore the theme of {{themeTitle}} from the book {{bookName}} by {{authorName}}, formatted in JSON with HTML paragraphs, bold, and italic elements.",
                "{{themeDescription}}",
            ],
        },
        {
            role: "user",
            content: [
                "Use the following notes for contextual understanding only, and only where relevant to the book {{bookName}}, the author {{authorName}}, and theme {{themeTitle}}.",
                "Do not directly use these notes as a source for building your exploration:",
                "{{notes}}",
            ],
        },
        {
            role: "user",
            content: [
                "Here are the relevant sub-themes for context:",
                "{{subThemes}}",
            ],
        },
        {
            role: "assistant",
            content: '{"themeExploration":"<p>{{themeDescription}}</p><p>{ThemeDetailedExploration1}</p><p>{ThemeDetailedExploration2}</p>","subThemes":[{"title":"{SubThemeTitle1}","exploration":"<p>{DetailedSubThemeDescription1Paragraph1}</p><p>{DetailedSubThemeDescription1Paragraph2}</p><p>{DetailedSubThemeDescription1Paragraph3}</p>"},{"title":"{SubThemeTitle2}","exploration":"<p>{DetailedSubThemeDescription2Paragraph1}</p><p>{DetailedSubThemeDescription2Paragraph2}</p><p>{DetailedSubThemeDescription2Paragraph3}</p>"},{"title":"{SubThemeTitle3}","exploration":"<p>{DetailedSubThemeDescription3Paragraph1}</p><p>{DetailedSubThemeDescription3Paragraph2}</p><p>{DetailedSubThemeDescription3Paragraph3}</p>"},{"title":"{SubThemeTitle4}","exploration":"<p>{DetailedSubThemeDescription4Paragraph1}</p><p>{DetailedSubThemeDescription4Paragraph2}</p><p>{DetailedSubThemeDescription4Paragraph3}</p>"}]}',
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _SHORTEN_CONTENT_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide a concise summary of the detailed exploration of a theme from a specific book.",
                "Your summary should capture the essence of the central theme and its sub-themes, while being brief and clear.",
                "Include references to the book name and author name to provide context for later prompts.",
                "Avoid unnecessary details and focus on the key points.",
                "When in doubt, it is safer to retain content rather than remove it. Ensure that important aspects of the theme and sub-themes are preserved.",
            ],
        },
        {
            role: "user",
            content: [
                "Summarize the following content into a shorter, concise version suitable for further analysis or interpretation. Include references to the book name {{bookName}} and author {{authorName}} in the summary:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _ALTERNATE_TAKES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: [
                "You are an AI designed to provide alternate takes on specific topics covered in the provided content from the book {{bookName}} by {{authorName}}.",
                "Your task is to generate detailed explanations from other authors' perspectives on how their material relates to or contradicts the specific topics covered in the content.",
                "The output should be a list of JSON objects with two fields: 'reference' and 'content'.",
                "'reference' should be an object with 'book' and 'author' fields, indicating the book name and author name of the alternate perspective.",
                "'content' should be HTML formatted with a few paragraphs explaining deeply how the alternate material relates to or contradicts the specific topics covered.",
            ],
        },
        {
            role: "user",
            content: [
                "Provide alternate takes by other authors on the specific topics covered in the content from the book {{bookName}} by {{authorName}}. For each alternate take, include the following details:",
                "1. Reference as an object with 'book' and 'author' fields for the alternate perspective.",
                "2. HTML formatted content with a few paragraphs explaining how the alternate material relates to or contradicts the specific topics covered.",
                "Here is the content for reference:",
                "{{content}}",
            ],
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/book/themedetail/route.ts":
/*!***********************************************!*\
  !*** ./src/modules/book/themedetail/route.ts ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/book/themedetail/service.ts");
module.exports = function (router) {
    router.put("/book/theme-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateThemeDetail));
    router.post("/book/theme-detail/:space/:bookref/:conceptref/:themeref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createThemeDetail));
    router.get("/book/theme-detail/:space/:bookref/:conceptref/:themeref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getThemeDetailsByBookReference));
    router.delete("/book/theme-detail/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteThemeDetail));
};


/***/ }),

/***/ "./src/modules/book/themedetail/service.ts":
/*!*************************************************!*\
  !*** ./src/modules/book/themedetail/service.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteThemeDetail = exports.getThemeDetailsByBookReferenceShortform = exports.getThemeDetailsByBookReference = exports.updateThemeDetail = exports.createThemeDetail = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/book/themedetail/helper.ts"));
var createThemeDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, themeDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createThemeDetail(req.params.space, req.params.bookref, req.params.conceptref, req.params.themeref, req.body, userId)];
            case 1:
                themeDetail = _a.sent();
                res.status(200);
                res.send(themeDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.createThemeDetail = createThemeDetail;
var updateThemeDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, themeDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateThemeDetail(req.params.space, req.params.id, req.body, userId)];
            case 1:
                themeDetail = _a.sent();
                res.status(200);
                res.send(themeDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.updateThemeDetail = updateThemeDetail;
var getThemeDetailsByBookReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, themeDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getThemeDetailsByBookReference(req.params.space, req.params.bookref, req.params.conceptref, req.params.themeref)];
            case 1:
                themeDetail = _a.sent();
                res.status(200);
                res.send(themeDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.getThemeDetailsByBookReference = getThemeDetailsByBookReference;
var getThemeDetailsByBookReferenceShortform = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, themeDetail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getThemeDetailsByBookReferenceShortform(req.params.space, req.params.bookref)];
            case 1:
                themeDetail = _a.sent();
                res.status(200);
                res.send(themeDetail);
                res.end();
                return [2];
        }
    });
}); };
exports.getThemeDetailsByBookReferenceShortform = getThemeDetailsByBookReferenceShortform;
var deleteThemeDetail = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteThemeDetail(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteThemeDetail = deleteThemeDetail;


/***/ }),

/***/ "./src/modules/colorfilter/helper.ts":
/*!*******************************************!*\
  !*** ./src/modules/colorfilter/helper.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.move = exports.deleteColorfilter = exports.getColorfilter = exports.updateColorfilterItem = exports.updateColorfilter = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/colorfilter/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var updateColorfilter = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, order;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.colorfilterCollection, model_1.colorfilterSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, { new: true, upsert: true })];
            case 1:
                response = _a.sent();
                return [3, 5];
            case 2: return [4, model.find().count()];
            case 3:
                order = (_a.sent()) + 1;
                return [4, model.create(__assign(__assign({}, data), { order: order }))];
            case 4:
                response = _a.sent();
                _a.label = 5;
            case 5: return [4, (0, exports.getColorfilter)(space)];
            case 6: return [2, _a.sent()];
        }
    });
}); };
exports.updateColorfilter = updateColorfilter;
var updateColorfilterItem = function (space, data) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.colorfilterCollection, model_1.colorfilterSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, data, { new: true, upsert: true })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(data)];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [2, response];
        }
    });
}); };
exports.updateColorfilterItem = updateColorfilterItem;
var getColorfilter = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.colorfilterCollection, model_1.colorfilterSchema);
                return [4, model.find().sort({ order: "ascending" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getColorfilter = getColorfilter;
var deleteColorfilter = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.colorfilterCollection, model_1.colorfilterSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { colorfilter: [_id] }];
        }
    });
}); };
exports.deleteColorfilter = deleteColorfilter;
var move = function (space, _id, mode) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data, currentItem, impactedItem;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.colorfilterCollection, model_1.colorfilterSchema);
                return [4, model.find()];
            case 1:
                data = _a.sent();
                currentItem = data.find(function (item) {
                    return item._id.toString() === _id;
                });
                if (!currentItem) {
                    return [2, { 'status': 'data not found' }];
                }
                return [4, model.findByIdAndUpdate(_id, { order: mode === 'up' ? currentItem.order - 1 : currentItem.order + 1 }, { new: true, upsert: true })];
            case 2:
                _a.sent();
                impactedItem = data.find(function (item) {
                    if (mode === 'up') {
                        return item.order === currentItem.order - 1;
                    }
                    else {
                        return item.order === currentItem.order + 1;
                    }
                });
                return [4, model.findByIdAndUpdate(impactedItem._id, { order: mode === 'up' ? impactedItem.order + 1 : impactedItem.order - 1 }, { new: true, upsert: true })];
            case 3:
                _a.sent();
                return [4, (0, exports.getColorfilter)(space)];
            case 4: return [2, _a.sent()];
        }
    });
}); };
exports.move = move;


/***/ }),

/***/ "./src/modules/colorfilter/model.ts":
/*!******************************************!*\
  !*** ./src/modules/colorfilter/model.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.colorfilterCollection = exports.colorfilterSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var colorfilterSchema = new Schema({
    name: { type: String },
    color: { type: String },
    text: { type: String },
    textList: { type: Array },
    searchPref: { type: Object },
    order: { type: Number }
}, { timestamps: true, minimize: false });
exports.colorfilterSchema = colorfilterSchema;
var colorfilterCollection = "colorfilter";
exports.colorfilterCollection = colorfilterCollection;


/***/ }),

/***/ "./src/modules/colorfilter/route.ts":
/*!******************************************!*\
  !*** ./src/modules/colorfilter/route.ts ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/colorfilter/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.put("/color-filter/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateColorfilter));
    router.get("/color-filter/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getColorfilter));
    router.delete("/color-filter/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteColorfilter));
    router.post("/color-filter/:space/up/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.moveUp));
    router.post("/color-filter/:space/down/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.moveDown));
};


/***/ }),

/***/ "./src/modules/colorfilter/service.ts":
/*!********************************************!*\
  !*** ./src/modules/colorfilter/service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.moveDown = exports.moveUp = exports.deleteColorfilter = exports.getColorfilter = exports.updateColorfilterItem = exports.updateColorfilter = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/colorfilter/helper.ts"));
var selfRealm = 100;
var updateColorfilter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, colorfilter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateColorfilter(req.params.space, req.body, userId)];
            case 1:
                colorfilter = _a.sent();
                res.status(200);
                res.send(colorfilter);
                res.end();
                return [2];
        }
    });
}); };
exports.updateColorfilter = updateColorfilter;
var updateColorfilterItem = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, colorfilter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateColorfilterItem(req.params.space, req.body)];
            case 1:
                colorfilter = _a.sent();
                res.status(200);
                res.send(colorfilter);
                res.end();
                return [2];
        }
    });
}); };
exports.updateColorfilterItem = updateColorfilterItem;
var getColorfilter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, colorfilterList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getColorfilter(req.params.space)];
            case 1:
                colorfilterList = _a.sent();
                res.status(200);
                res.send(colorfilterList);
                res.end();
                return [2];
        }
    });
}); };
exports.getColorfilter = getColorfilter;
var deleteColorfilter = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteColorfilter(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteColorfilter = deleteColorfilter;
var moveUp = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.move(req.params.space, req.params.id, 'up')];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.moveUp = moveUp;
var moveDown = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.move(req.params.space, req.params.id, 'down')];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.moveDown = moveDown;


/***/ }),

/***/ "./src/modules/company/helper.ts":
/*!***************************************!*\
  !*** ./src/modules/company/helper.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCompanyByIdList = exports.getCompanyByReference = exports.getCompany = exports.updateCompany = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/company/model.ts");
var dbutils_1 = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");
var service_1 = __webpack_require__(/*! ../sequence/service */ "./src/modules/sequence/service.ts");
var StopwordsHelper = __importStar(__webpack_require__(/*! ../stopwords/helper */ "./src/modules/stopwords/helper.ts"));
var updateCompany = function (data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response_1, response, _a, _b, _c;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.companyCollection, model_1.companySchema);
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, __assign({}, data), { new: true, upsert: true })];
            case 1:
                response_1 = _e.sent();
                return [2, response_1];
            case 2:
                _b = (_a = model).create;
                _c = [__assign({}, data)];
                _d = {};
                return [4, (0, service_1.nextval)("companyId")];
            case 3: return [4, _b.apply(_a, [__assign.apply(void 0, _c.concat([(_d.reference = _e.sent(), _d)]))])];
            case 4:
                response = _e.sent();
                return [4, (0, service_1.create_sequence)("noteId", null, 1, response.reference)];
            case 5:
                _e.sent();
                return [4, (0, service_1.create_sequence)("libraryId", null, 1, response.reference)];
            case 6:
                _e.sent();
                return [4, StopwordsHelper.resetStopwords(response.reference)];
            case 7:
                _e.sent();
                return [2, response];
        }
    });
}); };
exports.updateCompany = updateCompany;
var getCompany = function () { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.companyCollection, model_1.companySchema);
                return [4, model.find()];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getCompany = getCompany;
var getCompanyByReference = function (reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.companyCollection, model_1.companySchema);
                return [4, model.findOne({ reference: reference })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getCompanyByReference = getCompanyByReference;
var getCompanyByIdList = function (idList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.companyCollection, model_1.companySchema);
                return [4, model.find({ _id: { $in: idList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getCompanyByIdList = getCompanyByIdList;


/***/ }),

/***/ "./src/modules/company/model.ts":
/*!**************************************!*\
  !*** ./src/modules/company/model.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.companyCollection = exports.companySchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var companySchema = new Schema({
    name: { type: String },
    description: { type: String },
    reference: { type: Number },
    currency: { type: String },
    numberFormat: { type: String },
}, { timestamps: true });
exports.companySchema = companySchema;
var companyCollection = "company";
exports.companyCollection = companyCollection;


/***/ }),

/***/ "./src/modules/company/route.ts":
/*!**************************************!*\
  !*** ./src/modules/company/route.ts ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/company/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.put("/company", middlewares_1.authorizeApi, service_1.updateCompany);
    router.get("/company", middlewares_1.authorizeApi, service_1.getCompany);
};


/***/ }),

/***/ "./src/modules/company/service.ts":
/*!****************************************!*\
  !*** ./src/modules/company/service.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCompanyByReference = exports.getCompany = exports.updateCompany = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/company/helper.ts"));
var userInviteService = __importStar(__webpack_require__(/*! ../user/invite/service */ "./src/modules/user/invite/service.ts"));
var PermissionHelper = __importStar(__webpack_require__(/*! ../permission/helper */ "./src/modules/permission/helper.ts"));
var selfRealm = 100;
var updateCompany = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, company;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateCompany(req.body, userId)];
            case 1:
                company = _a.sent();
                userInviteService.registerUserInvite(company._doc.reference, company._doc._id, userId, req.user.email);
                return [4, PermissionHelper.addRole(req.user.email, company._doc.reference)];
            case 2:
                _a.sent();
                res.status(200);
                res.send(company);
                res.end();
                return [2];
        }
    });
}); };
exports.updateCompany = updateCompany;
var getCompany = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, companyList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getCompany()];
            case 1:
                companyList = _a.sent();
                res.status(200);
                res.send(companyList);
                res.end();
                return [2];
        }
    });
}); };
exports.getCompany = getCompany;
var getCompanyByReference = function (reference) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.getCompanyByReference(reference)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getCompanyByReference = getCompanyByReference;


/***/ }),

/***/ "./src/modules/flashcard/helper.ts":
/*!*****************************************!*\
  !*** ./src/modules/flashcard/helper.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.importFileForFlashcard = void 0;
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/flashcard/service.ts");
var Gptutils = __importStar(__webpack_require__(/*! ../../lib/gptutils */ "./src/lib/gptutils.ts"));
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/flashcard/prompt.ts");
var importFileForFlashcard = function (space, files, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var text, gptResponseText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, service_1.imageToText)(files)];
            case 1:
                text = _a.sent();
                return [4, Gptutils.predict((0, prompt_1.getCleanTextPrompt)(text))];
            case 2:
                gptResponseText = _a.sent();
                return [2, gptResponseText];
        }
    });
}); };
exports.importFileForFlashcard = importFileForFlashcard;


/***/ }),

/***/ "./src/modules/flashcard/prompt.ts":
/*!*****************************************!*\
  !*** ./src/modules/flashcard/prompt.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCleanTextPrompt = exports.getFlastCardPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
;
var getFlastCardPrompt = function (text) {
    var prompt = (0, lodash_1.cloneDeep)(_CLEAN_TEXT_PROMPT);
    for (var i = 0; i < prompt.messages.length; i++) {
        prompt.messages[i].content = Handlebars.compile(prompt.messages[i].content)({ text: text });
    }
    console.log(prompt);
    return prompt;
};
exports.getFlastCardPrompt = getFlastCardPrompt;
var getCleanTextPrompt = function (text) {
    var prompt = (0, lodash_1.cloneDeep)(_CLEAN_TEXT_PROMPT);
    for (var i = 0; i < prompt.messages.length; i++) {
        prompt.messages[i].content = Handlebars.compile(prompt.messages[i].content)({ text: text });
    }
    console.log(prompt);
    return prompt;
};
exports.getCleanTextPrompt = getCleanTextPrompt;
var _FLASH_CARD_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are an AI assistant that will help with text extraction and creating educational materials. You should clean up and correct text extracted from a scanned copy of a book before generating flashcards. The response must be in JSON format only, without any additional text.",
        },
        {
            role: "user",
            content: "I have text content extracted from a scanned copy of a few pages of a book using tesseract.js. The extraction process was not accurate, so please correct and clean the text. After cleaning, generate a set of 25 flashcards to help me learn and understand the concept better. Each flashcard should be concise enough to fit onto a card and formatted as a JSON array of objects with the fields 'front' and 'back'. Here is the text: {{text}}",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _CLEAN_TEXT_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are ChatGPT, an advanced assistant. Your role is to take raw, unstructured text extracted from scanned book pages, correct any errors in the text, and rephrase it into a coherent, structured format suitable for study. After cleaning the text, interpret the subject matter in depth and generate a detailed, well-organized essay. The essay should be written in a series of simple paragraphs, covering the complete subject, without using headings or bullet points. The output should be in HTML format, utilizing only paragraph, bold, and italic tags to emphasize important points, ensuring it is easy to follow for a student.",
        },
        {
            role: "user",
            content: "{{text}}",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/flashcard/route.ts":
/*!****************************************!*\
  !*** ./src/modules/flashcard/route.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/flashcard/service.ts");
var multer = __webpack_require__(/*! multer */ "multer");
var storage = multer.memoryStorage();
var upload = multer({ storage: storage });
module.exports = function (router) {
    router.post("/flashcard/:space/upload", upload.array("files"), middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.importFileForFlashcard));
};


/***/ }),

/***/ "./src/modules/flashcard/service.ts":
/*!******************************************!*\
  !*** ./src/modules/flashcard/service.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.imageToText = exports.importFileForFlashcard = void 0;
var tesseract_js_1 = __importDefault(__webpack_require__(/*! tesseract.js */ "tesseract.js"));
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/flashcard/helper.ts"));
var selfRealm = 100;
var importFileForFlashcard = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("*");
                userId = req.user.user_id;
                return [4, Helper.importFileForFlashcard(req.params.space, req.files, userId)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.importFileForFlashcard = importFileForFlashcard;
var imageToText = function (files) { return __awaiter(void 0, void 0, void 0, function () {
    var cleanText, texts, i, text, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cleanText = function (text) {
                    return text
                        .replace(/^\d+\s*\n/gm, "")
                        .replace(/^(Page \d+)\s*\n/gm, "")
                        .replace(/^\s*\n/gm, "")
                        .trim();
                };
                texts = "";
                _a.label = 1;
            case 1:
                _a.trys.push([1, 6, , 7]);
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < files.length)) return [3, 5];
                return [4, tesseract_js_1.default.recognize(files[i].buffer, "eng", {
                        logger: function (m) { return console.log(m); },
                    })];
            case 3:
                text = (_a.sent()).data.text;
                texts += "\n" + cleanText(text);
                _a.label = 4;
            case 4:
                i++;
                return [3, 2];
            case 5: return [3, 7];
            case 6:
                error_1 = _a.sent();
                console.error("Error processing files:", error_1);
                throw new Error("Failed to process files.");
            case 7: return [2, texts];
        }
    });
}); };
exports.imageToText = imageToText;


/***/ }),

/***/ "./src/modules/hello/helper.ts":
/*!*************************************!*\
  !*** ./src/modules/hello/helper.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.train_similarity_model = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var NoteHelper = __importStar(__webpack_require__(/*! ../note/helper */ "./src/modules/note/helper.ts"));
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var train_similarity_model = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("admin training started");
                return [4, NoteHelper._ai_train(space)];
            case 1:
                _a.sent();
                console.log("admin populate started");
                return [4, NoteHelper._ai_populate(space)];
            case 2:
                _a.sent();
                console.log("admin training and populate finished");
                return [2, { "status": "success" }];
        }
    });
}); };
exports.train_similarity_model = train_similarity_model;


/***/ }),

/***/ "./src/modules/hello/route.ts":
/*!************************************!*\
  !*** ./src/modules/hello/route.ts ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/hello/service.ts");
module.exports = function (router) {
    router.get("/admin", function (_, res) {
        res.send("basic connection to server works. database connection is not validated");
        res.end();
    });
    router.get("/admin/:space/train", (0, handler_1.asyncHandler)(service_1.train_similarity_model));
};


/***/ }),

/***/ "./src/modules/hello/service.ts":
/*!**************************************!*\
  !*** ./src/modules/hello/service.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.train_similarity_model = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/hello/helper.ts"));
var selfRealm = 100;
var train_similarity_model = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.train_similarity_model(req.params.space)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.train_similarity_model = train_similarity_model;


/***/ }),

/***/ "./src/modules/import/helper.ts":
/*!**************************************!*\
  !*** ./src/modules/import/helper.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.importExpense = exports.transformBudgetDataForExport = exports.transformIncomeDataForExport = exports.transformExpenseDataForExport = exports.exportData = exports.deleteTransaction = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var fs = __webpack_require__(/*! fs */ "fs");
var Papa = __importStar(__webpack_require__(/*! papaparse */ "papaparse"));
var date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
var uuid_1 = __webpack_require__(/*! uuid */ "uuid");
var LogHelper = __importStar(__webpack_require__(/*! ./log/helper */ "./src/modules/import/log/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../note/helper */ "./src/modules/note/helper.ts"));
var NotelinkHelper = __importStar(__webpack_require__(/*! ../notelink/helper */ "./src/modules/notelink/helper.ts"));
var refDate = new Date();
var deleteTransaction = function (space, transactionId, userId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, LogHelper.deleteLogByTransactionId(space, transactionId)];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
exports.deleteTransaction = deleteTransaction;
var exportData = function (space, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var note, notelink, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, NoteHelper.getNote(space)];
            case 1:
                note = _a.sent();
                return [4, NotelinkHelper.getNotelink(space)];
            case 2:
                notelink = _a.sent();
                response = {
                    note: note,
                    notelink: notelink
                };
                return [2, response];
        }
    });
}); };
exports.exportData = exportData;
var transformExpenseDataForExport = function (expenseList, receiptMap, categoryMap) {
    return expenseList.map(function (item) {
        var _a, _b, _c, _d;
        return {
            type: "expense",
            category: ((_a = categoryMap[item.category]) === null || _a === void 0 ? void 0 : _a.name) || "",
            kakeibo: ((_b = categoryMap[item.category]) === null || _b === void 0 ? void 0 : _b.kakeibo) || "",
            date: item.billDate,
            description: item.description,
            amount: item.amount,
            billDescription: (_c = receiptMap[item.billId]) === null || _c === void 0 ? void 0 : _c.description,
            billNumber: (_d = receiptMap[item.billId]) === null || _d === void 0 ? void 0 : _d.number,
        };
    });
};
exports.transformExpenseDataForExport = transformExpenseDataForExport;
var transformIncomeDataForExport = function (incomeList, categoryMap) {
    return incomeList.map(function (item) {
        var _a;
        return {
            type: "income",
            category: ((_a = categoryMap[item.category]) === null || _a === void 0 ? void 0 : _a.name) || "",
            date: item.billDate,
            description: item.description,
            amount: item.amount,
        };
    });
};
exports.transformIncomeDataForExport = transformIncomeDataForExport;
var transformBudgetDataForExport = function (budgetList, categoryMap) {
    return budgetList.map(function (item) {
        var _a, _b;
        return {
            type: "budget",
            category: ((_a = categoryMap[item.categoryId]) === null || _a === void 0 ? void 0 : _a.name) || "",
            kakeibo: ((_b = categoryMap[item.categoryId]) === null || _b === void 0 ? void 0 : _b.kakeibo) || "",
            year: item.year,
            month: item.month,
            amount: item.amount,
        };
    });
};
exports.transformBudgetDataForExport = transformBudgetDataForExport;
var importExpense = function (space, file, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var content, expenseContent, incomeContent, budgetContent, transactionId, logResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                content = Papa.parse(file.buffer.toString("utf8"), {
                    quoteChar: '"',
                    escapeChar: '"',
                    delimiter: ",",
                    header: true,
                    newline: "\r\n",
                    skipEmptyLines: true,
                    transformHeader: function (h) { return h.trim().replace(/"/g, ""); },
                });
                expenseContent = content.data.filter(function (item) { return !["income", "budget"].includes(item.type); });
                incomeContent = content.data.filter(function (item) { return item.type === "income"; });
                budgetContent = content.data.filter(function (item) { return item.type === "budget"; });
                transactionId = (0, uuid_1.v4)();
                return [4, LogHelper.addLog(space, transactionId, new Date())];
            case 1:
                logResponse = _a.sent();
                return [2, {
                        log: __assign(__assign({}, logResponse._doc), { transactionDate: (0, date_fns_1.format)(logResponse.transactionDate, "yyyy-MM-dd") }),
                    }];
        }
    });
}); };
exports.importExpense = importExpense;


/***/ }),

/***/ "./src/modules/import/log/helper.ts":
/*!******************************************!*\
  !*** ./src/modules/import/log/helper.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteLogByTransactionId = exports.addLog = exports.getLog = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/import/log/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
var getLog = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.importLogCollection, model_1.importLogSchema);
                return [4, model.find({}).sort({ transactionDate: -1 })];
            case 1:
                response = _a.sent();
                return [2, response.map(function (record) {
                        return __assign(__assign({}, record._doc), { _id: record._id, transactionDate: (0, date_fns_1.format)(record.transactionDate, "yyyy-MM-dd") });
                    })];
        }
    });
}); };
exports.getLog = getLog;
var addLog = function (space, transactionId, transactionDate) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.importLogCollection, model_1.importLogSchema);
                return [4, model.create({
                        transactionId: transactionId,
                        transactionDate: transactionDate,
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.addLog = addLog;
var deleteLogByTransactionId = function (space, transactionId) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.importLogCollection, model_1.importLogSchema);
                return [4, model.deleteMany({
                        transactionId: transactionId,
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteLogByTransactionId = deleteLogByTransactionId;


/***/ }),

/***/ "./src/modules/import/log/model.ts":
/*!*****************************************!*\
  !*** ./src/modules/import/log/model.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.importLogCollection = exports.importLogSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var importLogSchema = new Schema({
    transactionId: { type: String },
    transactionDate: { type: Date },
    expenseRecords: { type: Number },
    expenseTotal: { type: Number },
    incomeRecords: { type: Number },
    incomeTotal: { type: Number },
    receiptRecords: { type: Number },
    receiptTotal: { type: Number },
    budgetRecords: { type: Number },
    budgetTotal: { type: Number },
    categoryRecords: { type: Number },
    incomeCategoryRecords: { type: Number },
    tagRecords: { type: Number },
}, { timestamps: true });
exports.importLogSchema = importLogSchema;
var importLogCollection = "import.log";
exports.importLogCollection = importLogCollection;


/***/ }),

/***/ "./src/modules/import/log/route.ts":
/*!*****************************************!*\
  !*** ./src/modules/import/log/route.ts ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/import/log/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/import/log/:space", middlewares_1.authorizeApi, service_1.getLog);
};


/***/ }),

/***/ "./src/modules/import/log/service.ts":
/*!*******************************************!*\
  !*** ./src/modules/import/log/service.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLog = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/import/log/helper.ts"));
var selfRealm = 100;
var getLog = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, logList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getLog(req.params.space)];
            case 1:
                logList = _a.sent();
                res.status(200);
                res.send(logList);
                res.end();
                return [2];
        }
    });
}); };
exports.getLog = getLog;


/***/ }),

/***/ "./src/modules/import/route.ts":
/*!*************************************!*\
  !*** ./src/modules/import/route.ts ***!
  \*************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/import/service.ts");
var multer = __webpack_require__(/*! multer */ "multer");
var upload = multer();
var selfRealm = 100;
module.exports = function (router) {
    router.post("/import/:space", upload.single("file"), middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.importExpense));
    router.post("/export/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.exportData));
    router.delete("/import/:space/transaction/:transactionId", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteTransaction));
};


/***/ }),

/***/ "./src/modules/import/service.ts":
/*!***************************************!*\
  !*** ./src/modules/import/service.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteTransaction = exports.exportData = exports.importExpense = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/import/helper.ts"));
var selfRealm = 100;
var importExpense = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.importExpense(req.params.space, req.file, userId)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.importExpense = importExpense;
var exportData = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.exportData(req.params.space, userId)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.exportData = exportData;
var deleteTransaction = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteTransaction(req.params.space, req.params.transactionId, userId)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteTransaction = deleteTransaction;


/***/ }),

/***/ "./src/modules/keywords/helper.ts":
/*!****************************************!*\
  !*** ./src/modules/keywords/helper.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getKeywords = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/keywords/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var getKeywords = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.keywordsCollection, model_1.keywordsSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0].data];
                }
                return [2, []];
        }
    });
}); };
exports.getKeywords = getKeywords;


/***/ }),

/***/ "./src/modules/keywords/model.ts":
/*!***************************************!*\
  !*** ./src/modules/keywords/model.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.keywordsCollection = exports.keywordsSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var keywordsSchema = new Schema({
    data: { type: Array },
}, { timestamps: true, minimize: false });
exports.keywordsSchema = keywordsSchema;
var keywordsCollection = "keywords";
exports.keywordsCollection = keywordsCollection;


/***/ }),

/***/ "./src/modules/keywords/route.ts":
/*!***************************************!*\
  !*** ./src/modules/keywords/route.ts ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/keywords/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/keywords/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getKeywords));
};


/***/ }),

/***/ "./src/modules/keywords/service.ts":
/*!*****************************************!*\
  !*** ./src/modules/keywords/service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getKeywords = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/keywords/helper.ts"));
var selfRealm = 100;
var getKeywords = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var keywords;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.getKeywords(req.params.space)];
            case 1:
                keywords = _a.sent();
                res.status(200);
                res.send(keywords);
                res.end();
                return [2];
        }
    });
}); };
exports.getKeywords = getKeywords;


/***/ }),

/***/ "./src/modules/label/helper.ts":
/*!*************************************!*\
  !*** ./src/modules/label/helper.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLabel = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var NoteTagHelper = __importStar(__webpack_require__(/*! ../note/tag/helper */ "./src/modules/note/tag/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../note/helper */ "./src/modules/note/helper.ts"));
var getLabel = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var noteTags, labels;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, NoteTagHelper.getTag(space)];
            case 1:
                noteTags = _a.sent();
                return [4, NoteHelper.getLabels(space)];
            case 2:
                labels = _a.sent();
                return [2, labels];
        }
    });
}); };
exports.getLabel = getLabel;


/***/ }),

/***/ "./src/modules/label/route.ts":
/*!************************************!*\
  !*** ./src/modules/label/route.ts ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/label/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/label/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getLabel));
};


/***/ }),

/***/ "./src/modules/label/service.ts":
/*!**************************************!*\
  !*** ./src/modules/label/service.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLabel = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/label/helper.ts"));
var selfRealm = 100;
var getLabel = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, labelList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getLabel(req.params.space)];
            case 1:
                labelList = _a.sent();
                res.status(200);
                res.send(labelList);
                res.end();
                return [2];
        }
    });
}); };
exports.getLabel = getLabel;


/***/ }),

/***/ "./src/modules/metadata/definition/helper.ts":
/*!***************************************************!*\
  !*** ./src/modules/metadata/definition/helper.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteMetadataDefinition = exports.getMetadataDefinition = exports.updateMetadataDefinition = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/metadata/definition/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var updateMetadataDefinition = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, allRecords, responseList, idList, i, response_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.metadataDefinitionCollection, model_1.metadataDefinitionSchema);
                response = null;
                return [4, model.find()];
            case 1:
                allRecords = _a.sent();
                responseList = [];
                idList = [];
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < data.length)) return [3, 5];
                return [4, updateMetadataDefinitionItem(space, data[i], allRecords)];
            case 3:
                response_1 = _a.sent();
                responseList.push(response_1);
                idList.push(response_1._id);
                _a.label = 4;
            case 4:
                i++;
                return [3, 2];
            case 5: return [4, model.deleteMany({ _id: { $nin: idList } })];
            case 6:
                _a.sent();
                return [4, model.find().sort({ group: "ascending", name: "ascending" })];
            case 7: return [2, _a.sent()];
        }
    });
}); };
exports.updateMetadataDefinition = updateMetadataDefinition;
var updateMetadataDefinitionItem = function (space, data, allRecords) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.metadataDefinitionCollection, model_1.metadataDefinitionSchema);
                response = null;
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, __assign(__assign({}, data), { linkable: data.linkable && data.type === 'short-text' }), { new: true, upsert: true })];
            case 1:
                response = _a.sent();
                return [3, 4];
            case 2: return [4, model.create(__assign(__assign({}, data), { linkable: data.linkable && data.type === 'short-text' }))];
            case 3:
                response = _a.sent();
                _a.label = 4;
            case 4: return [2, response];
        }
    });
}); };
var getMetadataDefinition = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.metadataDefinitionCollection, model_1.metadataDefinitionSchema);
                return [4, model.find().sort({ group: "ascending", name: "ascending" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getMetadataDefinition = getMetadataDefinition;
var deleteMetadataDefinition = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.metadataDefinitionCollection, model_1.metadataDefinitionSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { metadataDefinition: [_id] }];
        }
    });
}); };
exports.deleteMetadataDefinition = deleteMetadataDefinition;


/***/ }),

/***/ "./src/modules/metadata/definition/model.ts":
/*!**************************************************!*\
  !*** ./src/modules/metadata/definition/model.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.metadataDefinitionCollection = exports.metadataDefinitionSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var metadataDefinitionSchema = new Schema({
    reference: { type: String },
    name: { type: String },
    group: { type: String },
    type: { type: String },
    linkable: { type: Boolean }
}, { timestamps: true });
exports.metadataDefinitionSchema = metadataDefinitionSchema;
var metadataDefinitionCollection = "metadata.definition";
exports.metadataDefinitionCollection = metadataDefinitionCollection;


/***/ }),

/***/ "./src/modules/metadata/definition/route.ts":
/*!**************************************************!*\
  !*** ./src/modules/metadata/definition/route.ts ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/metadata/definition/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.post("/metadata-definition/:space/full", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateMetadataDefinition));
    router.get("/metadata-definition/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getMetadataDefinition));
    router.delete("/metadata-definition/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteMetadataDefinition));
};


/***/ }),

/***/ "./src/modules/metadata/definition/service.ts":
/*!****************************************************!*\
  !*** ./src/modules/metadata/definition/service.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteMetadataDefinition = exports.getMetadataDefinition = exports.updateMetadataDefinition = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/metadata/definition/helper.ts"));
var selfRealm = 100;
var updateMetadataDefinition = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, metadataDefinition;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateMetadataDefinition(req.params.space, req.body, userId)];
            case 1:
                metadataDefinition = _a.sent();
                res.status(200);
                res.send(metadataDefinition);
                res.end();
                return [2];
        }
    });
}); };
exports.updateMetadataDefinition = updateMetadataDefinition;
var getMetadataDefinition = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, metadataDefinitionList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getMetadataDefinition(req.params.space)];
            case 1:
                metadataDefinitionList = _a.sent();
                res.status(200);
                res.send(metadataDefinitionList);
                res.end();
                return [2];
        }
    });
}); };
exports.getMetadataDefinition = getMetadataDefinition;
var deleteMetadataDefinition = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteMetadataDefinition(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteMetadataDefinition = deleteMetadataDefinition;


/***/ }),

/***/ "./src/modules/metadata/value/helper.ts":
/*!**********************************************!*\
  !*** ./src/modules/metadata/value/helper.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMetadataValue = void 0;
var model_1 = __webpack_require__(/*! ../../note/model */ "./src/modules/note/model.ts");
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var MetadataDefinitionHelper = __importStar(__webpack_require__(/*! ../definition/helper */ "./src/modules/metadata/definition/helper.ts"));
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var getMetadataValue = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, metadataDefinitionList, response, i, id, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, MetadataDefinitionHelper.getMetadataDefinition(space)];
            case 1:
                metadataDefinitionList = _c.sent();
                response = {};
                i = 0;
                _c.label = 2;
            case 2:
                if (!(i < metadataDefinitionList.length)) return [3, 5];
                id = metadataDefinitionList[i]._id.toString();
                if (!metadataDefinitionList[i].linkable) return [3, 4];
                _a = response;
                _b = id;
                return [4, model.find().distinct(id)];
            case 3:
                _a[_b] = _c.sent();
                _c.label = 4;
            case 4:
                i++;
                return [3, 2];
            case 5: return [2, response];
        }
    });
}); };
exports.getMetadataValue = getMetadataValue;


/***/ }),

/***/ "./src/modules/metadata/value/route.ts":
/*!*********************************************!*\
  !*** ./src/modules/metadata/value/route.ts ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/metadata/value/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/metadata-value/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getMetadataValue));
};


/***/ }),

/***/ "./src/modules/metadata/value/service.ts":
/*!***********************************************!*\
  !*** ./src/modules/metadata/value/service.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMetadataValue = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/metadata/value/helper.ts"));
var selfRealm = 100;
var getMetadataValue = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, metadataValueList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getMetadataValue(req.params.space)];
            case 1:
                metadataValueList = _a.sent();
                res.status(200);
                res.send(metadataValueList);
                res.end();
                return [2];
        }
    });
}); };
exports.getMetadataValue = getMetadataValue;


/***/ }),

/***/ "./src/modules/note/helper.ts":
/*!************************************!*\
  !*** ./src/modules/note/helper.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.brainstormUsingAi = exports.getKeywords = exports.getLabels = exports._ai_populate = exports._ai_train = exports.browseNotes = exports.getNotesByMetadataValue = exports.searchNote = exports.searchNoteByText = exports.deleteNoteByReferenceList = exports.deleteNoteByReference = exports.deleteNote = exports.getNotesByReferenceList = exports.getNotesByFolderIdList = exports.deleteNotesByFolderIdList = exports.getNoteById = exports.getNoteByBookref = exports.getNoteByReference = exports.getRecentlyCreatedNote = exports.getNoteDictionary = exports.getNote = exports.createNote = exports.updateNote = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var Gptutils = __importStar(__webpack_require__(/*! ../../lib/gptutils */ "./src/lib/gptutils.ts"));
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/note/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var service_1 = __webpack_require__(/*! ../sequence/service */ "./src/modules/sequence/service.ts");
var NotelinkHelper = __importStar(__webpack_require__(/*! ../notelink/helper */ "./src/modules/notelink/helper.ts"));
var MetadataDefinitionHelper = __importStar(__webpack_require__(/*! ../metadata/definition/helper */ "./src/modules/metadata/definition/helper.ts"));
var ColorfilterHelper = __importStar(__webpack_require__(/*! ../colorfilter/helper */ "./src/modules/colorfilter/helper.ts"));
var NotelinkAutoHelper = __importStar(__webpack_require__(/*! ../notelink/auto/helper */ "./src/modules/notelink/auto/helper.ts"));
var Utils_1 = __webpack_require__(/*! ../../lib/Utils */ "./src/lib/Utils.ts");
var prompt_1 = __webpack_require__(/*! ./prompt */ "./src/modules/note/prompt.ts");
var AI_API = process.env.AI_API || "http://localhost:5003/api";
var SIMILARITY_ALGORITHM = "similarity";
var updateNote = function (space, reload, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, response, contentText, _a, _b, _c, notelinks, noteResponse, note;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                response = null;
                contentText = data.content.replace(/<[^>]*>/g, "");
                if (!data._id) return [3, 2];
                return [4, model.findByIdAndUpdate(data._id, __assign(__assign({}, data), { contentText: contentText }), { new: true, upsert: true })];
            case 1:
                response = _e.sent();
                return [3, 5];
            case 2:
                _b = (_a = model).create;
                _c = [__assign({}, data)];
                _d = {};
                return [4, (0, service_1.nextval)("noteId", undefined, space)];
            case 3: return [4, _b.apply(_a, [__assign.apply(void 0, _c.concat([(_d.reference = _e.sent(), _d.contentText = contentText, _d)]))])];
            case 4:
                response = _e.sent();
                _e.label = 5;
            case 5: return [4, _calculateVectors(space, response.reference)];
            case 6:
                _e.sent();
                return [4, NotelinkAutoHelper.getNotelinkAutoByNoteRef(space, response.reference)];
            case 7:
                notelinks = _e.sent();
                return [4, model.find({ reference: response.reference })];
            case 8:
                noteResponse = _e.sent();
                note = null;
                if (noteResponse.length > 0) {
                    note = noteResponse[0];
                }
                return [2, {
                        notelinks: notelinks,
                        note: note,
                    }];
        }
    });
}); };
exports.updateNote = updateNote;
var createNote = function (space, reload, payload, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data, _a, response, _b, _c, _d, notelinks, noteResponse, note;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                if (!payload.autoGenerateOtherDetails) return [3, 2];
                return [4, _enhanceNoteDataUsingAi(space, payload.note)];
            case 1:
                _a = _f.sent();
                return [3, 3];
            case 2:
                _a = _enhanceNoteData(payload.note);
                _f.label = 3;
            case 3:
                data = _a;
                if (!payload.autoGenerateOtherDetails) return [3, 5];
                return [4, _enhanceNoteDataWithMetadataFromRecentNote(space, data)];
            case 4:
                data = _f.sent();
                _f.label = 5;
            case 5:
                response = null;
                _c = (_b = model).create;
                _d = [__assign({}, data)];
                _e = {};
                return [4, (0, service_1.nextval)("noteId", undefined, space)];
            case 6: return [4, _c.apply(_b, [__assign.apply(void 0, _d.concat([(_e.reference = _f.sent(), _e)]))])];
            case 7:
                response = _f.sent();
                return [4, _calculateVectors(space, response.reference)];
            case 8:
                _f.sent();
                return [4, NotelinkAutoHelper.getNotelinkAutoByNoteRef(space, response.reference)];
            case 9:
                notelinks = _f.sent();
                return [4, model.find({ reference: response.reference })];
            case 10:
                noteResponse = _f.sent();
                note = null;
                if (noteResponse.length > 0) {
                    note = noteResponse[0];
                }
                return [2, {
                        notelinks: notelinks,
                        note: note,
                    }];
        }
    });
}); };
exports.createNote = createNote;
var getNote = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find()];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.getNote = getNote;
var _calculateVectors = function (space, noteref) { return __awaiter(void 0, void 0, void 0, function () {
    var model, retrain, updateCount, notesCount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                retrain = false;
                return [4, (0, service_1.nextval)("note_update_count", "ai", space)];
            case 1:
                updateCount = _a.sent();
                console.log(updateCount);
                if (updateCount <= 20) {
                    retrain = true;
                }
                if (updateCount > 20 && updateCount <= 100 && updateCount % 10 === 0) {
                    retrain = true;
                }
                if (updateCount > 100 && updateCount <= 500 && updateCount % 25 === 0) {
                    retrain = true;
                }
                if (updateCount > 500 && updateCount <= 1000 && updateCount % 50 === 0) {
                    retrain = true;
                }
                if (updateCount > 1000 && updateCount % 100 === 0) {
                    retrain = true;
                }
                if (!(updateCount % 200 === 0)) return [3, 4];
                return [4, model.find().estimatedDocumentCount()];
            case 2:
                notesCount = _a.sent();
                return [4, (0, service_1.resetval)(notesCount + 2, "note_update_count", "ai", space)];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4:
                if (!retrain) return [3, 7];
                console.log("---retraining");
                return [4, (0, exports._ai_train)(space)];
            case 5:
                _a.sent();
                return [4, (0, exports._ai_populate)(space)];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7: return [4, _ai_populate_for_note(space, noteref)];
            case 8:
                _a.sent();
                return [2];
        }
    });
}); };
var getNoteDictionary = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                _a = _enrichWithGroupColor;
                _b = [space];
                return [4, model.find()];
            case 1: return [4, _a.apply(void 0, _b.concat([_c.sent()]))];
            case 2:
                res = _c.sent();
                return [2, res.map(function (item) {
                        return {
                            _id: item._id,
                            name: item.name,
                            reference: item.reference,
                            summary: (0, Utils_1.isEmptyOrSpaces)(item.summary)
                                ? item.autoGeneratedSummary
                                : item.summary,
                            color: item.color,
                            labels: item.labels,
                        };
                    })];
        }
    });
}); };
exports.getNoteDictionary = getNoteDictionary;
var _enrichWithGroupColor = function (space, data) { return __awaiter(void 0, void 0, void 0, function () {
    var filterGroupList, response, j, _record, out, _filterGroupList, i, _filter, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, ColorfilterHelper.getColorfilter(space)];
            case 1:
                filterGroupList = _a.sent();
                response = [];
                j = 0;
                _a.label = 2;
            case 2:
                if (!(j < data.length)) return [3, 8];
                _record = data[j]._doc;
                out = __assign({}, _record);
                _filterGroupList = filterGroupList
                    .filter(function (filter) { return !(0, Utils_1.isEmptyOrSpaces)(filter._doc.color); })
                    .reverse();
                i = 0;
                _a.label = 3;
            case 3:
                if (!(i < _filterGroupList.length)) return [3, 6];
                _filter = _filterGroupList[i]._doc;
                return [4, _processFilterPerRecord(space, _record, _filter)];
            case 4:
                outcome = _a.sent();
                if (outcome) {
                    out.color = _filter.color;
                }
                _a.label = 5;
            case 5:
                i++;
                return [3, 3];
            case 6:
                response.push(out);
                _a.label = 7;
            case 7:
                j++;
                return [3, 2];
            case 8: return [2, response];
        }
    });
}); };
var _processFilterPerRecord = function (space_1, record_1, _a) { return __awaiter(void 0, [space_1, record_1, _a], void 0, function (space, record, _b) {
    var metadataDefinitionList, searchFields, outcome, isValidText, textRegexp;
    var text = _b.text, textList = _b.textList, searchPref = _b.searchPref;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, MetadataDefinitionHelper.getMetadataDefinition(space)];
            case 1:
                metadataDefinitionList = _c.sent();
                searchFields = [];
                if (searchPref) {
                    Object.keys(searchPref).forEach(function (fieldName) {
                        if (searchPref[fieldName]) {
                            searchFields.push(fieldName);
                        }
                    });
                }
                outcome = false;
                isValidText = !(0, Utils_1.isEmptyOrSpaces)(text);
                textRegexp = new RegExp(text, "i");
                if (!isValidText && (searchFields.length !== 1 || textList.length === 0)) {
                    return [2, false];
                }
                if (isValidText &&
                    (searchFields.length === 0 || searchFields.includes("content"))) {
                    if (record.content.match(textRegexp)) {
                        return [2, true];
                    }
                }
                if (isValidText && searchFields.includes("name")) {
                    if (record.name.match(textRegexp)) {
                        return [2, true];
                    }
                }
                if (isValidText && searchFields.includes("labels")) {
                    if ((0, lodash_1.intersection)(record.labels, text.split(" ")).length > 0) {
                        return [2, true];
                    }
                }
                if (searchFields.length === 1 &&
                    searchFields.includes("labels") &&
                    textList.length > 0) {
                    if ((0, lodash_1.intersection)(record.labels, textList).length > 0) {
                        return [2, true];
                    }
                }
                metadataDefinitionList.forEach(function (item) {
                    if (isValidText && searchFields.includes(item._id.toString())) {
                        if (record[item._id.toString()].match(textRegexp)) {
                            return true;
                        }
                    }
                    if (searchFields.length === 1 &&
                        searchFields.includes(item._id.toString()) &&
                        textList.length > 0) {
                        if ((0, lodash_1.intersection)(record[item._id.toString()], textList).length > 0) {
                            return true;
                        }
                    }
                });
                return [2, false];
        }
    });
}); };
var getRecentlyCreatedNote = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find().sort({ $natural: -1 }).limit(1)];
            case 1:
                res = _a.sent();
                if (res.length === 0) {
                    return [2, null];
                }
                return [2, res[0]];
        }
    });
}); };
exports.getRecentlyCreatedNote = getRecentlyCreatedNote;
var getNoteByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({ reference: reference })];
            case 1:
                res = _a.sent();
                if (res.length === 0) {
                    return [2, null];
                }
                return [2, res[0]];
        }
    });
}); };
exports.getNoteByReference = getNoteByReference;
var getNoteByBookref = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({ bookrefList: { $in: [bookref] } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getNoteByBookref = getNoteByBookref;
var getNoteById = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({ _id: _id })];
            case 1:
                res = _a.sent();
                if (res.length > 0) {
                    return [2, res[0]];
                }
                return [2];
        }
    });
}); };
exports.getNoteById = getNoteById;
var deleteNotesByFolderIdList = function (space, folderIdList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.deleteMany({ folderId: { $in: folderIdList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteNotesByFolderIdList = deleteNotesByFolderIdList;
var getNotesByFolderIdList = function (space, folderIdList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({ folderId: { $in: folderIdList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getNotesByFolderIdList = getNotesByFolderIdList;
var getNotesByReferenceList = function (space, refList) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({ reference: { $in: refList } })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getNotesByReferenceList = getNotesByReferenceList;
var deleteNote = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [2, { note: _id }];
        }
    });
}); };
exports.deleteNote = deleteNote;
var deleteNoteByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.deleteMany({ reference: reference })];
            case 1:
                _a.sent();
                return [4, NotelinkHelper.deleteNotelinkByReference(space, reference)];
            case 2:
                _a.sent();
                return [4, NotelinkAutoHelper.deleteNotelinkByReference(space, reference)];
            case 3:
                _a.sent();
                return [2, { note: reference }];
        }
    });
}); };
exports.deleteNoteByReference = deleteNoteByReference;
var deleteNoteByReferenceList = function (space, payload) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.deleteMany({ reference: { $in: payload } })];
            case 1:
                _a.sent();
                return [4, NotelinkHelper.deleteNotelinkByReferenceList(space, payload)];
            case 2:
                _a.sent();
                return [4, NotelinkAutoHelper.deleteNotelinkByReferenceList(space, payload)];
            case 3:
                _a.sent();
                return [2, { note: payload }];
        }
    });
}); };
exports.deleteNoteByReferenceList = deleteNoteByReferenceList;
var searchNoteByText = function (space, text) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.find({
                        $text: { $search: "\"".concat(text, "\""), $caseSensitive: false },
                    })];
            case 1:
                res = _a.sent();
                return [2, res];
        }
    });
}); };
exports.searchNoteByText = searchNoteByText;
var searchNote = function (space, text, textList, searchPref) { return __awaiter(void 0, void 0, void 0, function () {
    var _text, model, condition, res;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _text = (_a = text === null || text === void 0 ? void 0 : text.toLowerCase()) === null || _a === void 0 ? void 0 : _a.replace(/ +/g, " ");
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, _getSearchCondition(space, _text, textList, searchPref)];
            case 1:
                condition = _b.sent();
                return [4, model.find({ $or: condition }).sort({ createdAt: -1 })];
            case 2:
                res = _b.sent();
                return [2, res.map(function (item) {
                        return __assign(__assign({}, item._doc), { summary: (0, Utils_1.isEmptyOrSpaces)(item.summary)
                                ? item.autoGeneratedSummary
                                : item.summary });
                    })];
        }
    });
}); };
exports.searchNote = searchNote;
var _getSearchCondition = function (space, text, textList, searchPref) { return __awaiter(void 0, void 0, void 0, function () {
    var metadataDefinitionList, searchFields, condition, isValidText;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, MetadataDefinitionHelper.getMetadataDefinition(space)];
            case 1:
                metadataDefinitionList = _a.sent();
                searchFields = [];
                if (searchPref) {
                    Object.keys(searchPref).forEach(function (fieldName) {
                        if (searchPref[fieldName]) {
                            searchFields.push(fieldName);
                        }
                    });
                }
                condition = [];
                isValidText = !(0, Utils_1.isEmptyOrSpaces)(text);
                if (isValidText &&
                    (searchFields.length === 0 || searchFields.includes("content"))) {
                    condition.push({
                        content: new RegExp(text, "i"),
                    });
                }
                if (isValidText && searchFields.includes("name")) {
                    condition.push({
                        name: new RegExp(text, "i"),
                    });
                }
                if (isValidText && searchFields.includes("labels")) {
                    condition.push({
                        labels: {
                            $in: text.split(" "),
                        },
                    });
                }
                if (searchFields.length === 1 &&
                    searchFields.includes("labels") &&
                    textList.length > 0) {
                    condition.push({
                        labels: {
                            $in: textList,
                        },
                    });
                }
                metadataDefinitionList.forEach(function (item) {
                    var _a, _b;
                    if (isValidText && searchFields.includes(item._id.toString())) {
                        condition.push((_a = {},
                            _a[item._id.toString()] = new RegExp(text, "i"),
                            _a));
                    }
                    if (searchFields.length === 1 &&
                        searchFields.includes(item._id.toString()) &&
                        textList.length > 0) {
                        condition.push((_b = {},
                            _b[item._id.toString()] = {
                                $in: textList,
                            },
                            _b));
                    }
                });
                if (condition.length === 0) {
                    return [2, [{}]];
                }
                return [2, condition];
        }
    });
}); };
var getNotesByMetadataValue = function (space, metadataId, payload) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                res = [];
                if (!(metadataId === "label")) return [3, 2];
                return [4, model
                        .find({ labels: new RegExp(payload.value, "i") })
                        .sort({ createdAt: -1 })];
            case 1:
                res = _b.sent();
                return [3, 4];
            case 2: return [4, model
                    .find((_a = {}, _a[metadataId] = new RegExp(payload.value, "i"), _a))
                    .sort({ createdAt: -1 })];
            case 3:
                res = _b.sent();
                _b.label = 4;
            case 4: return [2, res.map(function (item) {
                    return __assign(__assign({}, item._doc), { summary: (0, Utils_1.isEmptyOrSpaces)(item.summary)
                            ? item.autoGeneratedSummary
                            : item.summary });
                })];
        }
    });
}); };
exports.getNotesByMetadataValue = getNotesByMetadataValue;
var browseNotes = function (space, payload) { return __awaiter(void 0, void 0, void 0, function () {
    var model, res, referenceNotes, referenceKeywords_1;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                res = [];
                if (!(payload.metadataId === "related")) return [3, 3];
                return [4, model.find({
                        reference: { $in: payload.metadataValue },
                    })];
            case 1:
                referenceNotes = _b.sent();
                referenceKeywords_1 = [];
                referenceNotes.forEach(function (item) {
                    referenceKeywords_1 = referenceKeywords_1.concat(item.keywords);
                });
                referenceKeywords_1 = (0, lodash_1.uniq)(referenceKeywords_1);
                return [4, model
                        .find({
                        keywords: { $in: referenceKeywords_1 },
                    })
                        .sort({ createdAt: -1 })];
            case 2:
                res = _b.sent();
                return [3, 5];
            case 3: return [4, model
                    .find((_a = {},
                    _a[payload.metadataId] = new RegExp(payload.metadataValue.toString(), "i"),
                    _a))
                    .sort({ createdAt: -1 })];
            case 4:
                res = _b.sent();
                _b.label = 5;
            case 5: return [2, res.map(function (item) {
                    return __assign(__assign({}, item._doc), { summary: (0, Utils_1.isEmptyOrSpaces)(item.summary)
                            ? item.autoGeneratedSummary
                            : item.summary });
                })];
        }
    });
}); };
exports.browseNotes = browseNotes;
var _ai_train = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("AI_API=", AI_API);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/train"), {})];
            case 2:
                _a.sent();
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
exports._ai_train = _ai_train;
var _ai_populate = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate"), {})];
            case 1:
                _a.sent();
                return [3, 3];
            case 2:
                err_2 = _a.sent();
                console.log(err_2);
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
exports._ai_populate = _ai_populate;
var _ai_populate_for_note = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var err_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, axios.get("".concat(AI_API, "/").concat(SIMILARITY_ALGORITHM, "/").concat(space, "/populate/").concat(reference), {})];
            case 1:
                _a.sent();
                return [3, 3];
            case 2:
                err_3 = _a.sent();
                console.log(err_3.data);
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
var getLabels = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.distinct("labels")];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getLabels = getLabels;
var getKeywords = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteCollection, model_1.noteSchema);
                return [4, model.distinct("keywords")];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getKeywords = getKeywords;
var brainstormUsingAi = function (space, payload) { return __awaiter(void 0, void 0, void 0, function () {
    var gptResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Gptutils.predict((0, prompt_1.getBrainstormPrompt)(payload.useBookMode, payload.text, payload.instructions, payload.bookName, payload.authorName))];
            case 1:
                gptResponse = _a.sent();
                console.log(gptResponse);
                return [2, gptResponse || payload.text];
        }
    });
}); };
exports.brainstormUsingAi = brainstormUsingAi;
var _enhanceNoteData = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var _data;
    return __generator(this, function (_a) {
        _data = (0, lodash_1.cloneDeep)(data);
        _data.contentText = _data.content.replace(/<[^>]*>/g, "");
        if ((0, Utils_1.isEmptyOrSpaces)(_data.summary)) {
            _data.summary = _data.contentText.substring(0, 250);
        }
        if ((0, Utils_1.isEmptyOrSpaces)(_data.name)) {
            _data.name = _data.contentText.substring(0, 250);
        }
        return [2, _data];
    });
}); };
var _enhanceNoteDataUsingAi = function (space, data) { return __awaiter(void 0, void 0, void 0, function () {
    var _data, gptResponseText, _a, _b, _c, _d, gptResponse;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _data = (0, lodash_1.cloneDeep)(data);
                _data.contentText = _data.content.replace(/<[^>]*>/g, "");
                if ((0, Utils_1.isEmptyOrSpaces)(_data.contentText) || _data.contentText.length <= 20) {
                    return [2, _enhanceNoteData(_data)];
                }
                _b = (_a = Gptutils).predict;
                _c = prompt_1.getAutoGeneratedAttributesPrompt;
                _d = [data.content];
                return [4, (0, exports.getLabels)(space)];
            case 1: return [4, _b.apply(_a, [_c.apply(void 0, _d.concat([_e.sent()]))])];
            case 2:
                gptResponseText = _e.sent();
                gptResponse = JSON.parse(gptResponseText);
                _data.name = gptResponse === null || gptResponse === void 0 ? void 0 : gptResponse.title;
                _data.summary = gptResponse === null || gptResponse === void 0 ? void 0 : gptResponse.summary;
                _data.labels = gptResponse === null || gptResponse === void 0 ? void 0 : gptResponse.labels;
                _data.primaryLabel = gptResponse === null || gptResponse === void 0 ? void 0 : gptResponse.primaryLabel;
                return [2, _data];
        }
    });
}); };
var _enhanceNoteDataWithMetadataFromRecentNote = function (space, data) { return __awaiter(void 0, void 0, void 0, function () {
    var recentNote, _a, _id, id, name, content, contentText, reference, labels, primaryLabel, summary, bookrefList, createdAt, updatedAt, __v, metadataFields, _data;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4, (0, exports.getRecentlyCreatedNote)(space)];
            case 1:
                recentNote = _b.sent();
                console.log(recentNote);
                if (!recentNote || !(recentNote === null || recentNote === void 0 ? void 0 : recentNote._doc)) {
                    return [2, data];
                }
                _a = recentNote._doc, _id = _a._id, id = _a.id, name = _a.name, content = _a.content, contentText = _a.contentText, reference = _a.reference, labels = _a.labels, primaryLabel = _a.primaryLabel, summary = _a.summary, bookrefList = _a.bookrefList, createdAt = _a.createdAt, updatedAt = _a.updatedAt, __v = _a.__v, metadataFields = __rest(_a, ["_id", "id", "name", "content", "contentText", "reference", "labels", "primaryLabel", "summary", "bookrefList", "createdAt", "updatedAt", "__v"]);
                _data = __assign(__assign({}, data), metadataFields);
                return [2, _data];
        }
    });
}); };


/***/ }),

/***/ "./src/modules/note/model.ts":
/*!***********************************!*\
  !*** ./src/modules/note/model.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.noteCollection = exports.noteSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var noteSchema = new Schema({
    name: { type: String },
    summary: { type: String },
    content: { type: String },
    contentText: { type: String },
    reference: { type: String },
    labels: { type: Array },
    primaryLabel: { type: String },
    type: { type: String },
    bookrefList: { type: Array },
}, { timestamps: true, strict: false, strictQuery: false });
exports.noteSchema = noteSchema;
noteSchema.index({ content: "text" });
var noteCollection = "note";
exports.noteCollection = noteCollection;


/***/ }),

/***/ "./src/modules/note/prompt.ts":
/*!************************************!*\
  !*** ./src/modules/note/prompt.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAutoGeneratedAttributesPrompt = exports.getBrainstormPrompt = void 0;
var Handlebars = __importStar(__webpack_require__(/*! handlebars */ "handlebars"));
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var _MODEL_NAME_GPT3 = "gpt-3.5-turbo";
var _MODEL_NAME_GPT4 = "gpt-4o";
var _MODEL_NAME = process.env.CHATGPT_MODEL_NAME || "gpt-4o-mini";
;
var getBrainstormPrompt = function (useBookMode, text, instructions, bookName, authorName) {
    var brainstormPrompt = useBookMode
        ? (0, lodash_1.cloneDeep)(_BRAINSTORM_WITH_BOOK_PROMPT)
        : (0, lodash_1.cloneDeep)(_BRAINSTORM_PROMPT);
    brainstormPrompt.messages[brainstormPrompt.messages.length - 1].content =
        Handlebars.compile(brainstormPrompt.messages[brainstormPrompt.messages.length - 1].content)({
            baseText: text,
            instructions: instructions,
            bookName: bookName,
            authorName: authorName,
            modelName: _MODEL_NAME,
        });
    console.log(brainstormPrompt);
    return brainstormPrompt;
};
exports.getBrainstormPrompt = getBrainstormPrompt;
var _PROMPT_SECTION_INTRODUCTION = {
    role: "system",
    content: "You are an expert in transforming freehanded base texts into concise and well-structured content. Your task is to modify the base text into clear and concise content according to the given instructions. Do not include any common heading or title in your response.",
};
var _PROMPT_SECTION_INTRODUCTION_WITH_BOOK = {
    role: "system",
    content: "You are an expert in transforming freehanded base texts into concise and well-structured content. Your task is to modify the base text into clear and concise content according to the given instructions, using the provided book details. Do not mention the book name or author name in the generated content.",
};
var _PROMPT_SECTION_HTML_ENCODING = {
    role: "system",
    content: "Always use raw HTML tags for formatting. For example, use <b> for bold, <i> for italic, etc. Do not use markdown syntax like ** for bold or * for italic.",
};
var _PROMPT_SECTION_HTML_SUPPORTED_FORMATS = {
    role: "system",
    content: "Limit HTML to basic formatting like bold, italic, underline, bullet lists, numbered lists, h4, and h5. Do not include any additional HTML document structure or prefixes like 'html\\n'.",
};
var _PROMPT_SECTION_INPUT_QUALITY_CHECK = {
    role: "system",
    content: "Carefully evaluate the instructions provided, including any numbers or details, to ensure they are relevant and meaningful for transforming the base text. If the instructions are unclear, irrelevant, or you cannot reliably generate content based on them, prefix your response with 'MORE_INFO_NEEDED' and ask for clarification.",
};
var _PROMPT_SECTION_BOOK_REFERENCE = {
    role: "system",
    content: "If the book name and author name are provided and matching books are found, proceed with the most relevant book without asking for additional details. If the book name is provided but the author name is missing and multiple books with the same name exist, prefix your response with 'BOOK_NOT_FOUND' and specify that the author name is needed. If the book name and/or author name cannot be found, prefix your response with 'BOOK_NOT_FOUND' and indicate that the book details could not be verified.",
};
var _PROMPT_SECTION_INPUT_MEANINGNESS_CHECK = {
    role: "system",
    content: "Do not return the base text unchanged. If the instructions do not allow for a meaningful transformation, indicate that by prefacing your response with 'MORE_INFO_NEEDED'.",
};
var _PROMPT_SECTION_FORM_WITHOUT_BOOK = {
    role: "user",
    content: "Base Text: {{baseText}}\nInstructions: {{instructions}}",
};
var _PROMPT_SECTION_FORM_WITH_BOOK = {
    role: "user",
    content: "Base Text: {{baseText}}\nInstructions: {{instructions}}\nBook: {{bookName}}, Author: {{authorName}}",
};
var _BRAINSTORM_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        _PROMPT_SECTION_INTRODUCTION,
        _PROMPT_SECTION_HTML_ENCODING,
        _PROMPT_SECTION_HTML_SUPPORTED_FORMATS,
        _PROMPT_SECTION_INPUT_QUALITY_CHECK,
        _PROMPT_SECTION_INPUT_MEANINGNESS_CHECK,
        _PROMPT_SECTION_FORM_WITHOUT_BOOK,
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var _BRAINSTORM_WITH_BOOK_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        _PROMPT_SECTION_INTRODUCTION_WITH_BOOK,
        _PROMPT_SECTION_HTML_ENCODING,
        _PROMPT_SECTION_HTML_SUPPORTED_FORMATS,
        _PROMPT_SECTION_INPUT_QUALITY_CHECK,
        _PROMPT_SECTION_BOOK_REFERENCE,
        _PROMPT_SECTION_INPUT_MEANINGNESS_CHECK,
        _PROMPT_SECTION_FORM_WITH_BOOK,
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};
var getAutoGeneratedAttributesPrompt = function (text, labels) {
    var prompt = (0, lodash_1.cloneDeep)(_AUTO_GENERATED_ATTRUBUTES_PROMPT);
    prompt.messages[prompt.messages.length - 1].content = Handlebars.compile(prompt.messages[prompt.messages.length - 1].content)({
        text: text,
        labels: labels,
        modelName: _MODEL_NAME,
    });
    return prompt;
};
exports.getAutoGeneratedAttributesPrompt = getAutoGeneratedAttributesPrompt;
var _AUTO_GENERATED_ATTRUBUTES_PROMPT = {
    model: _MODEL_NAME,
    messages: [
        {
            role: "system",
            content: "You are an AI that generates optimized content based on user inputs. Your task is to create a short title and summary for an essay provided by the user. The title should not contain a colon character (:). Additionally, you will evaluate a set of labels and select those relevant to the essay. If none of the provided labels are relevant, you will generate 2-3 new labels that better suit the essay. All labels, including the primary label, should be in lowercase, and the primary label must be selected from the relevant labels. The output should be a JSON object with the fields: title, summary, labels, and primaryLabel.",
        },
        {
            role: "system",
            content: "Please generate a short title and summary for the essay. Ensure the title does not contain a colon character (:). Choose relevant labels from the provided set, or generate new ones if necessary, and select a primary label. The output should be in a JSON object with the fields: title, summary, labels, and primaryLabel.",
        },
        {
            role: "user",
            content: "Essay Text: {{text}}\nLabels: {{labels}}",
        },
    ],
    temperature: 1,
    max_tokens: 4096,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
};


/***/ }),

/***/ "./src/modules/note/route.ts":
/*!***********************************!*\
  !*** ./src/modules/note/route.ts ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/note/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.put("/note/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.updateNote));
    router.post("/note/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.createNote));
    router.post("/note/:space/search", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.searchNote));
    router.post("/note/:space/metadata/:metadataId", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNotesByMetadataValue));
    router.post("/note/:space/browse", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.browseNotes));
    router.get("/note/:space/dictionary", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNoteDictionary));
    router.get("/note/:space/recently-created", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getRecentlyCreatedNote));
    router.post("/note/:space/brainstorm", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.brainstormUsingAi));
    router.get("/note/:space/id/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNoteById));
    router.get("/note/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNoteByReference));
    router.delete("/note/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteNote));
    router.post("/note/:space/delete/byreference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteNoteByReferenceList));
    router.delete("/note/:space/reference/:reference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteNoteByReference));
};


/***/ }),

/***/ "./src/modules/note/service.ts":
/*!*************************************!*\
  !*** ./src/modules/note/service.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.brainstormUsingAi = exports.deleteNoteByReferenceList = exports.deleteNoteByReference = exports.deleteNote = exports.browseNotes = exports.getNotesByMetadataValue = exports.searchNote = exports.getNoteByReference = exports.getNoteById = exports.getRecentlyCreatedNote = exports.getNoteDictionary = exports.getNote = exports.createNote = exports.updateNote = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/note/helper.ts"));
var updateNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateNote(req.params.space, req.query.reload, req.body, userId)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.updateNote = updateNote;
var createNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.createNote(req.params.space, req.query.reload, req.body, userId)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.createNote = createNote;
var getNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, noteList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNote(req.params.space)];
            case 1:
                noteList = _a.sent();
                res.status(200);
                res.send(noteList);
                res.end();
                return [2];
        }
    });
}); };
exports.getNote = getNote;
var getNoteDictionary = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, noteList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNoteDictionary(req.params.space)];
            case 1:
                noteList = _a.sent();
                res.status(200);
                res.send(noteList);
                res.end();
                return [2];
        }
    });
}); };
exports.getNoteDictionary = getNoteDictionary;
var getRecentlyCreatedNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, noteList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getRecentlyCreatedNote(req.params.space)];
            case 1:
                noteList = _a.sent();
                res.status(200);
                res.send(noteList);
                res.end();
                return [2];
        }
    });
}); };
exports.getRecentlyCreatedNote = getRecentlyCreatedNote;
var getNoteById = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNoteById(req.params.space, req.params.id)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.getNoteById = getNoteById;
var getNoteByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNoteByReference(req.params.space, req.params.reference)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.getNoteByReference = getNoteByReference;
var searchNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.searchNote(req.params.space, req.body.text, req.body.textList, req.body.searchPref)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.searchNote = searchNote;
var getNotesByMetadataValue = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNotesByMetadataValue(req.params.space, req.params.metadataId, req.body)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.getNotesByMetadataValue = getNotesByMetadataValue;
var browseNotes = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, note;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.browseNotes(req.params.space, req.body)];
            case 1:
                note = _a.sent();
                res.status(200);
                res.send(note);
                res.end();
                return [2];
        }
    });
}); };
exports.browseNotes = browseNotes;
var deleteNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteNote(req.params.space, req.params.id)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteNote = deleteNote;
var deleteNoteByReference = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteNoteByReference(req.params.space, req.params.reference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteNoteByReference = deleteNoteByReference;
var deleteNoteByReferenceList = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteNoteByReferenceList(req.params.space, req.body)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteNoteByReferenceList = deleteNoteByReferenceList;
var brainstormUsingAi = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, text;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.brainstormUsingAi(req.params.space, req.body)];
            case 1:
                text = _a.sent();
                res.status(200);
                res.send({ text: text });
                res.end();
                return [2];
        }
    });
}); };
exports.brainstormUsingAi = brainstormUsingAi;


/***/ }),

/***/ "./src/modules/note/tag/helper.ts":
/*!****************************************!*\
  !*** ./src/modules/note/tag/helper.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addTagsForNoteRef = exports.deleteByNoteRef = exports.getTag = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/note/tag/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var getTag = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteTagCollection, model_1.noteTagSchema);
                return [4, model.find()];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getTag = getTag;
var deleteByNoteRef = function (space, noteRef) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteTagCollection, model_1.noteTagSchema);
                return [4, model.deleteMany({ noteRef: noteRef })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteByNoteRef = deleteByNoteRef;
var addTagsForNoteRef = function (space, noteRef, tags) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.noteTagCollection, model_1.noteTagSchema);
                data = [];
                tags.forEach(function (name) {
                    data.push({
                        name: name.replace("#", ""),
                        noteRef: noteRef,
                    });
                });
                return [4, model.insertMany(data)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.addTagsForNoteRef = addTagsForNoteRef;


/***/ }),

/***/ "./src/modules/note/tag/model.ts":
/*!***************************************!*\
  !*** ./src/modules/note/tag/model.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.noteTagCollection = exports.noteTagSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var noteTagSchema = new Schema({
    name: { type: String },
    noteRef: { type: String },
}, { timestamps: true });
exports.noteTagSchema = noteTagSchema;
var noteTagCollection = "note.tag";
exports.noteTagCollection = noteTagCollection;


/***/ }),

/***/ "./src/modules/note/tag/route.ts":
/*!***************************************!*\
  !*** ./src/modules/note/tag/route.ts ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/note/tag/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/note/tag/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getTag));
};


/***/ }),

/***/ "./src/modules/note/tag/service.ts":
/*!*****************************************!*\
  !*** ./src/modules/note/tag/service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTag = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/note/tag/helper.ts"));
var selfRealm = 100;
var getTag = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, tagList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getTag(req.params.space)];
            case 1:
                tagList = _a.sent();
                res.status(200);
                res.send(tagList);
                res.end();
                return [2];
        }
    });
}); };
exports.getTag = getTag;


/***/ }),

/***/ "./src/modules/notelink/auto/helper.ts":
/*!*********************************************!*\
  !*** ./src/modules/notelink/auto/helper.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteNotelinkByReferenceList = exports.deleteNotelinkByReference = exports.getNotelinkAutoByNoteRef = exports.getNotelinkAuto = void 0;
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/notelink/auto/model.ts");
var getCollection = (__webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var getNotelinkAuto = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkAutoCollection, model_1.notelinkAutoSchema);
                return [4, model.find()];
            case 1:
                data = _a.sent();
                return [2, data];
        }
    });
}); };
exports.getNotelinkAuto = getNotelinkAuto;
var getNotelinkAutoByNoteRef = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkAutoCollection, model_1.notelinkAutoSchema);
                return [4, model.find({
                        $or: [{ sourceNoteRef: reference }, { linkedNoteRef: reference }],
                    })];
            case 1:
                data = _a.sent();
                return [2, data];
        }
    });
}); };
exports.getNotelinkAutoByNoteRef = getNotelinkAutoByNoteRef;
var deleteNotelinkByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkAutoCollection, model_1.notelinkAutoSchema);
                return [4, model.deleteMany({
                        $or: [{ sourceNoteRef: reference }, { linkedNoteRef: reference }],
                    })];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
exports.deleteNotelinkByReference = deleteNotelinkByReference;
var deleteNotelinkByReferenceList = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkAutoCollection, model_1.notelinkAutoSchema);
                return [4, model.deleteMany({
                        $or: [
                            { sourceNoteRef: { $in: reference } },
                            { linkedNoteRef: { $in: reference } },
                        ],
                    })];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
exports.deleteNotelinkByReferenceList = deleteNotelinkByReferenceList;


/***/ }),

/***/ "./src/modules/notelink/auto/model.ts":
/*!********************************************!*\
  !*** ./src/modules/notelink/auto/model.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.notelinkAutoCollection = exports.notelinkAutoSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var notelinkAutoSchema = new Schema({
    sourceNoteRef: { type: String },
    linkedNoteRef: { type: String },
    count: { type: Number },
}, { timestamps: true });
exports.notelinkAutoSchema = notelinkAutoSchema;
var notelinkAutoCollection = "notelink.auto";
exports.notelinkAutoCollection = notelinkAutoCollection;


/***/ }),

/***/ "./src/modules/notelink/auto/route.ts":
/*!********************************************!*\
  !*** ./src/modules/notelink/auto/route.ts ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/notelink/auto/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/notelink-auto/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNotelinkAuto));
};


/***/ }),

/***/ "./src/modules/notelink/auto/service.ts":
/*!**********************************************!*\
  !*** ./src/modules/notelink/auto/service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNotelinkAuto = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/notelink/auto/helper.ts"));
var getNotelinkAuto = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, notelinkAutoList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNotelinkAuto(req.params.space)];
            case 1:
                notelinkAutoList = _a.sent();
                res.status(200);
                res.send(notelinkAutoList);
                res.end();
                return [2];
        }
    });
}); };
exports.getNotelinkAuto = getNotelinkAuto;


/***/ }),

/***/ "./src/modules/notelink/helper.ts":
/*!****************************************!*\
  !*** ./src/modules/notelink/helper.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteNotelinkByReferenceList = exports.deleteNotelinkByReference = exports.deleteNotelink = exports.saveNotelink = exports.addLinksForSourceNoteRef = exports.deleteBySourceNoteRef = exports.getBacklinksByReference = exports.getNotelinkOld = exports.getNotelinkByReference = exports.getNotelink = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/notelink/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var NoteHelper = __importStar(__webpack_require__(/*! ../note/helper */ "./src/modules/note/helper.ts"));
var getNotelink = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.find()];
            case 1:
                data = _a.sent();
                return [2, data];
        }
    });
}); };
exports.getNotelink = getNotelink;
var getNotelinkByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.find({
                        $or: [{ sourceNoteRef: reference }, { linkedNoteRef: reference }],
                    })];
            case 1:
                data = _a.sent();
                return [2, data];
        }
    });
}); };
exports.getNotelinkByReference = getNotelinkByReference;
var getNotelinkOld = function (space, noteref, depth) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data, _nearestLinks;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.find()];
            case 1:
                data = _a.sent();
                if (!noteref || !depth) {
                    return [2, data];
                }
                _nearestLinks = _getNearestLinks(data, [noteref], parseInt(depth));
                return [2, _nearestLinks];
        }
    });
}); };
exports.getNotelinkOld = getNotelinkOld;
var _getNearestLinks = function (data, noteref, depth) {
    var nearestLinks = data.filter(function (item) {
        return noteref.includes(item.sourceNoteRef) ||
            noteref.includes(item.linkedNoteRef);
    });
    if (depth === 1) {
        return nearestLinks;
    }
    var nextNoteRef = [];
    nearestLinks.forEach(function (item) {
        nextNoteRef.push(item.sourceNoteRef);
        nextNoteRef.push(item.linkedNoteRef);
    });
    return __spreadArray(__spreadArray([], nearestLinks, true), _getNearestLinks(data, (0, lodash_1.uniq)(nextNoteRef), depth - 1), true);
};
var getBacklinksByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model, backlinks, linkedNoteRefList, noteList, noteMap, backlinkDetailList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.find({ linkedNoteRef: reference })];
            case 1:
                backlinks = _a.sent();
                linkedNoteRefList = [];
                if (backlinks.length === 0) {
                    return [2, []];
                }
                backlinks.forEach(function (item) {
                    linkedNoteRefList.push(item.sourceNoteRef);
                });
                return [4, NoteHelper.getNotesByReferenceList(space, linkedNoteRefList)];
            case 2:
                noteList = _a.sent();
                noteMap = {};
                noteList.forEach(function (item) {
                    noteMap[item.reference] = item;
                });
                backlinkDetailList = [];
                backlinks.forEach(function (item) {
                    if (noteMap[item.sourceNoteRef]) {
                        backlinkDetailList.push(__assign(__assign({}, item._doc), { sourceNote: noteMap[item.sourceNoteRef] }));
                    }
                });
                return [2, backlinkDetailList];
        }
    });
}); };
exports.getBacklinksByReference = getBacklinksByReference;
var deleteBySourceNoteRef = function (space, sourceNoteRef) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.deleteMany({ sourceNoteRef: sourceNoteRef })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteBySourceNoteRef = deleteBySourceNoteRef;
var addLinksForSourceNoteRef = function (space, sourceNoteRef, linkedNoteRefList) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                data = [];
                linkedNoteRefList.forEach(function (linkedNoteRef) {
                    data.push({
                        sourceNoteRef: sourceNoteRef,
                        linkedNoteRef: linkedNoteRef,
                    });
                });
                return [4, model.insertMany(data)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.addLinksForSourceNoteRef = addLinksForSourceNoteRef;
var saveNotelink = function (space, sourceNoteRef, linkedNoteRef) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.create({
                        sourceNoteRef: sourceNoteRef,
                        linkedNoteRef: linkedNoteRef,
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.saveNotelink = saveNotelink;
var deleteNotelink = function (space, sourceNoteRef, linkedNoteRef) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.deleteMany({
                        sourceNoteRef: sourceNoteRef,
                        linkedNoteRef: linkedNoteRef,
                    })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.deleteNotelink = deleteNotelink;
var deleteNotelinkByReference = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.deleteMany({
                        $or: [{ sourceNoteRef: reference }, { linkedNoteRef: reference }],
                    })];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
exports.deleteNotelinkByReference = deleteNotelinkByReference;
var deleteNotelinkByReferenceList = function (space, reference) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.notelinkCollection, model_1.notelinkSchema);
                return [4, model.deleteMany({
                        $or: [
                            { sourceNoteRef: { $in: reference } },
                            { linkedNoteRef: { $in: reference } },
                        ],
                    })];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
exports.deleteNotelinkByReferenceList = deleteNotelinkByReferenceList;


/***/ }),

/***/ "./src/modules/notelink/model.ts":
/*!***************************************!*\
  !*** ./src/modules/notelink/model.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.notelinkCollection = exports.notelinkSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var notelinkSchema = new Schema({
    sourceNoteRef: { type: String },
    linkedNoteRef: { type: String },
}, { timestamps: true });
exports.notelinkSchema = notelinkSchema;
var notelinkCollection = "notelink";
exports.notelinkCollection = notelinkCollection;


/***/ }),

/***/ "./src/modules/notelink/route.ts":
/*!***************************************!*\
  !*** ./src/modules/notelink/route.ts ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/notelink/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.get("/notelink/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getNotelink));
    router.post("/notelink/:space/:sourceReference/:linkedReference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.saveNotelink));
    router.delete("/notelink/:space/:sourceReference/:linkedReference", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteNotelink));
};


/***/ }),

/***/ "./src/modules/notelink/service.ts":
/*!*****************************************!*\
  !*** ./src/modules/notelink/service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteNotelink = exports.saveNotelink = exports.getNotelink = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/notelink/helper.ts"));
var selfRealm = 100;
var getNotelink = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, notelinkList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getNotelink(req.params.space)];
            case 1:
                notelinkList = _a.sent();
                res.status(200);
                res.send(notelinkList);
                res.end();
                return [2];
        }
    });
}); };
exports.getNotelink = getNotelink;
var saveNotelink = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.saveNotelink(req.params.space, req.params.sourceReference, req.params.linkedReference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.saveNotelink = saveNotelink;
var deleteNotelink = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, outcome;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.deleteNotelink(req.params.space, req.params.sourceReference, req.params.linkedReference)];
            case 1:
                outcome = _a.sent();
                res.status(200);
                res.send(outcome);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteNotelink = deleteNotelink;


/***/ }),

/***/ "./src/modules/permission/helper.ts":
/*!******************************************!*\
  !*** ./src/modules/permission/helper.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addRole = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var ONEAUTH_API_KEY = process.env.ONEAUTH_API_KEY || "1d9524a6-30df-4b3c-9402-503f4011896c";
var addRole = function (email, companyId) { return __awaiter(void 0, void 0, void 0, function () {
    var response, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                response = null;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.post("".concat(ONEAUTH_API, "/212/admin/permission"), {
                        action: "ADD",
                        userEmail: email,
                        roleName: "COMPANY_ADMIN",
                        scope: companyId
                    }, {
                        headers: {
                            authorization: ONEAUTH_API_KEY,
                        },
                    })];
            case 2:
                response = _a.sent();
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                return [2, {}];
            case 4:
                if (response.status === 200) {
                    return [2, response.data || null];
                }
                return [2, null];
        }
    });
}); };
exports.addRole = addRole;


/***/ }),

/***/ "./src/modules/report/book_helper.ts":
/*!*******************************************!*\
  !*** ./src/modules/report/book_helper.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateReportForBook = void 0;
var BookHelper = __importStar(__webpack_require__(/*! ../book/helper */ "./src/modules/book/helper.ts"));
var BookSectionHelper = __importStar(__webpack_require__(/*! ../book/section/helper */ "./src/modules/book/section/helper.ts"));
var BookSectiondetailHelper = __importStar(__webpack_require__(/*! ../book/sectiondetail/helper */ "./src/modules/book/sectiondetail/helper.ts"));
var DateUtils_1 = __webpack_require__(/*! ../../lib/DateUtils */ "./src/lib/DateUtils.ts");
var SECTION_TYPE_MAP = {
    summary: "",
    themes: "Key themes and ideas",
    alternate_takes: "Alternate perspectives",
    purpose: "Thematic Significance",
};
var ejs = __webpack_require__(/*! ejs */ "ejs");
var jszip = __webpack_require__(/*! jszip */ "jszip");
var _get_template_path = function (name) {
    return process.cwd() + name;
};
var _get_zip_file = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var zip;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                zip = new jszip();
                zip.file("index.html", data);
                return [4, zip.generateAsync({ type: "base64", compression: "DEFLATE" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
var generateReportForBook = function (space, bookref) { return __awaiter(void 0, void 0, void 0, function () {
    var book, bookSections, bookSectionMap, bookSectiondetailMap, i, bookSectiondetails, data, html;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.getBookByReference(space, bookref)];
            case 1:
                book = _a.sent();
                if (!book) {
                    return [2, "Book not found"];
                }
                return [4, BookSectionHelper.getBookSectionsByBookReference(space, bookref)];
            case 2:
                bookSections = _a.sent();
                bookSectionMap = {};
                bookSectiondetailMap = {};
                i = 0;
                _a.label = 3;
            case 3:
                if (!(i < bookSections.length)) return [3, 6];
                bookSectionMap[bookSections[i].reference] = bookSections[i];
                return [4, BookSectiondetailHelper.getDetailsByBookReference(space, bookref, bookSections[i].reference)];
            case 4:
                bookSectiondetails = _a.sent();
                bookSectiondetailMap[bookSections[i].reference] = bookSectiondetails.map(function (item) { return (__assign(__assign({}, item._doc), { type: SECTION_TYPE_MAP[item._doc.type] })); });
                console.log(bookSectiondetails.map(function (item) { return (__assign(__assign({}, item), { type: SECTION_TYPE_MAP[item.type] })); }));
                _a.label = 5;
            case 5:
                i++;
                return [3, 3];
            case 6:
                data = {
                    book: book,
                    bookSections: bookSections,
                    bookSectiondetailMap: bookSectiondetailMap,
                    createdAt: (0, DateUtils_1.formatDateText)(book.createdAt, DateUtils_1.FORMAT_FULL_DATE),
                };
                return [4, ejs.renderFile(_get_template_path("/src/templates/book/template.ejs"), data)];
            case 7:
                html = _a.sent();
                return [2, _get_zip_file(html)];
        }
    });
}); };
exports.generateReportForBook = generateReportForBook;
var _generateReportForSectiondetail = function (booksectiondetail) { return __awaiter(void 0, void 0, void 0, function () {
    var data, html;
    return __generator(this, function (_a) {
        data = {
            title: booksectiondetail.name,
            summary: booksectiondetail.summary,
            content: booksectiondetail.content,
            keywords: booksectiondetail.keywords,
            createdAt: (0, DateUtils_1.formatDateText)(booksectiondetail.createdAt, DateUtils_1.FORMAT_FULL_DATE),
        };
        html = ejs.renderFile(_get_template_path("/src/templates/book/partials/template_sectiondetail.ejs"), data);
        return [2, html];
    });
}); };


/***/ }),

/***/ "./src/modules/report/note_helper.ts":
/*!*******************************************!*\
  !*** ./src/modules/report/note_helper.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateReportForNoteRef = exports.generateReportForNote = exports.generateReport = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var MetadataDefinitionHelper = __importStar(__webpack_require__(/*! ../metadata/definition/helper */ "./src/modules/metadata/definition/helper.ts"));
var NoteLinkHelper = __importStar(__webpack_require__(/*! ../notelink/helper */ "./src/modules/notelink/helper.ts"));
var NoteLinkAutoHelper = __importStar(__webpack_require__(/*! ../notelink/auto/helper */ "./src/modules/notelink/auto/helper.ts"));
var NoteHelper = __importStar(__webpack_require__(/*! ../note/helper */ "./src/modules/note/helper.ts"));
var Utils_1 = __webpack_require__(/*! ../../lib/Utils */ "./src/lib/Utils.ts");
var DateUtils_1 = __webpack_require__(/*! ../../lib/DateUtils */ "./src/lib/DateUtils.ts");
var ejs = __webpack_require__(/*! ejs */ "ejs");
var jszip = __webpack_require__(/*! jszip */ "jszip");
var _get_template_path = function (name) {
    return process.cwd() + name;
};
var _get_zip_file = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var zip;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                zip = new jszip();
                zip.file("index.html", data);
                return [4, zip.generateAsync({ type: "base64", compression: "DEFLATE" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
var generateReport = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var noteList, metadataDefinitionList, html, i, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, NoteHelper.getNote(space)];
            case 1:
                noteList = _c.sent();
                return [4, MetadataDefinitionHelper.getMetadataDefinition(space)];
            case 2:
                metadataDefinitionList = _c.sent();
                html = "";
                i = 0;
                _c.label = 3;
            case 3:
                if (!(i < noteList.length)) return [3, 7];
                _a = html;
                return [4, (0, exports.generateReportForNote)(space, noteList[i].reference, metadataDefinitionList)];
            case 4:
                html = _a + _c.sent();
                _b = html;
                return [4, ejs.renderFile(_get_template_path("/src/templates/note/partials/template_pagebreak.ejs"), {})];
            case 5:
                html = _b + _c.sent();
                _c.label = 6;
            case 6:
                i++;
                return [3, 3];
            case 7: return [2, _get_zip_file(html)];
        }
    });
}); };
exports.generateReport = generateReport;
var generateReportForNote = function (space, reference, metadataDefinitionList) { return __awaiter(void 0, void 0, void 0, function () {
    var note, _metadataDefinitionList, data, html, notelinks, notelinksAuto, _a, i, linkedNoteRef, refNote, _b, i, linkedNoteRef, refNote;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, NoteHelper.getNoteByReference(space, reference)];
            case 1:
                note = _c.sent();
                if (!note) {
                    return [2, "Note not found"];
                }
                _metadataDefinitionList = metadataDefinitionList;
                if (!!_metadataDefinitionList) return [3, 3];
                return [4, MetadataDefinitionHelper.getMetadataDefinition(space)];
            case 2:
                _metadataDefinitionList =
                    _c.sent();
                _c.label = 3;
            case 3:
                data = {
                    title: note.name,
                    summary: note.summary,
                    content: note.content.replace(/<p>​<\/p>/gi, ""),
                    keywords: note.keywords,
                    labels: [],
                    createdAt: (0, DateUtils_1.formatDateText)(note.createdAt, DateUtils_1.FORMAT_FULL_DATE),
                };
                if (!(0, Utils_1.isEmptyOrSpaces)(note.primaryLabel)) {
                    data.labels = __spreadArray([
                        note.primaryLabel
                    ], note.labels.filter(function (item) { return item !== note.primaryLabel; }), true);
                }
                return [4, ejs.renderFile(_get_template_path("/src/templates/note/template_note.ejs"), data)];
            case 4:
                html = _c.sent();
                return [4, NoteLinkHelper.getNotelinkByReference(space, reference)];
            case 5:
                notelinks = _c.sent();
                return [4, NoteLinkAutoHelper.getNotelinkAutoByNoteRef(space, reference)];
            case 6:
                notelinksAuto = _c.sent();
                if (!(notelinks.length > 0)) return [3, 8];
                _a = html;
                return [4, ejs.renderFile(_get_template_path("/src/templates/note/partials/template_section_title.ejs"), { title: "References" })];
            case 7:
                html = _a + _c.sent();
                _c.label = 8;
            case 8:
                i = 0;
                _c.label = 9;
            case 9:
                if (!(i < notelinks.length)) return [3, 12];
                linkedNoteRef = notelinks[i].linkedNoteRef;
                if (linkedNoteRef === reference) {
                    linkedNoteRef = notelinks[i].sourceNoteRef;
                }
                return [4, (0, exports.generateReportForNoteRef)(space, linkedNoteRef, null, _metadataDefinitionList)];
            case 10:
                refNote = _c.sent();
                html += refNote;
                _c.label = 11;
            case 11:
                i++;
                return [3, 9];
            case 12:
                if (!(notelinksAuto.length > 0)) return [3, 14];
                _b = html;
                return [4, ejs.renderFile(_get_template_path("/src/templates/note/partials/template_section_title.ejs"), { title: "Auto linked References" })];
            case 13:
                html = _b + _c.sent();
                _c.label = 14;
            case 14:
                i = 0;
                _c.label = 15;
            case 15:
                if (!(i < notelinksAuto.length)) return [3, 18];
                linkedNoteRef = notelinksAuto[i].linkedNoteRef;
                if (linkedNoteRef === reference) {
                    linkedNoteRef = notelinksAuto[i].sourceNoteRef;
                }
                return [4, (0, exports.generateReportForNoteRef)(space, linkedNoteRef, note._doc.keywords, _metadataDefinitionList)];
            case 16:
                refNote = _c.sent();
                html += refNote;
                _c.label = 17;
            case 17:
                i++;
                return [3, 15];
            case 18: return [2, _get_zip_file(html)];
        }
    });
}); };
exports.generateReportForNote = generateReportForNote;
var generateReportForNoteRef = function (space, reference, sourceKeywords, metadataDefinitionList) { return __awaiter(void 0, void 0, void 0, function () {
    var note, data, metadata, html;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, NoteHelper.getNoteByReference(space, reference)];
            case 1:
                note = _a.sent();
                data = {
                    title: note.name,
                    summary: note.summary,
                    content: note.content,
                    keywords: note.keywords,
                    createdAt: (0, DateUtils_1.formatDateText)(note.createdAt, DateUtils_1.FORMAT_FULL_DATE),
                };
                metadata = [];
                metadataDefinitionList.forEach(function (item) {
                    metadata.push({
                        name: "".concat(item._doc.group, " | ").concat(item._doc.name),
                        value: note._doc[item._doc._id],
                    });
                });
                data.metadata = metadata;
                if (!(0, Utils_1.isEmptyOrSpaces)(note.primaryLabel)) {
                    data.labels = __spreadArray([
                        note.primaryLabel
                    ], note.labels.filter(function (item) { return item !== note.primaryLabel; }), true);
                }
                data.keywords = (0, lodash_1.intersection)(sourceKeywords, note._doc.keywords);
                html = ejs.renderFile(_get_template_path("/src/templates/note/partials/template_noteref.ejs"), data);
                return [2, html];
        }
    });
}); };
exports.generateReportForNoteRef = generateReportForNoteRef;


/***/ }),

/***/ "./src/modules/report/route.ts":
/*!*************************************!*\
  !*** ./src/modules/report/route.ts ***!
  \*************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/report/service.ts");
module.exports = function (router) {
    router.get("/report/:space/:noteRef", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateReportForNote));
    router.get("/report/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateReport));
    router.get("/report/book/:space/:bookref", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.generateReportForBook));
};


/***/ }),

/***/ "./src/modules/report/service.ts":
/*!***************************************!*\
  !*** ./src/modules/report/service.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateReportForBook = exports.generateReport = exports.generateReportForNote = void 0;
var NoteHelper = __importStar(__webpack_require__(/*! ./note_helper */ "./src/modules/report/note_helper.ts"));
var BookHelper = __importStar(__webpack_require__(/*! ./book_helper */ "./src/modules/report/book_helper.ts"));
var generateReportForNote = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var report;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, NoteHelper.generateReportForNote(req.params.space, req.params.noteRef)];
            case 1:
                report = _a.sent();
                res.status(200);
                res.send(report);
                res.end();
                return [2];
        }
    });
}); };
exports.generateReportForNote = generateReportForNote;
var generateReport = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var report;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, NoteHelper.generateReport(req.params.space)];
            case 1:
                report = _a.sent();
                res.status(200);
                res.send(report);
                res.end();
                return [2];
        }
    });
}); };
exports.generateReport = generateReport;
var generateReportForBook = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var report;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, BookHelper.generateReportForBook(req.params.space, req.params.bookref)];
            case 1:
                report = _a.sent();
                res.status(200);
                res.send(report);
                res.end();
                return [2];
        }
    });
}); };
exports.generateReportForBook = generateReportForBook;


/***/ }),

/***/ "./src/modules/sequence/service.ts":
/*!*****************************************!*\
  !*** ./src/modules/sequence/service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resetval = exports.nextval = exports.create_sequence = void 0;
var _a = __webpack_require__(/*! ./model */ "./src/modules/sequence/model.js"), sequenceCollection = _a.sequenceCollection, sequenceSchema = _a.sequenceSchema;
var _b = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts"), getGlobalCollection = _b.getGlobalCollection, getCollection = _b.getCollection;
var create_sequence = function (field, context, factor, space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, existing_sequence;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (space) {
                    model = getCollection(space, sequenceCollection, sequenceSchema);
                }
                else {
                    model = getGlobalCollection(sequenceCollection, sequenceSchema);
                }
                return [4, model.findOne({ field: field, context: context })];
            case 1:
                existing_sequence = _a.sent();
                if (existing_sequence) {
                    return [2, existing_sequence];
                }
                return [4, model.findOneAndUpdate({ field: field, context: context }, { field: field, context: context, factor: factor, nextval: 1 }, { upsert: true, new: true })];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.create_sequence = create_sequence;
var nextval = function (field, context, space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, sequence;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (space) {
                    model = getCollection(space, sequenceCollection, sequenceSchema);
                }
                else {
                    model = getGlobalCollection(sequenceCollection, sequenceSchema);
                }
                return [4, model.findOne({ field: field, context: context })];
            case 1:
                sequence = _a.sent();
                if (!!sequence) return [3, 4];
                return [4, (0, exports.create_sequence)(field, context || null, 1, space)];
            case 2:
                _a.sent();
                return [4, model.findOne({ field: field, context: context })];
            case 3:
                sequence = _a.sent();
                _a.label = 4;
            case 4: return [4, model.findOneAndUpdate({ field: field, context: context }, { nextval: sequence.nextval + sequence.factor }, { upsert: true, new: true })];
            case 5:
                _a.sent();
                return [2, sequence.nextval];
        }
    });
}); };
exports.nextval = nextval;
var resetval = function (value, field, context, space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, sequence;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (space) {
                    model = getCollection(space, sequenceCollection, sequenceSchema);
                }
                else {
                    model = getGlobalCollection(sequenceCollection, sequenceSchema);
                }
                return [4, model.findOne({ field: field, context: context })];
            case 1:
                sequence = _a.sent();
                if (!!sequence) return [3, 4];
                return [4, (0, exports.create_sequence)(field, context || null, 1, space)];
            case 2:
                _a.sent();
                return [4, model.findOne({ field: field, context: context })];
            case 3:
                sequence = _a.sent();
                _a.label = 4;
            case 4: return [4, model.findOneAndUpdate({ field: field, context: context }, { nextval: value }, { upsert: true, new: true })];
            case 5:
                _a.sent();
                return [2];
        }
    });
}); };
exports.resetval = resetval;


/***/ }),

/***/ "./src/modules/session/index.ts":
/*!**************************************!*\
  !*** ./src/modules/session/index.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolvers = exports.typeDefs = void 0;
var jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ "jsonwebtoken"));
var apollo_server_express_1 = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/session/model.ts");
var model_2 = __webpack_require__(/*! ../user/model */ "./src/modules/user/model.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://127.0.0.1:8020";
var typeDefs = (0, apollo_server_express_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  extend type Query {\n    session(id: ID!, space: String): UserSession\n  }\n\n  type Session {\n    id: ID!\n    sessionId: String!\n    token: String!\n  }\n\n  type UserSession {\n    id: ID!\n    firstName: String\n    lastName: String\n    email: String\n    token: String\n  }\n"], ["\n  extend type Query {\n    session(id: ID!, space: String): UserSession\n  }\n\n  type Session {\n    id: ID!\n    sessionId: String!\n    token: String!\n  }\n\n  type UserSession {\n    id: ID!\n    firstName: String\n    lastName: String\n    email: String\n    token: String\n  }\n"])));
exports.typeDefs = typeDefs;
var oaSession = function (space, id) { return __awaiter(void 0, void 0, void 0, function () {
    var response, user, model, data, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, , 6]);
                return [4, axios.get("".concat(ONEAUTH_API, "/auth/space/").concat(space, "/session/").concat(id))];
            case 1:
                response = _a.sent();
                if (!(response.status === 200)) return [3, 3];
                user = jsonwebtoken_1.default.verify(response.data.token, "jwtsecret");
                model = getCollection(space, model_2.userCollection, model_2.userSchema);
                return [4, model.findByIdAndUpdate(user.userId, __assign(__assign({}, user), { resolver: "oneauth_space" }), { new: true, upsert: true })];
            case 2:
                data = _a.sent();
                if (data) {
                    return [2, {
                            id: data._id,
                            firstName: data.firstName,
                            lastName: data.lastName,
                            email: data.email,
                            token: response.data.token,
                        }];
                }
                else {
                    return [2, null];
                }
                return [3, 4];
            case 3: return [2, null];
            case 4: return [3, 6];
            case 5:
                error_1 = _a.sent();
                return [2, null];
            case 6: return [2];
        }
    });
}); };
var emailOrExternSession = function (space, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var model, session, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.sessionCollection, model_1.sessionSchema);
                return [4, model.findOne({ sessionId: sessionId })];
            case 1:
                session = _a.sent();
                if (!session) {
                    return [2, null];
                }
                return [4, jsonwebtoken_1.default.verify(session.token, "jwtsecret")];
            case 2:
                data = _a.sent();
                if (!data) {
                    return [2, null];
                }
                return [2, {
                        id: data.userId,
                        firstName: data.firstName,
                        lastName: data.lastName,
                        email: data.email,
                        token: session.token,
                    }];
        }
    });
}); };
var resolvers = {
    Query: {
        session: function (_1, _a) { return __awaiter(void 0, [_1, _a], void 0, function (_, _b) {
            var id = _b.id, space = _b.space;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, oaSession(space, id)];
                    case 1: return [2, _c.sent()];
                }
            });
        }); },
    },
};
exports.resolvers = resolvers;
var templateObject_1;


/***/ }),

/***/ "./src/modules/session/model.ts":
/*!**************************************!*\
  !*** ./src/modules/session/model.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sessionCollection = exports.sessionSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var sessionSchema = new Schema({
    sessionId: { type: String },
    token: { type: String },
    type: { type: String },
}, { timestamps: true });
exports.sessionSchema = sessionSchema;
var sessionCollection = "session";
exports.sessionCollection = sessionCollection;


/***/ }),

/***/ "./src/modules/stopwords/helper.ts":
/*!*****************************************!*\
  !*** ./src/modules/stopwords/helper.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resetStopwords = exports.deleteStopword = exports.getStopwords = exports.toggleStopword = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/stopwords/model.ts");
var stopwords_1 = __webpack_require__(/*! ./stopwords */ "./src/modules/stopwords/stopwords.ts");
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var toggleStopword = function (space, payload) { return __awaiter(void 0, void 0, void 0, function () {
    var _text, model, response, existingData;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _text = payload.text.toLowerCase();
                model = getCollection(space, model_1.stopwordsCollection, model_1.stopwordsSchema);
                response = null;
                return [4, model.find({ text: _text })];
            case 1:
                existingData = _a.sent();
                if (!(existingData.length > 0)) return [3, 3];
                return [4, model.findOneAndUpdate({ text: _text }, { enabled: !existingData[0].enabled }, { new: true, upsert: true })];
            case 2:
                response = _a.sent();
                return [3, 5];
            case 3: return [4, model.create({
                    text: _text, enabled: true
                })];
            case 4:
                response = _a.sent();
                _a.label = 5;
            case 5: return [4, (0, exports.getStopwords)(space)];
            case 6: return [2, _a.sent()];
        }
    });
}); };
exports.toggleStopword = toggleStopword;
var getStopwords = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.stopwordsCollection, model_1.stopwordsSchema);
                return [4, model.find().sort({ text: "ascending" })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getStopwords = getStopwords;
var deleteStopword = function (space, _id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.stopwordsCollection, model_1.stopwordsSchema);
                return [4, model.deleteMany({ _id: _id })];
            case 1:
                _a.sent();
                return [4, (0, exports.getStopwords)(space)];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.deleteStopword = deleteStopword;
var resetStopwords = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var model, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = getCollection(space, model_1.stopwordsCollection, model_1.stopwordsSchema);
                data = [];
                stopwords_1.BASE_STOPWORDS_EN.forEach(function (text) {
                    data.push({
                        text: text,
                        enabled: true
                    });
                });
                return [4, model.deleteMany({})];
            case 1:
                _a.sent();
                return [4, model.insertMany(data)];
            case 2:
                _a.sent();
                return [4, (0, exports.getStopwords)(space)];
            case 3: return [2, _a.sent()];
        }
    });
}); };
exports.resetStopwords = resetStopwords;


/***/ }),

/***/ "./src/modules/stopwords/model.ts":
/*!****************************************!*\
  !*** ./src/modules/stopwords/model.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stopwordsCollection = exports.stopwordsSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var stopwordsSchema = new Schema({
    text: { type: String },
    enabled: { type: Boolean }
}, { timestamps: true, minimize: false });
exports.stopwordsSchema = stopwordsSchema;
var stopwordsCollection = "stopwords";
exports.stopwordsCollection = stopwordsCollection;


/***/ }),

/***/ "./src/modules/stopwords/route.ts":
/*!****************************************!*\
  !*** ./src/modules/stopwords/route.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/stopwords/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.post("/stopwords/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.toggleStopword));
    router.post("/stopwords/:space/reset", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.resetStopwords));
    router.get("/stopwords/:space", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getStopwords));
    router.delete("/stopwords/:space/:id", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.deleteStopword));
};


/***/ }),

/***/ "./src/modules/stopwords/service.ts":
/*!******************************************!*\
  !*** ./src/modules/stopwords/service.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getStopwords = exports.deleteStopword = exports.resetStopwords = exports.toggleStopword = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/stopwords/helper.ts"));
var selfRealm = 100;
var toggleStopword = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var stopwords;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.toggleStopword(req.params.space, req.body)];
            case 1:
                stopwords = _a.sent();
                res.status(200);
                res.send(stopwords);
                res.end();
                return [2];
        }
    });
}); };
exports.toggleStopword = toggleStopword;
var resetStopwords = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var stopwords;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.resetStopwords(req.params.space)];
            case 1:
                stopwords = _a.sent();
                res.status(200);
                res.send(stopwords);
                res.end();
                return [2];
        }
    });
}); };
exports.resetStopwords = resetStopwords;
var deleteStopword = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.deleteStopword(req.params.space, req.params.id)];
            case 1:
                response = _a.sent();
                res.status(200);
                res.send(response);
                res.end();
                return [2];
        }
    });
}); };
exports.deleteStopword = deleteStopword;
var getStopwords = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var stopwords;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.getStopwords(req.params.space)];
            case 1:
                stopwords = _a.sent();
                res.status(200);
                res.send(stopwords);
                res.end();
                return [2];
        }
    });
}); };
exports.getStopwords = getStopwords;


/***/ }),

/***/ "./src/modules/stopwords/stopwords.ts":
/*!********************************************!*\
  !*** ./src/modules/stopwords/stopwords.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BASE_STOPWORDS_EN = void 0;
exports.BASE_STOPWORDS_EN = [
    'x',
    'y',
    'your',
    'yours',
    'yourself',
    'yourselves',
    'you',
    'yond',
    'yonder',
    'yon',
    'ye',
    'yet',
    'z',
    'zillion',
    'j',
    'u',
    'umpteen',
    'usually',
    'us',
    'username',
    'uponed',
    'upons',
    'uponing',
    'upon',
    'ups',
    'upping',
    'upped',
    'up',
    'unto',
    'until',
    'unless',
    'unlike',
    'unliker',
    'unlikest',
    'under',
    'underneath',
    'use',
    'used',
    'usedest',
    'r',
    'rath',
    'rather',
    'rathest',
    'rathe',
    're',
    'relate',
    'related',
    'relatively',
    'regarding',
    'really',
    'res',
    'respecting',
    'respectively',
    'q',
    'quite',
    'que',
    'qua',
    'n',
    'neither',
    'neaths',
    'neath',
    'nethe',
    'nethermost',
    'necessary',
    'necessariest',
    'necessarier',
    'never',
    'nevertheless',
    'nigh',
    'nighest',
    'nigher',
    'nine',
    'noone',
    'nobody',
    'nobodies',
    'nowhere',
    'nowheres',
    'no',
    'noes',
    'nor',
    'nos',
    'no-one',
    'none',
    'not',
    'notwithstanding',
    'nothings',
    'nothing',
    'nathless',
    'natheless',
    't',
    'ten',
    'tills',
    'till',
    'tilled',
    'tilling',
    'to',
    'towards',
    'toward',
    'towardest',
    'towarder',
    'together',
    'too',
    'thy',
    'thyself',
    'thus',
    'than',
    'that',
    'those',
    'thou',
    'though',
    'thous',
    'thouses',
    'thoroughest',
    'thorougher',
    'thorough',
    'thoroughly',
    'thru',
    'thruer',
    'thruest',
    'thro',
    'through',
    'throughout',
    'throughest',
    'througher',
    'thine',
    'this',
    'thises',
    'they',
    'thee',
    'the',
    'then',
    'thence',
    'thenest',
    'thener',
    'them',
    'themselves',
    'these',
    'therer',
    'there',
    'thereby',
    'therest',
    'thereafter',
    'therein',
    'thereupon',
    'therefore',
    'their',
    'theirs',
    'thing',
    'things',
    'three',
    'two',
    'o',
    'oh',
    'owt',
    'owning',
    'owned',
    'own',
    'owns',
    'others',
    'other',
    'otherwise',
    'otherwisest',
    'otherwiser',
    'of',
    'often',
    'oftener',
    'oftenest',
    'off',
    'offs',
    'offest',
    'one',
    'ought',
    'oughts',
    'our',
    'ours',
    'ourselves',
    'ourself',
    'out',
    'outest',
    'outed',
    'outwith',
    'outs',
    'outside',
    'over',
    'overallest',
    'overaller',
    'overalls',
    'overall',
    'overs',
    'or',
    'orer',
    'orest',
    'on',
    'oneself',
    'onest',
    'ons',
    'onto',
    'a',
    'atween',
    'at',
    'athwart',
    'atop',
    'afore',
    'afterward',
    'afterwards',
    'after',
    'afterest',
    'afterer',
    'ain',
    'an',
    'any',
    'anything',
    'anybody',
    'anyone',
    'anyhow',
    'anywhere',
    'anent',
    'anear',
    'and',
    'andor',
    'another',
    'around',
    'ares',
    'are',
    'aest',
    'aer',
    'against',
    'again',
    'accordingly',
    'abaft',
    'abafter',
    'abaftest',
    'abovest',
    'above',
    'abover',
    'abouter',
    'aboutest',
    'about',
    'aid',
    'amidst',
    'amid',
    'among',
    'amongst',
    'apartest',
    'aparter',
    'apart',
    'appeared',
    'appears',
    'appear',
    'appearing',
    'appropriating',
    'appropriate',
    'appropriatest',
    'appropriates',
    'appropriater',
    'appropriated',
    'already',
    'always',
    'also',
    'along',
    'alongside',
    'although',
    'almost',
    'all',
    'allest',
    'aller',
    'allyou',
    'alls',
    'albeit',
    'awfully',
    'as',
    'aside',
    'asides',
    'aslant',
    'ases',
    'astrider',
    'astride',
    'astridest',
    'astraddlest',
    'astraddler',
    'astraddle',
    'availablest',
    'availabler',
    'available',
    'aughts',
    'aught',
    'vs',
    'v',
    'variousest',
    'variouser',
    'various',
    'via',
    'vis-a-vis',
    'vis-a-viser',
    'vis-a-visest',
    'viz',
    'very',
    'veriest',
    'verier',
    'versus',
    'k',
    'g',
    'go',
    'gone',
    'good',
    'got',
    'gotta',
    'gotten',
    'get',
    'gets',
    'getting',
    'b',
    'by',
    'byandby',
    'by-and-by',
    'bist',
    'both',
    'but',
    'buts',
    'be',
    'beyond',
    'because',
    'became',
    'becomes',
    'become',
    'becoming',
    'becomings',
    'becominger',
    'becomingest',
    'behind',
    'behinds',
    'before',
    'beforehand',
    'beforehandest',
    'beforehander',
    'bettered',
    'betters',
    'better',
    'bettering',
    'betwixt',
    'between',
    'beneath',
    'been',
    'below',
    'besides',
    'beside',
    'm',
    'my',
    'myself',
    'mucher',
    'muchest',
    'much',
    'must',
    'musts',
    'musths',
    'musth',
    'main',
    'make',
    'mayest',
    'many',
    'mauger',
    'maugre',
    'me',
    'meanwhiles',
    'meanwhile',
    'mostly',
    'most',
    'moreover',
    'more',
    'might',
    'mights',
    'midst',
    'midsts',
    'h',
    'huh',
    'humph',
    'he',
    'hers',
    'herself',
    'her',
    'hereby',
    'herein',
    'hereafters',
    'hereafter',
    'hereupon',
    'hence',
    'hadst',
    'had',
    'having',
    'haves',
    'have',
    'has',
    'hast',
    'hardly',
    'hae',
    'hath',
    'him',
    'himself',
    'hither',
    'hitherest',
    'hitherer',
    'his',
    'how-do-you-do',
    'however',
    'how',
    'howbeit',
    'howdoyoudo',
    'hoos',
    'hoo',
    'w',
    'woulded',
    'woulding',
    'would',
    'woulds',
    'was',
    'wast',
    'we',
    'wert',
    'were',
    'with',
    'withal',
    'without',
    'within',
    'why',
    'what',
    'whatever',
    'whateverer',
    'whateverest',
    'whatsoeverer',
    'whatsoeverest',
    'whatsoever',
    'whence',
    'whencesoever',
    'whenever',
    'whensoever',
    'when',
    'whenas',
    'whether',
    'wheen',
    'whereto',
    'whereupon',
    'wherever',
    'whereon',
    'whereof',
    'where',
    'whereby',
    'wherewithal',
    'wherewith',
    'whereinto',
    'wherein',
    'whereafter',
    'whereas',
    'wheresoever',
    'wherefrom',
    'which',
    'whichever',
    'whichsoever',
    'whilst',
    'while',
    'whiles',
    'whithersoever',
    'whither',
    'whoever',
    'whosoever',
    'whoso',
    'whose',
    'whomever',
    's',
    'syne',
    'syn',
    'shalling',
    'shall',
    'shalled',
    'shalls',
    'shoulding',
    'should',
    'shoulded',
    'shoulds',
    'she',
    'sayyid',
    'sayid',
    'said',
    'saider',
    'saidest',
    'same',
    'samest',
    'sames',
    'samer',
    'saved',
    'sans',
    'sanses',
    'sanserifs',
    'sanserif',
    'so',
    'soer',
    'soest',
    'sobeit',
    'someone',
    'somebody',
    'somehow',
    'some',
    'somewhere',
    'somewhat',
    'something',
    'sometimest',
    'sometimes',
    'sometimer',
    'sometime',
    'several',
    'severaler',
    'severalest',
    'serious',
    'seriousest',
    'seriouser',
    'senza',
    'send',
    'sent',
    'seem',
    'seems',
    'seemed',
    'seemingest',
    'seeminger',
    'seemings',
    'seven',
    'summat',
    'sups',
    'sup',
    'supping',
    'supped',
    'such',
    'since',
    'sine',
    'sines',
    'sith',
    'six',
    'stop',
    'stopped',
    'p',
    'plaintiff',
    'plenty',
    'plenties',
    'please',
    'pleased',
    'pleases',
    'per',
    'perhaps',
    'particulars',
    'particularly',
    'particular',
    'particularest',
    'particularer',
    'pro',
    'providing',
    'provides',
    'provided',
    'provide',
    'probably',
    'l',
    'layabout',
    'layabouts',
    'latter',
    'latterest',
    'latterer',
    'latterly',
    'latters',
    'lots',
    'lotting',
    'lotted',
    'lot',
    'lest',
    'less',
    'ie',
    'ifs',
    'if',
    'i',
    'info',
    'information',
    'itself',
    'its',
    'it',
    'is',
    'idem',
    'idemer',
    'idemest',
    'immediate',
    'immediately',
    'immediatest',
    'immediater',
    'in',
    'inwards',
    'inwardest',
    'inwarder',
    'inward',
    'inasmuch',
    'into',
    'instead',
    'insofar',
    'indicates',
    'indicated',
    'indicate',
    'indicating',
    'indeed',
    'inc',
    'f',
    'fact',
    'facts',
    'fs',
    'figupon',
    'figupons',
    'figuponing',
    'figuponed',
    'few',
    'fewer',
    'fewest',
    'frae',
    'from',
    'failing',
    'failings',
    'five',
    'furthers',
    'furtherer',
    'furthered',
    'furtherest',
    'further',
    'furthering',
    'furthermore',
    'fourscore',
    'followthrough',
    'for',
    'forwhy',
    'fornenst',
    'formerly',
    'former',
    'formerer',
    'formerest',
    'formers',
    'forbye',
    'forby',
    'fore',
    'forever',
    'forer',
    'fores',
    'four',
    'd',
    'ddays',
    'dday',
    'do',
    'doing',
    'doings',
    'doe',
    'does',
    'doth',
    'downwarder',
    'downwardest',
    'downward',
    'downwards',
    'downs',
    'done',
    'doner',
    'dones',
    'donest',
    'dos',
    'dost',
    'did',
    'differentest',
    'differenter',
    'different',
    'describing',
    'describe',
    'describes',
    'described',
    'despiting',
    'despites',
    'despited',
    'despite',
    'during',
    'c',
    'cum',
    'circa',
    'chez',
    'cer',
    'certain',
    'certainest',
    'certainer',
    'cest',
    'canst',
    'cannot',
    'cant',
    'cants',
    'canting',
    'cantest',
    'canted',
    'co',
    'could',
    'couldst',
    'comeon',
    'comeons',
    'come-ons',
    'come-on',
    'concerning',
    'concerninger',
    'concerningest',
    'consequently',
    'considering',
    'e',
    'eg',
    'eight',
    'either',
    'even',
    'evens',
    'evenser',
    'evensest',
    'evened',
    'evenest',
    'ever',
    'everyone',
    'everything',
    'everybody',
    'everywhere',
    'every',
    'ere',
    'each',
    'et',
    'etc',
    'elsewhere',
    'else',
    'ex',
    'excepted',
    'excepts',
    'except',
    'excepting',
    'exes',
    'enough',
    'away'
];


/***/ }),

/***/ "./src/modules/user/helper.ts":
/*!************************************!*\
  !*** ./src/modules/user/helper.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUserById = exports.getUserByEmail = exports.getUsers = exports.validateSession = exports.getNewAccessToken = exports.decodeAccessToken = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/user/model.ts");
var model_2 = __webpack_require__(/*! ../user/invite/model */ "./src/modules/user/invite/model.ts");
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/user/helper.ts"));
var dbutils_1 = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");
var helper_1 = __webpack_require__(/*! ../auth/helper */ "./src/modules/auth/helper.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/user/service.ts");
var decodeAccessToken = function (space, accessToken) { return __awaiter(void 0, void 0, void 0, function () {
    var decodedResponse, err_1, model, existingUserRecord, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                decodedResponse = null;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, axios.get("".concat(ONEAUTH_API, "/auth/token/decode"), {
                        headers: {
                            authorization: accessToken,
                        },
                    })];
            case 2:
                decodedResponse = _a.sent();
                return [3, 4];
            case 3:
                err_1 = _a.sent();
                if (err_1.response.status === 401) {
                    return [2, "expired"];
                }
                return [2, "expired"];
            case 4:
                if (!(decodedResponse.status === 200)) return [3, 9];
                model = (0, dbutils_1.getGlobalCollection)(model_1.userCollection, model_1.userSchema);
                return [4, model.find({
                        email: decodedResponse.data.email,
                    })];
            case 5:
                existingUserRecord = _a.sent();
                return [4, model.findByIdAndUpdate(decodedResponse.data.user_id, __assign(__assign({}, decodedResponse.data), { resolver: "oneauth_space" }), { new: true, upsert: true })];
            case 6:
                data = _a.sent();
                if (!(existingUserRecord.length === 0)) return [3, 8];
                return [4, autoAcceptInvites(data)];
            case 7:
                _a.sent();
                _a.label = 8;
            case 8: return [2, decodedResponse.data || null];
            case 9: return [2, null];
        }
    });
}); };
exports.decodeAccessToken = decodeAccessToken;
var autoAcceptInvites = function (user) { return __awaiter(void 0, void 0, void 0, function () {
    var model, pendingInviteList, i, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_2.userInviteCollection, model_2.userInviteSchema);
                return [4, model.find({ email: user.email })];
            case 1:
                pendingInviteList = _a.sent();
                console.log(pendingInviteList);
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < pendingInviteList.length)) return [3, 5];
                return [4, model.findByIdAndUpdate(pendingInviteList[i]._id, __assign(__assign({}, pendingInviteList[i]._doc), { userId: user._id, accepted: true }), { new: true, upsert: true })];
            case 3:
                res = _a.sent();
                console.log(__assign(__assign({}, pendingInviteList[i]), { userId: user._id, accepted: true }));
                _a.label = 4;
            case 4:
                i++;
                return [3, 2];
            case 5: return [2];
        }
    });
}); };
var getNewAccessToken = function (space, refreshToken) { return __awaiter(void 0, void 0, void 0, function () {
    var refreshTokenResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, axios.post("".concat(ONEAUTH_API, "/auth/token"), {
                    grant_type: "refresh_token",
                    realm: space,
                    refresh_token: refreshToken,
                })];
            case 1:
                refreshTokenResponse = _a.sent();
                if (refreshTokenResponse.status === 200) {
                    return [2, refreshTokenResponse.data];
                }
                return [2, null];
        }
    });
}); };
exports.getNewAccessToken = getNewAccessToken;
var validateSession = function (localAccessToken, refreshToken, appRealm) { return __awaiter(void 0, void 0, void 0, function () {
    var model, localTokenResponse, accessToken, localClaims, _a, _accessToken, _localClaims, accessTokenResponse, newAccessToken, newAccessTokenResponse;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userCollection, model_1.userSchema);
                return [4, (0, helper_1.decodeAppToken)(localAccessToken)];
            case 1:
                localTokenResponse = _c.sent();
                accessToken = "";
                localClaims = {};
                if (!localTokenResponse.outcome) {
                    return [2, null];
                }
                _a = localTokenResponse.claims, _accessToken = _a.accessToken, _localClaims = __rest(_a, ["accessToken"]);
                accessToken = _accessToken;
                localClaims = {
                    space: _localClaims.space,
                    companyId: _localClaims.companyId,
                };
                return [4, Helper.decodeAccessToken(Number(appRealm), accessToken)];
            case 2:
                accessTokenResponse = _c.sent();
                if (accessTokenResponse !== "expired") {
                    return [2, {
                            accessToken: null,
                            claims: accessTokenResponse,
                            space: localClaims.space,
                        }];
                }
                return [4, Helper.getNewAccessToken(appRealm, refreshToken)];
            case 3:
                newAccessToken = _c.sent();
                if (!(newAccessToken === null || newAccessToken === void 0 ? void 0 : newAccessToken.access_token)) return [3, 6];
                return [4, Helper.decodeAccessToken(appRealm, newAccessToken.access_token)];
            case 4:
                newAccessTokenResponse = _c.sent();
                _b = {};
                return [4, (0, service_1.getLocalTokenImpl)(newAccessTokenResponse.user_id, newAccessToken.access_token)];
            case 5: return [2, (_b.accessToken = _c.sent(),
                    _b.claims = newAccessTokenResponse,
                    _b.space = localClaims.space,
                    _b)];
            case 6: return [2, null];
        }
    });
}); };
exports.validateSession = validateSession;
var getUsers = function () { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userCollection, model_1.userSchema);
                return [4, model.find()];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUsers = getUsers;
var getUserByEmail = function (email) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userCollection, model_1.userSchema);
                return [4, model.findOne({ email: email.toLowerCase() })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUserByEmail = getUserByEmail;
var getUserById = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userCollection, model_1.userSchema);
                return [4, model.findById(id)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUserById = getUserById;


/***/ }),

/***/ "./src/modules/user/index.ts":
/*!***********************************!*\
  !*** ./src/modules/user/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolvers = exports.typeDefs = void 0;
var apollo_server_express_1 = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/user/model.ts");
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/user/helper.ts"));
var getCollection = (__webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts").getCollection);
var typeDefs = (0, apollo_server_express_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Query {\n    user: [User]\n    authorizeUser(\n      accessToken: String\n      refreshToken: String\n      space: String\n    ): AuthorizeResponse\n  }\n\n  type Mutation {\n    createEmailAccount(payload: UserPayload): User!\n  }\n\n  input UserPayload {\n    firstName: String!\n    lastName: String!\n    email: String!\n  }\n\n  type User {\n    id: ID!\n    given_name: String\n    family_name: String\n    name: String\n    nickname: String\n    email: String\n    resolver: String\n  }\n\n  type AuthorizeResponse {\n    accessToken: String\n    claims: JSON\n  }\n"], ["\n  type Query {\n    user: [User]\n    authorizeUser(\n      accessToken: String\n      refreshToken: String\n      space: String\n    ): AuthorizeResponse\n  }\n\n  type Mutation {\n    createEmailAccount(payload: UserPayload): User!\n  }\n\n  input UserPayload {\n    firstName: String!\n    lastName: String!\n    email: String!\n  }\n\n  type User {\n    id: ID!\n    given_name: String\n    family_name: String\n    name: String\n    nickname: String\n    email: String\n    resolver: String\n  }\n\n  type AuthorizeResponse {\n    accessToken: String\n    claims: JSON\n  }\n"])));
exports.typeDefs = typeDefs;
var resolvers = {
    Query: {
        user: function (_1, _a, _b) { return __awaiter(void 0, [_1, _a, _b], void 0, function (_, _c, _d) {
            var model;
            var email = _c.email;
            var space = _d.space, user = _d.user;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!space || !user) {
                            return [2, new apollo_server_express_1.AuthenticationError("Not authorized to access this content")];
                        }
                        model = getCollection(space, model_1.userCollection, model_1.userSchema);
                        return [4, model.find()];
                    case 1: return [2, _e.sent()];
                }
            });
        }); },
        authorizeUser: function (_1, _a, __1) { return __awaiter(void 0, [_1, _a, __1], void 0, function (_, _b, __) {
            var model, accessTokenResponse, newAccessToken, newAccessTokenResponse;
            var accessToken = _b.accessToken, refreshToken = _b.refreshToken, space = _b.space;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        model = getCollection(space, model_1.userCollection, model_1.userSchema);
                        return [4, Helper.decodeAccessToken(Number(space), accessToken)];
                    case 1:
                        accessTokenResponse = _c.sent();
                        if (accessTokenResponse !== "expired") {
                            return [2, {
                                    accessToken: null,
                                    claims: accessTokenResponse,
                                }];
                        }
                        return [4, Helper.getNewAccessToken(space, refreshToken)];
                    case 2:
                        newAccessToken = _c.sent();
                        if (!(newAccessToken === null || newAccessToken === void 0 ? void 0 : newAccessToken.access_token)) return [3, 4];
                        return [4, Helper.decodeAccessToken(space, newAccessToken.access_token)];
                    case 3:
                        newAccessTokenResponse = _c.sent();
                        return [2, {
                                accessToken: newAccessToken.access_token,
                                claims: newAccessTokenResponse,
                            }];
                    case 4: return [2, null];
                }
            });
        }); },
    },
    Mutation: {
        createEmailAccount: function (_1, args_1, _a) { return __awaiter(void 0, [_1, args_1, _a], void 0, function (_, args, _b) {
            var model, response;
            var space = _b.space, user = _b.user;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        model = getCollection(space, model_1.userCollection, model_1.userSchema);
                        return [4, model.findOneAndUpdate({ email: args.payload.email, resolver: "email" }, __assign(__assign({}, args.payload), { resolver: "email" }), { upsert: true, new: true, rawResult: true })];
                    case 1:
                        response = _c.sent();
                        return [2, response.value];
                }
            });
        }); },
    },
};
exports.resolvers = resolvers;
var templateObject_1;


/***/ }),

/***/ "./src/modules/user/invite/helper.ts":
/*!*******************************************!*\
  !*** ./src/modules/user/invite/helper.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUserInviteByUserId = exports.registerUserInvite = exports.getUserInvite = exports.updateUserInvite = void 0;
var axios = __webpack_require__(/*! axios */ "axios");
var ONEAUTH_API = process.env.ONEAUTH_API || "http://localhost:4010/api";
var model_1 = __webpack_require__(/*! ./model */ "./src/modules/user/invite/model.ts");
var companyService = __importStar(__webpack_require__(/*! ../../company/service */ "./src/modules/company/service.ts"));
var userService = __importStar(__webpack_require__(/*! ../service */ "./src/modules/user/service.ts"));
var dbutils_1 = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");
var updateUserInvite = function (space, data, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var company, model, user, payload, existingRecord;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, companyService.getCompanyByReference(space)];
            case 1:
                company = _a.sent();
                if (!company) {
                    return [2, null];
                }
                model = (0, dbutils_1.getGlobalCollection)(model_1.userInviteCollection, model_1.userInviteSchema);
                return [4, userService.getUserByEmail(data.email)];
            case 2:
                user = _a.sent();
                payload = __assign(__assign({}, data), { email: data.email.toLowerCase(), companyId: company._id, accepted: !!user, userId: user ? user._id : null });
                return [4, model.find({
                        email: payload.email.toLowerCase(),
                        companyId: company._id,
                    })];
            case 3:
                existingRecord = _a.sent();
                if ((existingRecord === null || existingRecord === void 0 ? void 0 : existingRecord.length) > 0) {
                    return [2, null];
                }
                return [4, model.create(payload)];
            case 4: return [2, _a.sent()];
        }
    });
}); };
exports.updateUserInvite = updateUserInvite;
var getUserInvite = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var company, model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, companyService.getCompanyByReference(space)];
            case 1:
                company = _a.sent();
                if (!company) {
                    return [2, []];
                }
                model = (0, dbutils_1.getGlobalCollection)(model_1.userInviteCollection, model_1.userInviteSchema);
                return [4, model.find({ companyId: company._id })];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.getUserInvite = getUserInvite;
var registerUserInvite = function (space, companyId, userId, email) { return __awaiter(void 0, void 0, void 0, function () {
    var model, existingRecord;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userInviteCollection, model_1.userInviteSchema);
                return [4, model.find({
                        email: email.toLowerCase(),
                        companyId: companyId,
                    })];
            case 1:
                existingRecord = _a.sent();
                if ((existingRecord === null || existingRecord === void 0 ? void 0 : existingRecord.length) > 0) {
                    return [2, null];
                }
                return [4, model.create({
                        companyId: companyId,
                        email: email.toLowerCase(),
                        userId: userId,
                        accepted: true,
                    })];
            case 2: return [2, _a.sent()];
        }
    });
}); };
exports.registerUserInvite = registerUserInvite;
var getUserInviteByUserId = function (userId) { return __awaiter(void 0, void 0, void 0, function () {
    var model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                model = (0, dbutils_1.getGlobalCollection)(model_1.userInviteCollection, model_1.userInviteSchema);
                return [4, model.find({ userId: userId })];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUserInviteByUserId = getUserInviteByUserId;


/***/ }),

/***/ "./src/modules/user/invite/model.ts":
/*!******************************************!*\
  !*** ./src/modules/user/invite/model.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userInviteCollection = exports.userInviteSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var userInviteSchema = new Schema({
    email: { type: String },
    userId: { type: String },
    companyId: { type: String },
    accepted: { type: Boolean },
}, { timestamps: true });
exports.userInviteSchema = userInviteSchema;
var userInviteCollection = "user.permission";
exports.userInviteCollection = userInviteCollection;


/***/ }),

/***/ "./src/modules/user/invite/route.ts":
/*!******************************************!*\
  !*** ./src/modules/user/invite/route.ts ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var middlewares_1 = __webpack_require__(/*! ../../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/user/invite/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.post("/user/invite/:space", middlewares_1.authorizeApi, service_1.createUserInviteEndpoint);
    router.get("/user/invite/:space", middlewares_1.authorizeApi, service_1.getUserInvite);
};


/***/ }),

/***/ "./src/modules/user/invite/service.ts":
/*!********************************************!*\
  !*** ./src/modules/user/invite/service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUserInvite = exports.registerUserInvite = exports.createUserInviteEndpoint = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/user/invite/helper.ts"));
var selfRealm = 100;
var createUserInviteEndpoint = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, userInvite;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.updateUserInvite(req.params.space, req.body, userId)];
            case 1:
                userInvite = _a.sent();
                res.status(200);
                res.send(userInvite);
                res.end();
                return [2];
        }
    });
}); };
exports.createUserInviteEndpoint = createUserInviteEndpoint;
var registerUserInvite = function (space, companyId, userId, email) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.registerUserInvite(space, companyId, userId, email)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.registerUserInvite = registerUserInvite;
var getUserInvite = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, userInviteList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getUserInvite(req.params.space)];
            case 1:
                userInviteList = _a.sent();
                res.status(200);
                res.send(userInviteList);
                res.end();
                return [2];
        }
    });
}); };
exports.getUserInvite = getUserInvite;


/***/ }),

/***/ "./src/modules/user/model.ts":
/*!***********************************!*\
  !*** ./src/modules/user/model.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userCollection = exports.userSchema = void 0;
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var userSchema = new Schema({
    given_name: { type: String },
    family_name: { type: String },
    name: { type: String },
    nickname: { type: String },
    email: { type: String },
    resolver: { type: String },
}, { timestamps: true });
exports.userSchema = userSchema;
var userCollection = "user";
exports.userCollection = userCollection;


/***/ }),

/***/ "./src/modules/user/route.ts":
/*!***********************************!*\
  !*** ./src/modules/user/route.ts ***!
  \***********************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var handler_1 = __webpack_require__(/*! ../../handler */ "./src/handler.ts");
var middlewares_1 = __webpack_require__(/*! ../../middlewares */ "./src/middlewares.ts");
var service_1 = __webpack_require__(/*! ./service */ "./src/modules/user/service.ts");
var selfRealm = 100;
module.exports = function (router) {
    router.post("/user/:realmId/authorize_user", (0, handler_1.asyncHandler)(service_1.validateSession));
    router.get("/user/:realmId", middlewares_1.authorizeApi, (0, handler_1.asyncHandler)(service_1.getUsers));
    router.get("/user/token/local", middlewares_1.authorizeApiOneauth, (0, handler_1.asyncHandler)(service_1.getLocalToken));
};


/***/ }),

/***/ "./src/modules/user/service.ts":
/*!*************************************!*\
  !*** ./src/modules/user/service.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUserById = exports.getUserByEmail = exports.getLocalTokenImpl = exports.getLocalToken = exports.getUsers = exports.validateSession = void 0;
var Helper = __importStar(__webpack_require__(/*! ./helper */ "./src/modules/user/helper.ts"));
var userInviteHelper = __importStar(__webpack_require__(/*! ../user/invite/helper */ "./src/modules/user/invite/helper.ts"));
var companyHelper = __importStar(__webpack_require__(/*! ../company/helper */ "./src/modules/company/helper.ts"));
var helper_1 = __webpack_require__(/*! ../auth/helper */ "./src/modules/auth/helper.ts");
var selfRealm = 100;
var validateSession = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var session;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.validateSession(req.body.accessToken, req.body.refreshToken, req.params.realmId)];
            case 1:
                session = _a.sent();
                if (!session) {
                    res.status(404);
                    res.send("Session not found");
                    res.end();
                    return [2];
                }
                res.status(200);
                res.send(session);
                res.end();
                return [2];
        }
    });
}); };
exports.validateSession = validateSession;
var getUsers = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, userList;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = req.user.user_id;
                return [4, Helper.getUsers()];
            case 1:
                userList = _a.sent();
                res.status(200);
                res.send(userList);
                res.end();
                return [2];
        }
    });
}); };
exports.getUsers = getUsers;
var getLocalToken = function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var accessToken, appToken;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                accessToken = req.headers["authorization"];
                if (!accessToken) {
                    return [2, res.sendStatus(401)];
                }
                return [4, (0, exports.getLocalTokenImpl)(req.user.user_id, accessToken)];
            case 1:
                appToken = _a.sent();
                res.status(200);
                res.send({ token: appToken });
                res.end();
                return [2];
        }
    });
}); };
exports.getLocalToken = getLocalToken;
var getLocalTokenImpl = function (userId, accessToken) { return __awaiter(void 0, void 0, void 0, function () {
    var userInviteList, companyIdList, companyList, companyReferenceList, claims;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, userInviteHelper.getUserInviteByUserId(userId)];
            case 1:
                userInviteList = _a.sent();
                companyIdList = [];
                userInviteList.forEach(function (item) {
                    companyIdList.push(item.companyId);
                });
                return [4, companyHelper.getCompanyByIdList(companyIdList)];
            case 2:
                companyList = _a.sent();
                companyReferenceList = [];
                companyList.forEach(function (item) {
                    companyReferenceList.push(item.reference);
                });
                claims = {
                    accessToken: accessToken,
                    space: companyReferenceList,
                    companyId: companyIdList,
                };
                return [2, (0, helper_1.encodeAppToken)(claims)];
        }
    });
}); };
exports.getLocalTokenImpl = getLocalTokenImpl;
var getUserByEmail = function (email) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.getUserByEmail(email)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUserByEmail = getUserByEmail;
var getUserById = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Helper.getUserById(id)];
            case 1: return [2, _a.sent()];
        }
    });
}); };
exports.getUserById = getUserById;


/***/ }),

/***/ "./src/route.ts":
/*!**********************!*\
  !*** ./src/route.ts ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var express = __webpack_require__(/*! express */ "express");
var router = express.Router();
router.get("/", function (_, res) {
    res.send("v1.0.0");
    res.end();
});
__webpack_require__(/*! ./modules/hello/route */ "./src/modules/hello/route.ts")(router);
__webpack_require__(/*! ./modules/auth/route */ "./src/modules/auth/route.ts")(router);
__webpack_require__(/*! ./modules/note/route */ "./src/modules/note/route.ts")(router);
__webpack_require__(/*! ./modules/note/tag/route */ "./src/modules/note/tag/route.ts")(router);
__webpack_require__(/*! ./modules/user/route */ "./src/modules/user/route.ts")(router);
__webpack_require__(/*! ./modules/user/invite/route */ "./src/modules/user/invite/route.ts")(router);
__webpack_require__(/*! ./modules/company/route */ "./src/modules/company/route.ts")(router);
__webpack_require__(/*! ./modules/notelink/route */ "./src/modules/notelink/route.ts")(router);
__webpack_require__(/*! ./modules/notelink/auto/route */ "./src/modules/notelink/auto/route.ts")(router);
__webpack_require__(/*! ./modules/book/route */ "./src/modules/book/route.ts")(router);
__webpack_require__(/*! ./modules/book/chapter/route */ "./src/modules/book/chapter/route.ts")(router);
__webpack_require__(/*! ./modules/book/section/route */ "./src/modules/book/section/route.ts")(router);
__webpack_require__(/*! ./modules/book/sectiondetail/route */ "./src/modules/book/sectiondetail/route.ts")(router);
__webpack_require__(/*! ./modules/book/concept/route */ "./src/modules/book/concept/route.ts")(router);
__webpack_require__(/*! ./modules/book/conceptdetail/route */ "./src/modules/book/conceptdetail/route.ts")(router);
__webpack_require__(/*! ./modules/book/theme/route */ "./src/modules/book/theme/route.ts")(router);
__webpack_require__(/*! ./modules/book/themedetail/route */ "./src/modules/book/themedetail/route.ts")(router);
__webpack_require__(/*! ./modules/book/subtheme/route */ "./src/modules/book/subtheme/route.ts")(router);
__webpack_require__(/*! ./modules/book/shortform/route */ "./src/modules/book/shortform/route.ts")(router);
__webpack_require__(/*! ./modules/book/extract/route */ "./src/modules/book/extract/route.ts")(router);
__webpack_require__(/*! ./modules/book/log/route */ "./src/modules/book/log/route.ts")(router);
__webpack_require__(/*! ./modules/import/route */ "./src/modules/import/route.ts")(router);
__webpack_require__(/*! ./modules/import/log/route */ "./src/modules/import/log/route.ts")(router);
__webpack_require__(/*! ./modules/colorfilter/route */ "./src/modules/colorfilter/route.ts")(router);
__webpack_require__(/*! ./modules/metadata/definition/route */ "./src/modules/metadata/definition/route.ts")(router);
__webpack_require__(/*! ./modules/metadata/value/route */ "./src/modules/metadata/value/route.ts")(router);
__webpack_require__(/*! ./modules/stopwords/route */ "./src/modules/stopwords/route.ts")(router);
__webpack_require__(/*! ./modules/keywords/route */ "./src/modules/keywords/route.ts")(router);
__webpack_require__(/*! ./modules/label/route */ "./src/modules/label/route.ts")(router);
__webpack_require__(/*! ./modules/report/route */ "./src/modules/report/route.ts")(router);
__webpack_require__(/*! ./modules/flashcard/route */ "./src/modules/flashcard/route.ts")(router);
module.exports = router;


/***/ }),

/***/ "./src/startup.ts":
/*!************************!*\
  !*** ./src/startup.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initializeSequences = void 0;
var service_1 = __webpack_require__(/*! ./modules/sequence/service */ "./src/modules/sequence/service.ts");
var initializeSequences = function () {
    (0, service_1.create_sequence)("assetId", null, 1);
    (0, service_1.create_sequence)("companyId", null, 1);
};
exports.initializeSequences = initializeSequences;


/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/*!******************************************************!*\
  !*** ./node_modules/webpack/hot/log-apply-result.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

/**
 * @param {(string | number)[]} updatedModules updated modules
 * @param {(string | number)[] | null} renewedModules renewed modules
 */
module.exports = function (updatedModules, renewedModules) {
	var unacceptedModules = updatedModules.filter(function (moduleId) {
		return renewedModules && renewedModules.indexOf(moduleId) < 0;
	});
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");

	if (unacceptedModules.length > 0) {
		log(
			"warning",
			"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"
		);
		unacceptedModules.forEach(function (moduleId) {
			log("warning", "[HMR]  - " + moduleId);
		});
	}

	if (!renewedModules || renewedModules.length === 0) {
		log("info", "[HMR] Nothing hot updated.");
	} else {
		log("info", "[HMR] Updated modules:");
		renewedModules.forEach(function (moduleId) {
			if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
				var parts = moduleId.split("!");
				log.groupCollapsed("info", "[HMR]  - " + parts.pop());
				log("info", "[HMR]  - " + moduleId);
				log.groupEnd("info");
			} else {
				log("info", "[HMR]  - " + moduleId);
			}
		});
		var numberIds = renewedModules.every(function (moduleId) {
			return typeof moduleId === "number";
		});
		if (numberIds)
			log(
				"info",
				'[HMR] Consider using the optimization.moduleIds: "named" for module names.'
			);
	}
};


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

/** @typedef {"info" | "warning" | "error"} LogLevel */

/** @type {LogLevel} */
var logLevel = "info";

function dummy() {}

/**
 * @param {LogLevel} level log level
 * @returns {boolean} true, if should log
 */
function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

/**
 * @param {(msg?: string) => void} logFn log function
 * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient
 */
function logGroup(logFn) {
	return function (level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

/**
 * @param {LogLevel} level log level
 * @param {string|Error} msg message
 */
module.exports = function (level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

/**
 * @param {LogLevel} level log level
 */
module.exports.setLogLevel = function (level) {
	logLevel = level;
};

/**
 * @param {Error} err error
 * @returns {string} formatted error
 */
module.exports.formatError = function (err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	}
	return stack;
};


/***/ }),

/***/ "./node_modules/webpack/hot/poll.js?1000":
/*!***********************************************!*\
  !*** ./node_modules/webpack/hot/poll.js?1000 ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __resourceQuery = "?1000";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/* globals __resourceQuery */
if (true) {
	var hotPollInterval = +__resourceQuery.slice(1) || 0;
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");

	/**
	 * @param {boolean=} fromUpdate true when called from update
	 */
	var checkForUpdate = function checkForUpdate(fromUpdate) {
		if (module.hot.status() === "idle") {
			module.hot
				.check(true)
				.then(function (updatedModules) {
					if (!updatedModules) {
						if (fromUpdate) log("info", "[HMR] Update applied.");
						return;
					}
					__webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);
					checkForUpdate(true);
				})
				.catch(function (err) {
					var status = module.hot.status();
					if (["abort", "fail"].indexOf(status) >= 0) {
						log("warning", "[HMR] Cannot apply update.");
						log("warning", "[HMR] " + log.formatError(err));
						log("warning", "[HMR] You need to restart the application!");
					} else {
						log("warning", "[HMR] Update failed: " + log.formatError(err));
					}
				});
		}
	};
	setInterval(checkForUpdate, hotPollInterval);
} else {}


/***/ }),

/***/ "./src/lib/authutils.js":
/*!******************************!*\
  !*** ./src/lib/authutils.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");

const isUnauthorized = (user) => {
  if (!user) {
    return new AuthenticationError("Not authorized to access this content");
  }
  return false;
};

module.exports = { isUnauthorized };


/***/ }),

/***/ "./src/modules/article/category/index.js":
/*!***********************************************!*\
  !*** ./src/modules/article/category/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { categoryCollection, categorySchema } = __webpack_require__(/*! ./model */ "./src/modules/article/category/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");
const { isUnauthorized } = __webpack_require__(/*! ../../../lib/authutils */ "./src/lib/authutils.js");

const typeDefs = gql`
  extend type Query {
    articleCategory(id: ID!): ArticleCategory
    articleCategories: [ArticleCategory]
  }

  extend type Mutation {
    addArticleCategory(payload: ArticleCategoryPayload): ArticleCategory
  }

  input ArticleCategoryPayload {
    id: String
    name: String
  }

  extend type Article {
    category: ArticleCategory
  }

  type ArticleCategory {
    id: ID!
    name: String
    articles: Int
  }
`;

const resolvers = {
  Query: {
    articleCategory: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, categoryCollection, categorySchema);
      return await model.findById(id);
    },
    articleCategories: async (_, __, { user, asset }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, categoryCollection, categorySchema);
      return await model.find();
    },
  },

  Mutation: {
    addArticleCategory: async (_, args, { user, asset }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, categoryCollection, categorySchema);
      if (args.payload.id) {
        return await model.findByIdAndUpdate(args.payload.id, args.payload, {
          new: true,
        });
      } else {
        const data = new model(args.payload);
        return await data.save();
      }
    },
  },

  Article: {
    category: {
      resolve: async (parent, _args, { asset, user }, info) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(asset, categoryCollection, categorySchema);
        return await model.findById(parent.categoryId);
      },
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/category/model.js":
/*!***********************************************!*\
  !*** ./src/modules/article/category/model.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const categorySchema = new Schema(
  {
    name: { type: String },
    // parentCategoryId: { type: String },
    articles: { type: Number, default: 0 },
  },
  { timestamps: true }
);

const categoryCollection = "article.category";

module.exports = { categorySchema, categoryCollection };


/***/ }),

/***/ "./src/modules/article/comment/feedback/index.js":
/*!*******************************************************!*\
  !*** ./src/modules/article/comment/feedback/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const {
  articleCommentFeedbackSchema,
  articleCommentFeedbackCollection,
} = __webpack_require__(/*! ./model */ "./src/modules/article/comment/feedback/model.js");
const { articleCommentSchema, articleCommentCollection } = __webpack_require__(/*! ../model */ "./src/modules/article/comment/model.js");
const { getCollection } = __webpack_require__(/*! ../../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    articleCommentFeedback(commentId: ID!): [ArticleCommentFeedback]
  }

  extend type Mutation {
    addArticleCommentFeedback(
      commentId: String!
      type: String!
    ): ArticleCommentFeedback
    removeArticleCommentFeedback(
      commentId: String!
      type: String!
    ): ArticleCommentFeedback
  }

  type ArticleCommentFeedback {
    id: ID!
    type: String
  }

  extend type ArticleComment {
    feedback: [ArticleCommentFeedback]
  }
`;

const resolvers = {
  Query: {
    articleCommentFeedback: async (_, { commentId }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentFeedbackCollection,
        articleCommentFeedbackSchema
      );
      return await model.find({ commentId: commentId, userId: user.userId });
    },
  },

  ArticleComment: {
    feedback: {
      resolve: async (parent, _args, { asset, user }) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          articleCommentFeedbackCollection,
          articleCommentFeedbackSchema
        );
        return await model.find({ commentId: parent.id, userId: user.userId });
      },
    },
  },

  Mutation: {
    addArticleCommentFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentFeedbackCollection,
        articleCommentFeedbackSchema
      );
      const response = await model.findOneAndUpdate(
        { commentId: args.commentId, userId: user.userId, type: args.type },
        { commentId: args.commentId, userId: user.userId, type: args.type },
        { upsert: true, new: true, rawResult: true }
      );
      if (!response.lastErrorObject.updatedExisting) {
        const articleCommentModel = getCollection(
          asset,
          articleCommentCollection,
          articleCommentSchema
        );
        await articleCommentModel.findByIdAndUpdate(
          args.commentId,
          {
            $inc: { [args.type]: 1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
    removeArticleCommentFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentFeedbackCollection,
        articleCommentFeedbackSchema
      );
      const response = await model.findOneAndDelete(
        { commentId: args.commentId, userId: user.userId, type: args.type },
        {
          rawResult: true,
        }
      );
      if (response.lastErrorObject.n > 0) {
        const articleCommentModel = getCollection(
          asset,
          articleCommentCollection,
          articleCommentSchema
        );
        await articleCommentModel.findByIdAndUpdate(
          args.commentId,
          {
            $inc: { [args.type]: -1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/comment/feedback/model.js":
/*!*******************************************************!*\
  !*** ./src/modules/article/comment/feedback/model.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const articleCommentFeedbackSchema = new Schema(
  {
    commentId: { type: String },
    type: { type: String },
    userId: { type: String },
  },
  { timestamps: true }
);

const articleCommentFeedbackCollection = "article.comment.feedback";

module.exports = {
  articleCommentFeedbackSchema,
  articleCommentFeedbackCollection,
};


/***/ }),

/***/ "./src/modules/article/comment/index.js":
/*!**********************************************!*\
  !*** ./src/modules/article/comment/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { articleCommentSchema, articleCommentCollection } = __webpack_require__(/*! ./model */ "./src/modules/article/comment/model.js");
const { articleSchema, articleCollection } = __webpack_require__(/*! ../model */ "./src/modules/article/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    articleComments(
      articleId: String!
      pageSize: Int
      pageNo: Int
    ): ArticleCommentPaginated
    articleComment(id: ID!): ArticleComment
  }

  extend type Mutation {
    updateArticleComment(payload: ArticleCommentPayload!): ArticleComment
    markArticleCommentAsAnswer(id: ID!): ArticleComment
    unmarkArticleCommentAsAnswer(id: ID!): ArticleComment
  }

  type ArticleCommentPaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [ArticleComment]!
  }

  input ArticleCommentPayload {
    id: ID
    text: String
    parentId: String
    articleId: String!
  }

  type ArticleComment {
    id: ID!
    text: String
    parentId: String
    helpful: Int
    notHelpful: Int
    isAnswer: Boolean
    createdBy: String
    updatedBy: String
    createdAt: DateScalar
    updatedAt: DateScalar
  }

  extend type ArticleCommentFeedback {
    articleComment: ArticleComment
  }
`;

const resolvers = {
  Query: {
    articleComments: async (
      _,
      { articleId, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );
      const response = await model
        .find({ articleId: articleId })
        // .sort({ rootParentId: 1, parentId: 1, createdAt: 1 })
        .sort({ isAnswer: -1 })
        .sort({ createdAt: 1 })
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    articleComment: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );
      return await model.findById(id);
    },
  },

  ArticleCommentFeedback: {
    articleComment: async (parent, _, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );
      return await model.findById(parent.commentId);
    },
  },

  Mutation: {
    updateArticleComment: async (_, { payload }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );

      let id = payload.id;

      if (!payload.id) {
        const articleModel = getCollection(
          asset,
          articleCollection,
          articleSchema
        );
        await articleModel.findByIdAndUpdate(
          payload.articleId,
          { $inc: { comments: 1 } },
          { new: true }
        );
        const response = await new model({
          ...payload,
          createdBy: user.userId,
        }).save();
        id = response.id;
      }

      const parentFields = { parentId: payload.parentId || id };
      if (!payload.id) {
        const parentComment = await model.findById(payload.parentId);
        if (parentComment) {
          parentFields.rootParentId = parentComment.rootParentId;
        } else {
          parentFields.rootParentId = parentFields.parentId;
        }
      }

      return await model.findByIdAndUpdate(
        id,
        {
          ...payload,
          ...parentFields,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );
    },
    markArticleCommentAsAnswer: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );

      const response = await model.findByIdAndUpdate(
        id,
        {
          isAnswer: true,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );

      await model.updateMany(
        { $and: [{ articleId: response.articleId }, { _id: { $ne: id } }] },
        {
          $set: {
            isAnswer: false,
          },
        },
        {
          new: true,
        }
      );

      const articleModel = getCollection(
        asset,
        articleCollection,
        articleSchema
      );
      await articleModel.findByIdAndUpdate(
        response.articleId,
        { isAnswered: true, answeredOn: new Date() },
        { new: true }
      );

      return response;
    },
    unmarkArticleCommentAsAnswer: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleCommentCollection,
        articleCommentSchema
      );

      const response = await model.findByIdAndUpdate(
        id,
        {
          isAnswer: false,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );

      const articleModel = getCollection(
        asset,
        articleCollection,
        articleSchema
      );
      await articleModel.findByIdAndUpdate(
        response.articleId,
        { isAnswered: false, answeredOn: null },
        { new: true }
      );

      return response;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/comment/model.js":
/*!**********************************************!*\
  !*** ./src/modules/article/comment/model.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const articleCommentSchema = new Schema(
  {
    text: { type: String },
    parentId: { type: String },
    rootParentId: { type: String },
    articleId: { type: String },
    helpful: { type: Number, default: 0 },
    notHelpful: { type: Number, default: 0 },
    isAnswer: { type: Boolean, default: false },
    createdBy: { type: String },
    updatedBy: { type: String },
  },
  { timestamps: true }
);

const articleCommentCollection = "article.comment";

// module.exports = mongoose.model('bookmarks', postSchema);
module.exports = { articleCommentSchema, articleCommentCollection };


/***/ }),

/***/ "./src/modules/article/feedback/index.js":
/*!***********************************************!*\
  !*** ./src/modules/article/feedback/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { articleFeedbackSchema, articleFeedbackCollection } = __webpack_require__(/*! ./model */ "./src/modules/article/feedback/model.js");
const { articleSchema, articleCollection } = __webpack_require__(/*! ../model */ "./src/modules/article/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    articleFeedback(articleId: ID!): [ArticleFeedback]
  }

  extend type Mutation {
    addArticleFeedback(articleId: String!, type: String!): ArticleFeedback
    removeArticleFeedback(articleId: String!, type: String!): ArticleFeedback
  }

  type ArticleFeedback {
    id: ID!
    type: String
  }

  extend type Article {
    feedback: [ArticleFeedback]
  }
`;

const resolvers = {
  Query: {
    articleFeedback: async (_, { articleId }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleFeedbackCollection,
        articleFeedbackSchema
      );
      return await model.find({ articleId: articleId, userId: user.userId });
    },
  },

  Article: {
    feedback: {
      resolve: async (parent, _args, { asset, user }) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          articleFeedbackCollection,
          articleFeedbackSchema
        );
        return await model.find({ articleId: parent.id, userId: user.userId });
      },
    },
  },

  Mutation: {
    addArticleFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleFeedbackCollection,
        articleFeedbackSchema
      );
      const response = await model.findOneAndUpdate(
        { articleId: args.articleId, userId: user.userId, type: args.type },
        { articleId: args.articleId, userId: user.userId, type: args.type },
        { upsert: true, new: true, rawResult: true }
      );
      if (!response.lastErrorObject.updatedExisting) {
        const articleModel = getCollection(
          asset,
          articleCollection,
          articleSchema
        );
        await articleModel.findByIdAndUpdate(
          args.articleId,
          {
            $inc: { [args.type]: 1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
    removeArticleFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleFeedbackCollection,
        articleFeedbackSchema
      );
      const response = await model.findOneAndDelete(
        { articleId: args.articleId, userId: user.userId, type: args.type },
        {
          rawResult: true,
        }
      );
      if (response.lastErrorObject.n > 0) {
        const articleModel = getCollection(
          asset,
          articleCollection,
          articleSchema
        );
        await articleModel.findByIdAndUpdate(
          args.articleId,
          {
            $inc: { [args.type]: -1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/feedback/model.js":
/*!***********************************************!*\
  !*** ./src/modules/article/feedback/model.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const articleFeedbackSchema = new Schema(
  {
    articleId: { type: String },
    type: { type: String },
    userId: { type: String },
  },
  { timestamps: true }
);

const articleFeedbackCollection = 'article.feedback';

module.exports = { articleFeedbackSchema, articleFeedbackCollection };


/***/ }),

/***/ "./src/modules/article/index.js":
/*!**************************************!*\
  !*** ./src/modules/article/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { GraphQLScalarType } = __webpack_require__(/*! graphql */ "graphql");
const { articleSchema, articleCollection } = __webpack_require__(/*! ./model */ "./src/modules/article/model.js");
const { articleTagSchema, articleTagCollection } = __webpack_require__(/*! ./tag/model */ "./src/modules/article/tag/model.js");
const { categorySchema, categoryCollection } = __webpack_require__(/*! ./category/model */ "./src/modules/article/category/model.js");
const { getCollection } = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  scalar DateScalar
  extend type Query {
    article(id: ID!): Article
    articles(categoryId: ID!, pageSize: Int, pageNo: Int): ArticlePaginated
    searchArticles(text: String, pageSize: Int, pageNo: Int): ArticlePaginated
    getArticles(
      text: String
      categoryId: String
      pageSize: Int
      pageNo: Int
    ): ArticlePaginated
  }

  extend type Mutation {
    addArticle(payload: ArticlePayload): Article
    deleteArticle(id: ID!): Article
  }

  input ArticlePayload {
    id: String
    title: JSON
    description: JSON
    categoryId: String
    addTags: [String]
    removeTags: [String]
  }

  type ArticlePaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [Article]!
  }

  type Article {
    id: ID!
    title: JSON
    description: JSON
    views: Int!
    comments: Int!
    isAnswered: Boolean!
    answeredOn: DateScalar
    helpful: Int!
    notHelpful: Int!
    createdAt: DateScalar
    updatedAt: DateScalar
  }

  extend type ArticleFeedback {
    article: Article
  }
  extend type ArticleTag {
    article: Article
  }
  extend type ArticleComment {
    article: Article
  }
`;

const resolvers = {
  DateScalar: new GraphQLScalarType({
    name: "DateScalar",
    description: "Date custom scalar type",
    parseValue(value) {
      return new Date(value); // value from the client
    },
    serialize(value) {
      return value.getTime(); // value sent to the client
    },
    parseLiteral(ast) {
      if (ast.kind === Kind.INT) {
        return new Date(+ast.value); // ast value is always in string format
      }
      return null;
    },
  }),
  Query: {
    article: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      response = await model.findByIdAndUpdate(
        id,
        { $inc: { views: 1 } },
        { new: true }
      );
      return response;
    },
    articles: async (
      _,
      { categoryId, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      if (!categoryId) {
        return {
          results: [],
          pageNo: 0,
          hasMore: false,
        };
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      const response = await model
        .find({ categoryId: categoryId })
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    searchArticles: async (
      _,
      { text, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      if (!text) {
        return {
          results: [],
          pageNo: 0,
          hasMore: false,
          total: 0,
        };
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      const res = await model
        .find({
          $or: [
            { description: { $regex: new RegExp(text, "ig") } },
            { title: { $regex: new RegExp(text, "ig") } },
          ],
        })
        .skip(pageNo * pageSize)
        .limit(pageSize);

      return {
        results: res,
        pageNo: res.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: res.length === pageSize ? true : false,
      };
    },
    getArticles: async (
      _,
      { text, categoryId, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      let res = [];
      if (text) {
        res = await model
          .find({
            $or: [
              { description: { $regex: new RegExp(text, "ig") } },
              { title: { $regex: new RegExp(text, "ig") } },
            ],
          })
          .skip(pageNo * pageSize)
          .limit(pageSize);
      } else if (categoryId) {
        res = await model
          .find({ categoryId: categoryId })
          .skip(pageNo * pageSize)
          .limit(pageSize);
      } else {
        res = await model
          .find()
          .skip(pageNo * pageSize)
          .limit(pageSize);
      }

      // return {
      //   results: [],
      //   pageNo: 0,
      //   hasMore: false,
      //   total: 0,
      // };
      return {
        results: res,
        pageNo: res.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: res.length === pageSize ? true : false,
      };
    },
  },

  ArticleFeedback: {
    article: async (parent, _, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      return await model.findById(parent.articleId);
    },
  },

  ArticleTag: {
    article: async (parent, _, { asset, user }) => {
      const model = getCollection(asset, articleCollection, articleSchema);
      return await model.findById(parent.articleId);
    },
  },

  ArticleComment: {
    article: async (parent, _, { asset, user }) => {
      const model = getCollection(asset, articleCollection, articleSchema);
      return await model.findById(parent.articleId);
    },
  },

  Mutation: {
    addArticle: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      const tagModel = getCollection(
        asset,
        articleTagCollection,
        articleTagSchema
      );
      let articleResponse;

      if (args.payload.id) {
        existingArticle = await model.findById(args.payload.id);
        if (existingArticle.categoryId !== args.payload.categoryId) {
          const categoryModel = getCollection(
            asset,
            categoryCollection,
            categorySchema
          );
          await categoryModel.findByIdAndUpdate(
            existingArticle.categoryId,
            { $inc: { articles: -1 } },
            { new: true }
          );
          await categoryModel.findByIdAndUpdate(
            args.payload.categoryId,
            { $inc: { articles: 1 } },
            { new: true }
          );
        }
        articleResponse = await model.findByIdAndUpdate(
          args.payload.id,
          args.payload,
          { new: true }
        );
      } else {
        const data = new model(args.payload);
        articleResponse = await data.save();
        const categoryModel = getCollection(
          asset,
          categoryCollection,
          categorySchema
        );
        await categoryModel.findByIdAndUpdate(
          args.payload.categoryId,
          { $inc: { articles: 1 } },
          { new: true }
        );
      }

      args.payload.addTags.forEach(async (item) => {
        const data = new tagModel({
          name: item,
          articleId: articleResponse._id,
        });
        await data.save();
      });

      args.payload.removeTags.forEach(async (item) => {
        await tagModel.deleteMany({
          articleId: articleResponse._id,
          name: item,
        });
      });

      // const categoryStat = await model.aggregate([
      //   {
      //     $group: {
      //       _id: '$categoryId',
      //       count: { $sum: 1 },
      //     },
      //   },
      // ]);

      return articleResponse;
    },
    deleteArticle: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, articleCollection, articleSchema);
      const tagModel = getCollection(
        asset,
        articleTagCollection,
        articleTagSchema
      );

      const res = await model.findByIdAndDelete(id);

      await tagModel.deleteMany({
        articleId: id,
      });

      return res;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/model.js":
/*!**************************************!*\
  !*** ./src/modules/article/model.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const articleSchema = new Schema(
  {
    title: { type: Array },
    description: { type: Array },
    categoryId: { type: String },
    views: { type: Number, default: 0 },
    comments: { type: Number, default: 0 },
    isAnswered: { type: Boolean, default: false },
    answeredOn: { type: Date },
    helpful: { type: Number, default: 0 },
    notHelpful: { type: Number, default: 0 },
  },
  { timestamps: true }
);

const articleCollection = "article";

// module.exports = mongoose.model('bookmarks', articleSchema);
module.exports = { articleSchema, articleCollection };


/***/ }),

/***/ "./src/modules/article/tag/index.js":
/*!******************************************!*\
  !*** ./src/modules/article/tag/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { articleTagSchema, articleTagCollection } = __webpack_require__(/*! ./model */ "./src/modules/article/tag/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    articleTagCloud: [ArticleTagCloud]
    articlesByTag(tag: String!, pageSize: Int, pageNo: Int): ArticleTagPaginated
  }

  type ArticleTagPaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [ArticleTag]!
  }

  type ArticleTagCloud {
    name: String
    count: Int
  }

  type ArticleTag {
    id: ID!
    name: String
  }

  extend type Article {
    tags: [ArticleTag]
  }
`;

const resolvers = {
  Query: {
    articleTagCloud: async (_, __, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        articleTagCollection,
        articleTagSchema
      );
      return await model.aggregate([
        {
          $group: {
            _id: "$name",
            count: { $sum: 1 },
          },
        },
        {
          $project: {
            name: "$_id",
            count: "$count",
          },
        },
      ]);
    },
    articlesByTag: async (
      _,
      { tag, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      if (!tag) {
        return {
          results: [],
          pageNo: 0,
          hasMore: false,
        };
      }
      const model = getCollection(
        asset,
        articleTagCollection,
        articleTagSchema
      );
      const response = await model
        .find({ name: tag })
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    // tags: async (_, __, { user }) => {
    //   // if (!user) {
    //   //   return new AuthenticationError('Not authorized to access this content');
    //   // }
    //   const model = getCollection(210, articleTagCollection, articleTagSchema);
    //   return await model.find({});
    // },
  },

  Article: {
    tags: {
      resolve: async (parent, _args, { asset, user }, info) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          articleTagCollection,
          articleTagSchema
        );
        return await model.find({ articleId: parent.id });
      },
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/article/tag/model.js":
/*!******************************************!*\
  !*** ./src/modules/article/tag/model.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const articleTagSchema = new Schema(
  {
    name: { type: String },
    articleId: { type: String },
  },
  { timestamps: true }
);

const articleTagCollection = 'article.tag';

// module.exports = mongoose.model('bookmarks', articleSchema);
module.exports = { articleTagSchema, articleTagCollection };


/***/ }),

/***/ "./src/modules/asset/index.js":
/*!************************************!*\
  !*** ./src/modules/asset/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { assetCollection, assetSchema } = __webpack_require__(/*! ./model */ "./src/modules/asset/model.js");
const { getGlobalCollection } = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");
const { isUnauthorized } = __webpack_require__(/*! ../../lib/authutils */ "./src/lib/authutils.js");
const { nextval } = __webpack_require__(/*! ../sequence/service */ "./src/modules/sequence/service.ts");

const typeDefs = gql`
  extend type Query {
    asset(assetId: String!): Asset
    assetById(id: ID!): Asset
    assets: [Asset]
  }

  extend type Mutation {
    updateAsset(payload: AssetPayload): Asset
    createAsset(payload: AssetPayload, addition: AssetAdditionPayload): Asset
  }

  input AssetPayload {
    id: String
    name: String
    section: JSON
    featuredTitle: String
    featuredSubtitle: String
    hero: JSON
    jwtPassword: String
    productionMode: Boolean
  }

  input AssetAdditionPayload {
    email: String
  }

  type Asset {
    id: ID!
    name: String
    section: JSON
    featuredTitle: String
    featuredSubtitle: String
    hero: JSON
    jwtPassword: String
    productionMode: Boolean
    assetId: String
  }
`;

const resolvers = {
  Query: {
    asset: async (_, { assetId }, { user }) => {
      // if (!user) {
      //   return new AuthenticationError('Not authorized to access this content');
      // }
      const model = getGlobalCollection(assetCollection, assetSchema);
      return await model.findOne({ assetId });
    },
    assets: async () => {
      // if (!user) {
      //   return new AuthenticationError('Not authorized to access this content');
      // }
      const model = getGlobalCollection(assetCollection, assetSchema);
      return await model.find();
    },
  },

  Mutation: {
    updateAsset: async (_, args, { user }) => {
      const model = getGlobalCollection(assetCollection, assetSchema);
      if (args.payload.id) {
        return await model.findByIdAndUpdate(args.payload.id, args.payload, {
          new: true,
        });
      } else if (args.payload.assetId) {
        return await model.findOneAndUpdate(
          { assetId: args.payload.assetId },
          args.payload,
          {
            new: true,
          }
        );
      } else {
        const data = new model({
          ...args.payload,
          assetId: `a${await nextval("assetId")}`,
        });
        return await data.save();
      }
    },
    createAsset: async (_, { payload, addition }, { user }) => {
      const model = getGlobalCollection(assetCollection, assetSchema);
      const data = new model({
        ...payload,
        assetId: `a${await nextval("assetId")}`,
      });
      console.log(
        `user account needs to be setup for ${addition.email} in ${payload.name}`
      );
      return await data.save();
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/asset/model.js":
/*!************************************!*\
  !*** ./src/modules/asset/model.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const assetSchema = new Schema(
  {
    name: { type: String },
    section: { type: Array },
    featuredTitle: { type: String },
    featuredSubtitle: { type: String },
    jwtPassword: { type: String },
    productionMode: { type: Boolean, default: false },
    assetId: { type: String },
    hero: { type: Object },
  },
  { timestamps: true }
);

const assetCollection = "asset";

module.exports = { assetSchema, assetCollection };


/***/ }),

/***/ "./src/modules/gql-scalar/index.js":
/*!*****************************************!*\
  !*** ./src/modules/gql-scalar/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const GraphQLJSON = __webpack_require__(/*! graphql-type-json */ "graphql-type-json");

const typeDefs = gql`
  scalar JSON
`;

const resolvers = {
  JSON: GraphQLJSON,
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/comment/feedback/index.js":
/*!****************************************************!*\
  !*** ./src/modules/post/comment/feedback/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const {
  postCommentFeedbackSchema,
  postCommentFeedbackCollection,
} = __webpack_require__(/*! ./model */ "./src/modules/post/comment/feedback/model.js");
const { postCommentSchema, postCommentCollection } = __webpack_require__(/*! ../model */ "./src/modules/post/comment/model.js");
const { getCollection } = __webpack_require__(/*! ../../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    postCommentFeedback(commentId: ID!): [PostCommentFeedback]
  }

  extend type Mutation {
    addPostCommentFeedback(
      commentId: String!
      type: String!
    ): PostCommentFeedback
    removePostCommentFeedback(
      commentId: String!
      type: String!
    ): PostCommentFeedback
  }

  type PostCommentFeedback {
    id: ID!
    type: String
  }

  extend type PostComment {
    feedback: [PostCommentFeedback]
  }
`;

const resolvers = {
  Query: {
    postCommentFeedback: async (_, { commentId }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentFeedbackCollection,
        postCommentFeedbackSchema
      );
      return await model.find({ commentId: commentId, userId: user.userId });
    },
  },

  PostComment: {
    feedback: {
      resolve: async (parent, _args, { asset, user }) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          postCommentFeedbackCollection,
          postCommentFeedbackSchema
        );
        return await model.find({ commentId: parent.id, userId: user.userId });
      },
    },
  },

  Mutation: {
    addPostCommentFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentFeedbackCollection,
        postCommentFeedbackSchema
      );
      const response = await model.findOneAndUpdate(
        { commentId: args.commentId, userId: user.userId, type: args.type },
        { commentId: args.commentId, userId: user.userId, type: args.type },
        { upsert: true, new: true, rawResult: true }
      );
      if (!response.lastErrorObject.updatedExisting) {
        const postCommentModel = getCollection(
          asset,
          postCommentCollection,
          postCommentSchema
        );
        await postCommentModel.findByIdAndUpdate(
          args.commentId,
          {
            $inc: { [args.type]: 1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
    removePostCommentFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentFeedbackCollection,
        postCommentFeedbackSchema
      );
      const response = await model.findOneAndDelete(
        { commentId: args.commentId, userId: user.userId, type: args.type },
        {
          rawResult: true,
        }
      );
      if (response.lastErrorObject.n > 0) {
        const postCommentModel = getCollection(
          asset,
          postCommentCollection,
          postCommentSchema
        );
        await postCommentModel.findByIdAndUpdate(
          args.commentId,
          {
            $inc: { [args.type]: -1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/comment/feedback/model.js":
/*!****************************************************!*\
  !*** ./src/modules/post/comment/feedback/model.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postCommentFeedbackSchema = new Schema(
  {
    commentId: { type: String },
    type: { type: String },
    userId: { type: String },
  },
  { timestamps: true }
);

const postCommentFeedbackCollection = 'post.comment.feedback';

module.exports = { postCommentFeedbackSchema, postCommentFeedbackCollection };


/***/ }),

/***/ "./src/modules/post/comment/index.js":
/*!*******************************************!*\
  !*** ./src/modules/post/comment/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { postCommentSchema, postCommentCollection } = __webpack_require__(/*! ./model */ "./src/modules/post/comment/model.js");
const { postSchema, postCollection } = __webpack_require__(/*! ../model */ "./src/modules/post/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    postComments(
      postId: String!
      pageSize: Int
      pageNo: Int
    ): PostCommentPaginated
    postComment(id: ID!): PostComment
  }

  extend type Mutation {
    updatePostComment(payload: PostCommentPayload!): PostComment
    markPostCommentAsAnswer(id: ID!): PostComment
    unmarkPostCommentAsAnswer(id: ID!): PostComment
  }

  type PostCommentPaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [PostComment]!
  }

  input PostCommentPayload {
    id: ID
    text: String
    parentId: String
    postId: String!
  }

  type PostComment {
    id: ID!
    text: String
    parentId: String
    helpful: Int
    notHelpful: Int
    isAnswer: Boolean
    createdBy: String
    updatedBy: String
    createdAt: DateScalar
    updatedAt: DateScalar
  }

  extend type PostCommentFeedback {
    postComment: PostComment
  }
`;

const resolvers = {
  Query: {
    postComments: async (
      _,
      { postId, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );
      const response = await model
        .find({ postId: postId })
        // .sort({ rootParentId: 1, parentId: 1, createdAt: 1 })
        .sort({ isAnswer: -1 })
        .sort({ createdAt: 1 })
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    postComment: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );
      return await model.findById(id);
    },
  },

  PostCommentFeedback: {
    postComment: async (parent, _, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );
      return await model.findById(parent.commentId);
    },
  },

  Mutation: {
    updatePostComment: async (_, { payload }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );

      let id = payload.id;

      if (!payload.id) {
        const postModel = getCollection(asset, postCollection, postSchema);
        await postModel.findByIdAndUpdate(
          payload.postId,
          { $inc: { comments: 1 } },
          { new: true }
        );
        const response = await new model({
          ...payload,
          createdBy: user.userId,
        }).save();
        id = response.id;
      }

      const parentFields = { parentId: payload.parentId || id };
      if (!payload.id) {
        const parentComment = await model.findById(payload.parentId);
        if (parentComment) {
          parentFields.rootParentId = parentComment.rootParentId;
        } else {
          parentFields.rootParentId = parentFields.parentId;
        }
      }

      return await model.findByIdAndUpdate(
        id,
        {
          ...payload,
          ...parentFields,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );
    },
    markPostCommentAsAnswer: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );

      const response = await model.findByIdAndUpdate(
        id,
        {
          isAnswer: true,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );

      await model.updateMany(
        { $and: [{ postId: response.postId }, { _id: { $ne: id } }] },
        {
          $set: {
            isAnswer: false,
          },
        },
        {
          new: true,
        }
      );

      const postModel = getCollection(asset, postCollection, postSchema);
      await postModel.findByIdAndUpdate(
        response.postId,
        { isAnswered: true, answeredOn: new Date() },
        { new: true }
      );

      return response;
    },
    unmarkPostCommentAsAnswer: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postCommentCollection,
        postCommentSchema
      );

      const response = await model.findByIdAndUpdate(
        id,
        {
          isAnswer: false,
          updatedBy: user.userId,
        },
        {
          new: true,
        }
      );

      const postModel = getCollection(asset, postCollection, postSchema);
      await postModel.findByIdAndUpdate(
        response.postId,
        { isAnswered: false, answeredOn: null },
        { new: true }
      );

      return response;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/comment/model.js":
/*!*******************************************!*\
  !*** ./src/modules/post/comment/model.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postCommentSchema = new Schema(
  {
    text: { type: String },
    parentId: { type: String },
    rootParentId: { type: String },
    postId: { type: String },
    helpful: { type: Number, default: 0 },
    notHelpful: { type: Number, default: 0 },
    isAnswer: { type: Boolean, default: false },
    createdBy: { type: String },
    updatedBy: { type: String },
  },
  { timestamps: true }
);

const postCommentCollection = 'post.comment';

// module.exports = mongoose.model('bookmarks', postSchema);
module.exports = { postCommentSchema, postCommentCollection };


/***/ }),

/***/ "./src/modules/post/feedback/index.js":
/*!********************************************!*\
  !*** ./src/modules/post/feedback/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { postFeedbackSchema, postFeedbackCollection } = __webpack_require__(/*! ./model */ "./src/modules/post/feedback/model.js");
const { postSchema, postCollection } = __webpack_require__(/*! ../model */ "./src/modules/post/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    postFeedback(postId: ID!): [PostFeedback]
  }

  extend type Mutation {
    addPostFeedback(postId: String!, type: String!): PostFeedback
    removePostFeedback(postId: String!, type: String!): PostFeedback
  }

  type PostFeedback {
    id: ID!
    type: String
  }

  extend type Post {
    feedback: [PostFeedback]
  }
`;

const resolvers = {
  Query: {
    postFeedback: async (_, { postId }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postFeedbackCollection,
        postFeedbackSchema
      );
      return await model.find({ postId: postId, userId: user.userId });
    },
  },

  Post: {
    feedback: {
      resolve: async (parent, _args, { asset, user }) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          postFeedbackCollection,
          postFeedbackSchema
        );
        return await model.find({ postId: parent.id, userId: user.userId });
      },
    },
  },

  Mutation: {
    addPostFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postFeedbackCollection,
        postFeedbackSchema
      );
      const response = await model.findOneAndUpdate(
        { postId: args.postId, userId: user.userId, type: args.type },
        { postId: args.postId, userId: user.userId, type: args.type },
        { upsert: true, new: true, rawResult: true }
      );
      if (!response.lastErrorObject.updatedExisting) {
        const postModel = getCollection(asset, postCollection, postSchema);
        await postModel.findByIdAndUpdate(
          args.postId,
          {
            $inc: { [args.type]: 1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
    removePostFeedback: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postFeedbackCollection,
        postFeedbackSchema
      );
      const response = await model.findOneAndDelete(
        { postId: args.postId, userId: user.userId, type: args.type },
        {
          rawResult: true,
        }
      );
      if (response.lastErrorObject.n > 0) {
        const postModel = getCollection(asset, postCollection, postSchema);
        await postModel.findByIdAndUpdate(
          args.postId,
          {
            $inc: { [args.type]: -1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/feedback/model.js":
/*!********************************************!*\
  !*** ./src/modules/post/feedback/model.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postFeedbackSchema = new Schema(
  {
    postId: { type: String },
    type: { type: String },
    userId: { type: String },
  },
  { timestamps: true }
);

const postFeedbackCollection = 'post.feedback';

module.exports = { postFeedbackSchema, postFeedbackCollection };


/***/ }),

/***/ "./src/modules/post/follower/index.js":
/*!********************************************!*\
  !*** ./src/modules/post/follower/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { postFollowerSchema, postFollowerCollection } = __webpack_require__(/*! ./model */ "./src/modules/post/follower/model.js");
const { postSchema, postCollection } = __webpack_require__(/*! ./../model */ "./src/modules/post/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  type PostFollower {
    id: ID!
    userId: String
    postId: String
  }

  extend type Post {
    followerList: [PostFollower]
  }

  extend type Mutation {
    followPost(postId: String!): PostFollower
    unfollowPost(postId: String!): PostFollower
  }
`;

const resolvers = {
  Post: {
    followerList: {
      resolve: async (parent, _args, { asset, user }, info) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(
          asset,
          postFollowerCollection,
          postFollowerSchema
        );
        return await model.find({ postId: parent.id });
      },
    },
  },

  Mutation: {
    followPost: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postFollowerCollection,
        postFollowerSchema
      );
      const response = await model.findOneAndUpdate(
        { postId: args.postId, userId: user.userId },
        { postId: args.postId, userId: user.userId },
        { upsert: true, new: true, rawResult: true }
      );
      if (!response.lastErrorObject.updatedExisting) {
        const postModel = getCollection(asset, postCollection, postSchema);
        await postModel.findByIdAndUpdate(
          args.postId,
          {
            $inc: { followers: 1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
    unfollowPost: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(
        asset,
        postFollowerCollection,
        postFollowerSchema
      );
      const response = await model.findOneAndDelete(
        { postId: args.postId, userId: user.userId },
        {
          rawResult: true,
        }
      );
      if (response.lastErrorObject.n > 0) {
        const postModel = getCollection(asset, postCollection, postSchema);
        await postModel.findByIdAndUpdate(
          args.postId,
          {
            $inc: { followers: -1 },
          },
          { new: true }
        );
      }
      return response.value;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/follower/model.js":
/*!********************************************!*\
  !*** ./src/modules/post/follower/model.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postFollowerSchema = new Schema(
  {
    postId: { type: String },
    userId: { type: String },
  },
  { timestamps: true }
);

const postFollowerCollection = 'post.follower';

// module.exports = mongoose.model('bookmarks', postSchema);
module.exports = { postFollowerSchema, postFollowerCollection };


/***/ }),

/***/ "./src/modules/post/index.js":
/*!***********************************!*\
  !*** ./src/modules/post/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { GraphQLScalarType } = __webpack_require__(/*! graphql */ "graphql");
const { postSchema, postCollection } = __webpack_require__(/*! ./model */ "./src/modules/post/model.js");
const { postTagSchema, postTagCollection } = __webpack_require__(/*! ./tag/model */ "./src/modules/post/tag/model.js");
const {
  postFollowerSchema,
  postFollowerCollection,
} = __webpack_require__(/*! ./follower/model */ "./src/modules/post/follower/model.js");
const { getCollection } = __webpack_require__(/*! ../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    post(id: ID!): Post
    posts(pageSize: Int, pageNo: Int): PostPaginated
    searchPosts(text: String, pageSize: Int, pageNo: Int): PostPaginated
    myPosts(pageSize: Int, pageNo: Int): PostPaginated
  }

  extend type Mutation {
    addPost(payload: PostPayload): Post
    deletePost(id: ID!): Post
  }

  input PostPayload {
    id: String
    title: String
    description: String
    addTags: [String]
    removeTags: [String]
  }

  type PostPaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [Post]!
  }

  type Post {
    id: ID!
    title: String
    description: String
    views: Int!
    comments: Int!
    isAnswered: Boolean!
    answeredOn: DateScalar
    followers: Int!
    helpful: Int!
    notHelpful: Int!
    createdAt: DateScalar
    updatedAt: DateScalar
    createdBy: String
    updatedBy: String
  }

  extend type PostFeedback {
    post: Post
  }
  extend type PostTag {
    post: Post
  }
  extend type PostFollower {
    post: Post
  }
  extend type PostComment {
    post: Post
  }
`;

const resolvers = {
  Query: {
    post: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      response = await model.findByIdAndUpdate(
        id,
        { $inc: { views: 1 } },
        { new: true }
      );
      return response;
    },
    posts: async (_, { pageSize = 0, pageNo = 0 }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      const response = await model
        .find({})
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    searchPosts: async (
      _,
      { text, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      if (!text) {
        return {
          results: [],
          pageNo: 0,
          hasMore: false,
          total: 0,
        };
      }
      const model = getCollection(asset, postCollection, postSchema);
      const res = await model
        .find({
          $or: [
            { description: { $regex: new RegExp(text, "ig") } },
            { title: { $regex: new RegExp(text, "ig") } },
          ],
        })
        .skip(pageNo * pageSize)
        .limit(pageSize);

      return {
        results: res,
        pageNo: res.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: res.length === pageSize ? true : false,
      };
    },
    myPosts: async (_, { pageSize = 0, pageNo = 0 }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      const res = await model
        .find({
          createdBy: user.userId,
        })
        .skip(pageNo * pageSize)
        .limit(pageSize);

      return {
        results: res,
        pageNo: res.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: res.length === pageSize ? true : false,
      };
    },
  },

  PostFeedback: {
    post: async (parent, _, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      return await model.findById(parent.postId);
    },
  },

  PostTag: {
    post: async (parent, _, { asset, user }) => {
      const model = getCollection(asset, postCollection, postSchema);
      return await model.findById(parent.postId);
    },
  },

  PostFollower: {
    post: async (parent, _, { asset, user }) => {
      const model = getCollection(asset, postCollection, postSchema);
      return await model.findById(parent.postId);
    },
  },

  PostComment: {
    post: async (parent, _, { asset, user }) => {
      const model = getCollection(asset, postCollection, postSchema);
      return await model.findById(parent.postId);
    },
  },

  Mutation: {
    addPost: async (_, args, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      const tagModel = getCollection(asset, postTagCollection, postTagSchema);
      const followerModel = getCollection(
        asset,
        postFollowerCollection,
        postFollowerSchema
      );
      let postResponse;

      if (args.payload.id) {
        existingPost = await model.findById(args.payload.id);
        postResponse = await model.findByIdAndUpdate(
          args.payload.id,
          { ...args.payload, updatedBy: user.userId },
          { new: true }
        );
      } else {
        const data = new model({
          ...args.payload,
          followers: 1,
          createdBy: user.userId,
          updatedBy: user.userId,
        });
        postResponse = await data.save();

        await followerModel.findOneAndUpdate(
          { postId: postResponse.id, userId: user.userId },
          { postId: postResponse.id, userId: user.userId },
          { upsert: true, new: true, rawResult: true }
        );
      }

      args.payload.addTags.forEach(async (item) => {
        const data = new tagModel({
          name: item,
          postId: postResponse._id,
        });
        await data.save();
      });

      args.payload.removeTags.forEach(async (item) => {
        await tagModel.deleteMany({
          postId: postResponse._id,
          name: item,
        });
      });

      return postResponse;
    },
    deletePost: async (_, { id }, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postCollection, postSchema);
      const tagModel = getCollection(asset, postTagCollection, postTagSchema);

      const res = await model.findByIdAndDelete(id);

      await tagModel.deleteMany({
        postId: id,
      });

      return res;
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/model.js":
/*!***********************************!*\
  !*** ./src/modules/post/model.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postSchema = new Schema(
  {
    title: { type: String },
    description: { type: String },
    views: { type: Number, default: 0 },
    isAnswered: { type: Boolean, default: false },
    answeredOn: { type: Date },
    followers: { type: Number, default: 0 },
    comments: { type: Number, default: 0 },
    helpful: { type: Number, default: 0 },
    notHelpful: { type: Number, default: 0 },
    createdBy: { type: String },
    updatedBy: { type: String },
  },
  { timestamps: true }
);

const postCollection = 'post';

// module.exports = mongoose.model('bookmarks', postSchema);
module.exports = { postSchema, postCollection };


/***/ }),

/***/ "./src/modules/post/tag/index.js":
/*!***************************************!*\
  !*** ./src/modules/post/tag/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { gql, AuthenticationError } = __webpack_require__(/*! apollo-server-express */ "apollo-server-express");
const { postTagSchema, postTagCollection } = __webpack_require__(/*! ./model */ "./src/modules/post/tag/model.js");
const { getCollection } = __webpack_require__(/*! ../../../lib/dbutils */ "./src/lib/dbutils.ts");

const typeDefs = gql`
  extend type Query {
    postTagCloud: [PostTagCloud]
    postsByTag(tag: String!, pageSize: Int, pageNo: Int): PostTagPaginated
  }

  type PostTagPaginated {
    pageNo: Int
    hasMore: Boolean
    total: Int
    results: [PostTag]!
  }

  type PostTagCloud {
    name: String
    count: Int
  }

  type PostTag {
    id: ID!
    name: String
  }

  extend type Post {
    tags: [PostTag]
  }
`;

const resolvers = {
  Query: {
    postTagCloud: async (_, __, { asset, user }) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      const model = getCollection(asset, postTagCollection, postTagSchema);
      return await model.aggregate([
        {
          $group: {
            _id: "$name",
            count: { $sum: 1 },
          },
        },
        {
          $project: {
            name: "$_id",
            count: "$count",
          },
        },
      ]);
    },
    postsByTag: async (
      _,
      { tag, pageSize = 0, pageNo = 0 },
      { asset, user }
    ) => {
      if (!asset || !user) {
        return new AuthenticationError("Not authorized to access this content");
      }
      if (!tag) {
        return {
          results: [],
          pageNo: 0,
          hasMore: false,
        };
      }
      const model = getCollection(asset, postTagCollection, postTagSchema);
      const response = await model
        .find({ name: tag })
        .skip(pageNo * pageSize)
        .limit(pageSize);
      return {
        results: response,
        pageNo: response.length === pageSize ? pageNo + 1 : pageNo,
        hasMore: response.length === pageSize ? true : false,
      };
    },
    // tags: async (_, __, { user }) => {
    //   // if (!user) {
    //   //   return new AuthenticationError('Not authorized to access this content');
    //   // }
    //   const model = getCollection(210, postTagCollection, postTagSchema);
    //   return await model.find({});
    // },
  },

  Post: {
    tags: {
      resolve: async (parent, _args, { asset, user }, info) => {
        if (!asset || !user) {
          return new AuthenticationError(
            "Not authorized to access this content"
          );
        }
        const model = getCollection(asset, postTagCollection, postTagSchema);
        return await model.find({ postId: parent.id });
      },
    },
  },
};

module.exports = { typeDefs, resolvers };


/***/ }),

/***/ "./src/modules/post/tag/model.js":
/*!***************************************!*\
  !*** ./src/modules/post/tag/model.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const postTagSchema = new Schema(
  {
    name: { type: String },
    postId: { type: String },
  },
  { timestamps: true }
);

const postTagCollection = 'post.tag';

// module.exports = mongoose.model('bookmarks', postSchema);
module.exports = { postTagSchema, postTagCollection };


/***/ }),

/***/ "./src/modules/sequence/model.js":
/*!***************************************!*\
  !*** ./src/modules/sequence/model.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");

const Schema = mongoose.Schema;
const sequenceSchema = new Schema(
  {
    field: { type: String },
    context: { type: String },
    nextval: { type: Number },
    factor: { type: Number },
  },
  { timestamps: true }
);

const sequenceCollection = 'sequence';

module.exports = { sequenceSchema, sequenceCollection };


/***/ }),

/***/ "aihub":
/*!************************!*\
  !*** external "aihub" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("aihub");

/***/ }),

/***/ "apollo-server-express":
/*!****************************************!*\
  !*** external "apollo-server-express" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("apollo-server-express");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("axios");

/***/ }),

/***/ "bcrypt":
/*!*************************!*\
  !*** external "bcrypt" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("bcrypt");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("date-fns");

/***/ }),

/***/ "ejs":
/*!**********************!*\
  !*** external "ejs" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("ejs");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");

/***/ }),

/***/ "graphql":
/*!**************************!*\
  !*** external "graphql" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql");

/***/ }),

/***/ "graphql-type-json":
/*!************************************!*\
  !*** external "graphql-type-json" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql-type-json");

/***/ }),

/***/ "handlebars":
/*!*****************************!*\
  !*** external "handlebars" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("handlebars");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("jsonwebtoken");

/***/ }),

/***/ "jszip":
/*!************************!*\
  !*** external "jszip" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("jszip");

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("lodash");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("moment");

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongoose");

/***/ }),

/***/ "multer":
/*!*************************!*\
  !*** external "multer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("multer");

/***/ }),

/***/ "papaparse":
/*!****************************!*\
  !*** external "papaparse" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("papaparse");

/***/ }),

/***/ "tesseract.js":
/*!*******************************!*\
  !*** external "tesseract.js" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("tesseract.js");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("uuid");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 		} catch(e) {
/******/ 			module.error = e;
/******/ 			throw e;
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("8fe32a2061d96325b665")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId, fetchPriority) {
/******/ 				return trackBlockingPromise(require.e(chunkId, fetchPriority));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				// inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results).then(function () {});
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							}, [])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								}
/******/ 								return setStatus("ready").then(function () {
/******/ 									return updatedModules;
/******/ 								});
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = __webpack_require__.hmrS_require = __webpack_require__.hmrS_require || {
/******/ 			"main": 1
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no chunk install function needed
/******/ 		
/******/ 		// no chunk loading
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			var update = require("./" + __webpack_require__.hu(chunkId));
/******/ 			var updatedModules = update.modules;
/******/ 			var runtime = update.runtime;
/******/ 			for(var moduleId in updatedModules) {
/******/ 				if(__webpack_require__.o(updatedModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = updatedModules[moduleId];
/******/ 					if(updatedModulesList) updatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 		}
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.requireHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result = newModuleFactory
/******/ 						? getAffectedModuleEffects(moduleId)
/******/ 						: {
/******/ 								type: "disposed",
/******/ 								moduleId: moduleId
/******/ 							};
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err1) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err1,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err1);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.require = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.require = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.requireHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = function() {
/******/ 			return Promise.resolve().then(function() {
/******/ 				return require("./" + __webpack_require__.hmrF());
/******/ 			})['catch'](function(err) { if(err.code !== 'MODULE_NOT_FOUND') throw err; });
/******/ 		}
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./node_modules/webpack/hot/poll.js?1000");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,