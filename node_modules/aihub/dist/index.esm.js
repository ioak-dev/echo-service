/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const axios$1 = require("axios");
const API_BASE_URL$1 = "https://api.openai.com";
// const API_KEY = process.env.CHATGPT_API_KEY || "CHAT GPT KEY";
const predict$1 = (apiKey_1, uri_1, payload_1, ...args_1) => __awaiter(void 0, [apiKey_1, uri_1, payload_1, ...args_1], void 0, function* (apiKey, uri, payload, format = "string") {
    var _a, _b, _c, _d, _e, _f, _g;
    let authorization = `Bearer ${apiKey}`;
    const _headers = {
        "Content-Type": "application/json",
        authorization,
    };
    const output = {
        isSuccessful: null,
        responseText: null,
        responseObject: {},
        responseList: [],
        errorDetails: null,
        errorCode: null,
    };
    try {
        const llmResponse = yield axios$1.post(`${API_BASE_URL$1}${uri}`, payload, {
            headers: _headers,
        });
        if (((_a = llmResponse.data) === null || _a === void 0 ? void 0 : _a.choices.length) > 0 &&
            ((_d = (_c = (_b = llmResponse.data) === null || _b === void 0 ? void 0 : _b.choices[0]) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content)) {
            output.responseText = (_g = (_f = (_e = llmResponse.data) === null || _e === void 0 ? void 0 : _e.choices[0]) === null || _f === void 0 ? void 0 : _f.message) === null || _g === void 0 ? void 0 : _g.content.replace(/```json/g, "").replace(/```/g, "");
            if (format === "object") {
                output.responseObject = JSON.parse(output.responseText);
            }
            if (format === "list") {
                output.responseList = JSON.parse(output.responseText);
            }
            output.isSuccessful = true;
        }
        else {
            output.isSuccessful = false;
            output.errorCode = "NO_DATA_RECEIVED";
        }
    }
    catch (error) {
        console.log("**GPT service error");
        console.log(error);
        output.isSuccessful = false;
        if (error.response) {
            output.errorDetails = error.response.data;
            output.errorCode = error.response.status;
        }
        else {
            output.errorDetails = error;
            output.errorCode = "UNKNOWN";
        }
    }
    return output;
});

const axios = require("axios");
const API_BASE_URL = "https://generativelanguage.googleapis.com";
// const API_KEY = process.env.CHATGPT_API_KEY || "CHAT GPT KEY";
const predict = (apiKey_1, uri_1, payload_1, ...args_1) => __awaiter(void 0, [apiKey_1, uri_1, payload_1, ...args_1], void 0, function* (apiKey, uri, payload, format = "string") {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    let authorization = apiKey;
    const _headers = {
        "Content-Type": "application/json",
        authorization,
    };
    const _params = {
        key: authorization,
    };
    const output = {
        isSuccessful: null,
        responseText: null,
        responseObject: {},
        responseList: [],
        errorDetails: null,
        errorCode: null,
    };
    try {
        const llmResponse = yield axios.post(`${API_BASE_URL}${uri}`, payload, {
            headers: _headers,
            params: _params,
        });
        console.log(llmResponse.status, llmResponse.data, llmResponse.data.candidates[0].content);
        console.log("****");
        console.log((_d = (_c = (_b = (_a = llmResponse.data) === null || _a === void 0 ? void 0 : _a.candidates[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts[0]) === null || _d === void 0 ? void 0 : _d.text);
        if (((_e = llmResponse.data) === null || _e === void 0 ? void 0 : _e.candidates.length) > 0 &&
            ((_h = (_g = (_f = llmResponse.data) === null || _f === void 0 ? void 0 : _f.candidates[0]) === null || _g === void 0 ? void 0 : _g.content) === null || _h === void 0 ? void 0 : _h.parts.length) > 0 &&
            ((_m = (_l = (_k = (_j = llmResponse.data) === null || _j === void 0 ? void 0 : _j.candidates[0]) === null || _k === void 0 ? void 0 : _k.content) === null || _l === void 0 ? void 0 : _l.parts[0]) === null || _m === void 0 ? void 0 : _m.text)) {
            output.responseText =
                (_r = (_q = (_p = (_o = llmResponse.data) === null || _o === void 0 ? void 0 : _o.candidates[0]) === null || _p === void 0 ? void 0 : _p.content) === null || _q === void 0 ? void 0 : _q.parts[0]) === null || _r === void 0 ? void 0 : _r.text.replace(/```json/g, "").replace(/```/g, "");
            if (format === "object") {
                output.responseObject = JSON.parse(output.responseText);
            }
            if (format === "list") {
                output.responseList = JSON.parse(output.responseText);
            }
            output.isSuccessful = true;
        }
        else {
            output.isSuccessful = false;
            output.errorCode = "NO_DATA_RECEIVED";
        }
    }
    catch (error) {
        console.log("**GEMINI service error");
        console.log(error);
        output.isSuccessful = false;
        if (error.response) {
            output.errorDetails = error.response.data;
            output.errorCode = error.response.status;
        }
        else {
            output.errorDetails = error;
            output.errorCode = "UNKNOWN";
        }
    }
    return output;
});

const ChatGpt = {
    process: predict$1,
    ResponseType: {},
};
const Gemini = {
    process: predict,
    ResponseType: {},
};

export { ChatGpt, Gemini };
